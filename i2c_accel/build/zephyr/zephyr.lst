
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 1d 00 20 39 26 00 00 43 66 00 00 0d 26 00 00     ... 9&..Cf...&..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	0d 26 00 00 0d 26 00 00 0d 26 00 00 00 00 00 00     .&...&...&......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	09 23 00 00 0d 26 00 00 00 00 00 00 b5 22 00 00     .#...&......."..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	0d 26 00 00                                         .&..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
			switch (*fmt) {
  c0:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
  d0:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
  e0:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..
  f0:	b9 23 00 00 b9 23 00 00 b9 23 00 00 b9 23 00 00     .#...#...#...#..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
				align = VA_STACK_ALIGN(void *);
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
			switch (*fmt) {
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x106>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
		buf = (void *) ROUND_UP(buf, align);
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
		if (is_str_arg) {
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
			int v = va_arg(ap, int);
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
			}
			buf += sizeof(int);
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
				arg_idx--;
     174:	d002      	beq.n	17c <__data_size+0x4>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
				parsing = false;
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
				if (fmt[-1] == 'l') {
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
					if (fmt[-2] == 'l') {
     188:	d002      	beq.n	190 <__data_size+0x18>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				parsing = false;
     190:	ea94 0f05 	teq	r4, r5
						align = VA_STACK_ALIGN(long long);
     194:	f000 80a7 	beq.w	2e6 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xf2>
				size = sizeof(void *);
     198:	f1a4 0401 	sub.w	r4, r4, #1
					v.ld = va_arg(ap, long double);
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <__data_size+0x46>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
				buf = (void *) ROUND_UP(buf, align);
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
					if (BUF_OFFSET + size > len) {
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
						*(long double *)buf = v.ld;
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <__data_size+0x64>
				buf += size;
     1be:	f1a5 0520 	sub.w	r5, r5, #32
				parsing = false;
     1c2:	f10e 0e20 	add.w	lr, lr, #32
			switch (*fmt) {
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
			if (*++fmt == '\0') {
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
			if (!parsing) {
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
				if (*fmt == '%') {
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
					arg_idx++;
     1e0:	d507      	bpl.n	1f2 <__data_size+0x7a>
     1e2:	f04f 0e00 	mov.w	lr, #0
					parsing = true;
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
				align = VA_STACK_ALIGN(size_t);
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
			switch (*fmt) {
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
				parsing = false;
     1f6:	d31b      	bcc.n	230 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x3c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
					return -EINVAL;
     1fc:	d30c      	bcc.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
			long long v = va_arg(ap, long long);
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
				}
			}
			buf += sizeof(long long);
     214:	f080 809a 	bcs.w	34c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x158>
		if (is_str_arg) {
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
		} else if (size == sizeof(int)) {
     21c:	bf08      	it	eq
			int v = va_arg(ap, int);
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
			if (buf0 != NULL) {
     222:	f150 0000 	adcs.w	r0, r0, #0
		} else if (size == sizeof(long long)) {
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
			long long v = va_arg(ap, long long);
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
			if (buf0 != NULL) {
     234:	4140      	adcs	r0, r0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
			s = va_arg(ap, char *);
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
			if (is_ro && !do_ro) {
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25e:	da0c      	bge.n	27a <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x86>
				if (buf0 != NULL) {
     260:	320c      	adds	r2, #12
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	dd08      	ble.n	276 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x82>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
					str_ptr_arg[s_idx] = arg_idx;
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
					str_ptr_pos[s_idx] = s_ptr_idx;
     270:	fa21 f102 	lsr.w	r1, r1, r2
					str_ptr_arg[s_idx] = arg_idx;
     274:	e00c      	b.n	290 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x9c>
					if (is_ro) {
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
						s_ro_cnt++;
     288:	bfdc      	itt	le
				s_idx++;
     28a:	ea41 010c 	orrle.w	r1, r1, ip
					if (BUF_OFFSET + size > len) {
     28e:	4090      	lslle	r0, r2
			buf += sizeof(char *);
     290:	1ae4      	subs	r4, r4, r3
					if (BUF_OFFSET + size > len) {
     292:	bfa2      	ittt	ge
			switch (*fmt) {
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
				} else if (is_ro) {
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xea>
     2a4:	340c      	adds	r4, #12
					len += 1;
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xd2>
     2a8:	f104 0414 	add.w	r4, r4, #20
					len += 2;
     2ac:	f1c4 0220 	rsb	r2, r4, #32
				} else if (rws_pos_en) {
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
					len += strlen(s) + 1 + 1;
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     2e2:	4629      	mov	r1, r5

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <__data_size+0x20>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
		for (i = 0; i < s_idx; i++) {
     304:	d029      	beq.n	35a <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x166>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
			*buf++ = str_ptr_arg[i];
     310:	d005      	beq.n	31e <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x12a>
		if (BUF_OFFSET + 1 + size > len) {
     312:	ea54 0c00 	orrs.w	ip, r4, r0
			*buf++ = str_ptr_arg[i];
     316:	bf04      	itt	eq
	for (i = 0; i < s_idx; i++) {
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	bf1e      	ittt	ne
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
			if (BUF_OFFSET + 1 > len) {
     32e:	d105      	bne.n	33c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x148>
     330:	0040      	lsls	r0, r0, #1
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
			if (BUF_OFFSET + 1 > len) {
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
			*buf++ = pos;
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
		for (i = 0; i < s_idx; i++) {
     340:	bf3c      	itt	cc
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
		if (rws_pos_en) {
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
			*buf++ = str_ptr_arg[i];
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
		if (BUF_OFFSET + 1 + size > len) {
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
		*buf++ = str_ptr_pos[i];
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
		memcpy(buf, s, size);
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
		buf += size;
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
	for (i = 0; i < s_idx; i++) {
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
			size = strlen(s) + 1;
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x50>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
		return -EFAULT;
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x50>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x50>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <__data_size+0x7a>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <__data_size+0x7a>
     476:	bf00      	nop

00000478 <__aeabi_frsub>:
     478:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     47c:	e002      	b.n	484 <__addsf3>
     47e:	bf00      	nop

00000480 <__aeabi_fsub>:
     480:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000484 <__addsf3>:
     484:	0042      	lsls	r2, r0, #1
     486:	bf1f      	itttt	ne
     488:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     48c:	ea92 0f03 	teqne	r2, r3
     490:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     494:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     498:	d06a      	beq.n	570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
     49a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     49e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     4a2:	bfc1      	itttt	gt
     4a4:	18d2      	addgt	r2, r2, r3
     4a6:	4041      	eorgt	r1, r0
     4a8:	4048      	eorgt	r0, r1
     4aa:	4041      	eorgt	r1, r0
     4ac:	bfb8      	it	lt
     4ae:	425b      	neglt	r3, r3
     4b0:	2b19      	cmp	r3, #25
     4b2:	bf88      	it	hi
     4b4:	4770      	bxhi	lr
     4b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     4ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     4be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4c2:	bf18      	it	ne
     4c4:	4240      	negne	r0, r0
     4c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     4ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     4ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     4d2:	bf18      	it	ne
     4d4:	4249      	negne	r1, r1
     4d6:	ea92 0f03 	teq	r2, r3
     4da:	d03f      	beq.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
     4dc:	f1a2 0201 	sub.w	r2, r2, #1
     4e0:	fa41 fc03 	asr.w	ip, r1, r3
     4e4:	eb10 000c 	adds.w	r0, r0, ip
     4e8:	f1c3 0320 	rsb	r3, r3, #32
     4ec:	fa01 f103 	lsl.w	r1, r1, r3
     4f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     4f4:	d502      	bpl.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     4f6:	4249      	negs	r1, r1
     4f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     4fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     500:	d313      	bcc.n	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
     502:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     506:	d306      	bcc.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     508:	0840      	lsrs	r0, r0, #1
     50a:	ea4f 0131 	mov.w	r1, r1, rrx
     50e:	f102 0201 	add.w	r2, r2, #1
     512:	2afe      	cmp	r2, #254	; 0xfe
     514:	d251      	bcs.n	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
     516:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     51a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     51e:	bf08      	it	eq
     520:	f020 0001 	biceq.w	r0, r0, #1
     524:	ea40 0003 	orr.w	r0, r0, r3
     528:	4770      	bx	lr
     52a:	0049      	lsls	r1, r1, #1
     52c:	eb40 0000 	adc.w	r0, r0, r0
     530:	3a01      	subs	r2, #1
     532:	bf28      	it	cs
     534:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     538:	d2ed      	bcs.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     53a:	fab0 fc80 	clz	ip, r0
     53e:	f1ac 0c08 	sub.w	ip, ip, #8
     542:	ebb2 020c 	subs.w	r2, r2, ip
     546:	fa00 f00c 	lsl.w	r0, r0, ip
     54a:	bfaa      	itet	ge
     54c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     550:	4252      	neglt	r2, r2
     552:	4318      	orrge	r0, r3
     554:	bfbc      	itt	lt
     556:	40d0      	lsrlt	r0, r2
     558:	4318      	orrlt	r0, r3
     55a:	4770      	bx	lr
     55c:	f092 0f00 	teq	r2, #0
     560:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     564:	bf06      	itte	eq
     566:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     56a:	3201      	addeq	r2, #1
     56c:	3b01      	subne	r3, #1
     56e:	e7b5      	b.n	4dc <__addsf3+0x58>
     570:	ea4f 0341 	mov.w	r3, r1, lsl #1
     574:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     578:	bf18      	it	ne
     57a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     57e:	d021      	beq.n	5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>
     580:	ea92 0f03 	teq	r2, r3
     584:	d004      	beq.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
     586:	f092 0f00 	teq	r2, #0
     58a:	bf08      	it	eq
     58c:	4608      	moveq	r0, r1
     58e:	4770      	bx	lr
     590:	ea90 0f01 	teq	r0, r1
     594:	bf1c      	itt	ne
     596:	2000      	movne	r0, #0
     598:	4770      	bxne	lr
     59a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     59e:	d104      	bne.n	5aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc2>
     5a0:	0040      	lsls	r0, r0, #1
     5a2:	bf28      	it	cs
     5a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     5a8:	4770      	bx	lr
     5aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     5ae:	bf3c      	itt	cc
     5b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     5b4:	4770      	bxcc	lr
     5b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     5ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     5be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     5c2:	4770      	bx	lr
     5c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     5c8:	bf16      	itet	ne
     5ca:	4608      	movne	r0, r1
     5cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     5d0:	4601      	movne	r1, r0
     5d2:	0242      	lsls	r2, r0, #9
     5d4:	bf06      	itte	eq
     5d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     5da:	ea90 0f01 	teqeq	r0, r1
     5de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     5e2:	4770      	bx	lr

000005e4 <__aeabi_ui2f>:
     5e4:	f04f 0300 	mov.w	r3, #0
     5e8:	e004      	b.n	5f4 <__aeabi_i2f+0x8>
     5ea:	bf00      	nop

000005ec <__aeabi_i2f>:
     5ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     5f0:	bf48      	it	mi
     5f2:	4240      	negmi	r0, r0
     5f4:	ea5f 0c00 	movs.w	ip, r0
     5f8:	bf08      	it	eq
     5fa:	4770      	bxeq	lr
     5fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     600:	4601      	mov	r1, r0
     602:	f04f 0000 	mov.w	r0, #0
     606:	e01c      	b.n	642 <__aeabi_l2f+0x2a>

00000608 <__aeabi_ul2f>:
     608:	ea50 0201 	orrs.w	r2, r0, r1
     60c:	bf08      	it	eq
     60e:	4770      	bxeq	lr
     610:	f04f 0300 	mov.w	r3, #0
     614:	e00a      	b.n	62c <__aeabi_l2f+0x14>
     616:	bf00      	nop

00000618 <__aeabi_l2f>:
     618:	ea50 0201 	orrs.w	r2, r0, r1
     61c:	bf08      	it	eq
     61e:	4770      	bxeq	lr
     620:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     624:	d502      	bpl.n	62c <__aeabi_l2f+0x14>
     626:	4240      	negs	r0, r0
     628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     62c:	ea5f 0c01 	movs.w	ip, r1
     630:	bf02      	ittt	eq
     632:	4684      	moveq	ip, r0
     634:	4601      	moveq	r1, r0
     636:	2000      	moveq	r0, #0
     638:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     63c:	bf08      	it	eq
     63e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     642:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     646:	fabc f28c 	clz	r2, ip
     64a:	3a08      	subs	r2, #8
     64c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     650:	db10      	blt.n	674 <__aeabi_l2f+0x5c>
     652:	fa01 fc02 	lsl.w	ip, r1, r2
     656:	4463      	add	r3, ip
     658:	fa00 fc02 	lsl.w	ip, r0, r2
     65c:	f1c2 0220 	rsb	r2, r2, #32
     660:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     664:	fa20 f202 	lsr.w	r2, r0, r2
     668:	eb43 0002 	adc.w	r0, r3, r2
     66c:	bf08      	it	eq
     66e:	f020 0001 	biceq.w	r0, r0, #1
     672:	4770      	bx	lr
     674:	f102 0220 	add.w	r2, r2, #32
     678:	fa01 fc02 	lsl.w	ip, r1, r2
     67c:	f1c2 0220 	rsb	r2, r2, #32
     680:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     684:	fa21 f202 	lsr.w	r2, r1, r2
     688:	eb43 0002 	adc.w	r0, r3, r2
     68c:	bf08      	it	eq
     68e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     692:	4770      	bx	lr

00000694 <__aeabi_fmul>:
     694:	f04f 0cff 	mov.w	ip, #255	; 0xff
     698:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     69c:	bf1e      	ittt	ne
     69e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     6a2:	ea92 0f0c 	teqne	r2, ip
     6a6:	ea93 0f0c 	teqne	r3, ip
     6aa:	d06f      	beq.n	78c <__aeabi_fmul+0xf8>
     6ac:	441a      	add	r2, r3
     6ae:	ea80 0c01 	eor.w	ip, r0, r1
     6b2:	0240      	lsls	r0, r0, #9
     6b4:	bf18      	it	ne
     6b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     6ba:	d01e      	beq.n	6fa <__aeabi_fmul+0x66>
     6bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     6c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     6c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     6c8:	fba0 3101 	umull	r3, r1, r0, r1
     6cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     6d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     6d4:	bf3e      	ittt	cc
     6d6:	0049      	lslcc	r1, r1, #1
     6d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     6dc:	005b      	lslcc	r3, r3, #1
     6de:	ea40 0001 	orr.w	r0, r0, r1
     6e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     6e6:	2afd      	cmp	r2, #253	; 0xfd
     6e8:	d81d      	bhi.n	726 <__aeabi_fmul+0x92>
     6ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     6ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     6f2:	bf08      	it	eq
     6f4:	f020 0001 	biceq.w	r0, r0, #1
     6f8:	4770      	bx	lr
     6fa:	f090 0f00 	teq	r0, #0
     6fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     702:	bf08      	it	eq
     704:	0249      	lsleq	r1, r1, #9
     706:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     70a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     70e:	3a7f      	subs	r2, #127	; 0x7f
     710:	bfc2      	ittt	gt
     712:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     716:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     71a:	4770      	bxgt	lr
     71c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     720:	f04f 0300 	mov.w	r3, #0
     724:	3a01      	subs	r2, #1
     726:	dc5d      	bgt.n	7e4 <__aeabi_fmul+0x150>
     728:	f112 0f19 	cmn.w	r2, #25
     72c:	bfdc      	itt	le
     72e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     732:	4770      	bxle	lr
     734:	f1c2 0200 	rsb	r2, r2, #0
     738:	0041      	lsls	r1, r0, #1
     73a:	fa21 f102 	lsr.w	r1, r1, r2
     73e:	f1c2 0220 	rsb	r2, r2, #32
     742:	fa00 fc02 	lsl.w	ip, r0, r2
     746:	ea5f 0031 	movs.w	r0, r1, rrx
     74a:	f140 0000 	adc.w	r0, r0, #0
     74e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     752:	bf08      	it	eq
     754:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     758:	4770      	bx	lr
     75a:	f092 0f00 	teq	r2, #0
     75e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     762:	bf02      	ittt	eq
     764:	0040      	lsleq	r0, r0, #1
     766:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     76a:	3a01      	subeq	r2, #1
     76c:	d0f9      	beq.n	762 <__aeabi_fmul+0xce>
     76e:	ea40 000c 	orr.w	r0, r0, ip
     772:	f093 0f00 	teq	r3, #0
     776:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     77a:	bf02      	ittt	eq
     77c:	0049      	lsleq	r1, r1, #1
     77e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     782:	3b01      	subeq	r3, #1
     784:	d0f9      	beq.n	77a <__aeabi_fmul+0xe6>
     786:	ea41 010c 	orr.w	r1, r1, ip
     78a:	e78f      	b.n	6ac <__aeabi_fmul+0x18>
     78c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     790:	ea92 0f0c 	teq	r2, ip
     794:	bf18      	it	ne
     796:	ea93 0f0c 	teqne	r3, ip
     79a:	d00a      	beq.n	7b2 <__aeabi_fmul+0x11e>
     79c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     7a0:	bf18      	it	ne
     7a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     7a6:	d1d8      	bne.n	75a <__aeabi_fmul+0xc6>
     7a8:	ea80 0001 	eor.w	r0, r0, r1
     7ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     7b0:	4770      	bx	lr
     7b2:	f090 0f00 	teq	r0, #0
     7b6:	bf17      	itett	ne
     7b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     7bc:	4608      	moveq	r0, r1
     7be:	f091 0f00 	teqne	r1, #0
     7c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     7c6:	d014      	beq.n	7f2 <__aeabi_fmul+0x15e>
     7c8:	ea92 0f0c 	teq	r2, ip
     7cc:	d101      	bne.n	7d2 <__aeabi_fmul+0x13e>
     7ce:	0242      	lsls	r2, r0, #9
     7d0:	d10f      	bne.n	7f2 <__aeabi_fmul+0x15e>
     7d2:	ea93 0f0c 	teq	r3, ip
     7d6:	d103      	bne.n	7e0 <__aeabi_fmul+0x14c>
     7d8:	024b      	lsls	r3, r1, #9
     7da:	bf18      	it	ne
     7dc:	4608      	movne	r0, r1
     7de:	d108      	bne.n	7f2 <__aeabi_fmul+0x15e>
     7e0:	ea80 0001 	eor.w	r0, r0, r1
     7e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     7e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     7ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     7f0:	4770      	bx	lr
     7f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     7f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     7fa:	4770      	bx	lr

000007fc <__aeabi_fdiv>:
     7fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     800:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     804:	bf1e      	ittt	ne
     806:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     80a:	ea92 0f0c 	teqne	r2, ip
     80e:	ea93 0f0c 	teqne	r3, ip
     812:	d069      	beq.n	8e8 <__z_interrupt_stack_SIZEOF+0xa8>
     814:	eba2 0203 	sub.w	r2, r2, r3
     818:	ea80 0c01 	eor.w	ip, r0, r1
     81c:	0249      	lsls	r1, r1, #9
     81e:	ea4f 2040 	mov.w	r0, r0, lsl #9
     822:	d037      	beq.n	894 <__z_interrupt_stack_SIZEOF+0x54>
     824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     828:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     82c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     830:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     834:	428b      	cmp	r3, r1
     836:	bf38      	it	cc
     838:	005b      	lslcc	r3, r3, #1
     83a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     83e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     842:	428b      	cmp	r3, r1
     844:	bf24      	itt	cs
     846:	1a5b      	subcs	r3, r3, r1
     848:	ea40 000c 	orrcs.w	r0, r0, ip
     84c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     850:	bf24      	itt	cs
     852:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     856:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     85a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     85e:	bf24      	itt	cs
     860:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     868:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     86c:	bf24      	itt	cs
     86e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     872:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     876:	011b      	lsls	r3, r3, #4
     878:	bf18      	it	ne
     87a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     87e:	d1e0      	bne.n	842 <__z_interrupt_stack_SIZEOF+0x2>
     880:	2afd      	cmp	r2, #253	; 0xfd
     882:	f63f af50 	bhi.w	726 <__aeabi_fmul+0x92>
     886:	428b      	cmp	r3, r1
     888:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     88c:	bf08      	it	eq
     88e:	f020 0001 	biceq.w	r0, r0, #1
     892:	4770      	bx	lr
     894:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     898:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     89c:	327f      	adds	r2, #127	; 0x7f
     89e:	bfc2      	ittt	gt
     8a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     8a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     8a8:	4770      	bxgt	lr
     8aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     8ae:	f04f 0300 	mov.w	r3, #0
     8b2:	3a01      	subs	r2, #1
     8b4:	e737      	b.n	726 <__aeabi_fmul+0x92>
     8b6:	f092 0f00 	teq	r2, #0
     8ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     8be:	bf02      	ittt	eq
     8c0:	0040      	lsleq	r0, r0, #1
     8c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     8c6:	3a01      	subeq	r2, #1
     8c8:	d0f9      	beq.n	8be <__z_interrupt_stack_SIZEOF+0x7e>
     8ca:	ea40 000c 	orr.w	r0, r0, ip
     8ce:	f093 0f00 	teq	r3, #0
     8d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8d6:	bf02      	ittt	eq
     8d8:	0049      	lsleq	r1, r1, #1
     8da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     8de:	3b01      	subeq	r3, #1
     8e0:	d0f9      	beq.n	8d6 <__z_interrupt_stack_SIZEOF+0x96>
     8e2:	ea41 010c 	orr.w	r1, r1, ip
     8e6:	e795      	b.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     8e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     8ec:	ea92 0f0c 	teq	r2, ip
     8f0:	d108      	bne.n	904 <__z_interrupt_stack_SIZEOF+0xc4>
     8f2:	0242      	lsls	r2, r0, #9
     8f4:	f47f af7d 	bne.w	7f2 <__aeabi_fmul+0x15e>
     8f8:	ea93 0f0c 	teq	r3, ip
     8fc:	f47f af70 	bne.w	7e0 <__aeabi_fmul+0x14c>
     900:	4608      	mov	r0, r1
     902:	e776      	b.n	7f2 <__aeabi_fmul+0x15e>
     904:	ea93 0f0c 	teq	r3, ip
     908:	d104      	bne.n	914 <__z_interrupt_stack_SIZEOF+0xd4>
     90a:	024b      	lsls	r3, r1, #9
     90c:	f43f af4c 	beq.w	7a8 <__aeabi_fmul+0x114>
     910:	4608      	mov	r0, r1
     912:	e76e      	b.n	7f2 <__aeabi_fmul+0x15e>
     914:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     918:	bf18      	it	ne
     91a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     91e:	d1ca      	bne.n	8b6 <__z_interrupt_stack_SIZEOF+0x76>
     920:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     924:	f47f af5c 	bne.w	7e0 <__aeabi_fmul+0x14c>
     928:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     92c:	f47f af3c 	bne.w	7a8 <__aeabi_fmul+0x114>
     930:	e75f      	b.n	7f2 <__aeabi_fmul+0x15e>
     932:	bf00      	nop

00000934 <__aeabi_uldivmod>:
     934:	b953      	cbnz	r3, 94c <__aeabi_uldivmod+0x18>
     936:	b94a      	cbnz	r2, 94c <__aeabi_uldivmod+0x18>
     938:	2900      	cmp	r1, #0
     93a:	bf08      	it	eq
     93c:	2800      	cmpeq	r0, #0
     93e:	bf1c      	itt	ne
     940:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     944:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     948:	f000 b80c 	b.w	964 <__aeabi_idiv0>
     94c:	f1ad 0c08 	sub.w	ip, sp, #8
     950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     954:	f000 f808 	bl	968 <__udivmoddi4>
     958:	f8dd e004 	ldr.w	lr, [sp, #4]
     95c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     960:	b004      	add	sp, #16
     962:	4770      	bx	lr

00000964 <__aeabi_idiv0>:
     964:	4770      	bx	lr
     966:	bf00      	nop

00000968 <__udivmoddi4>:
     968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     96c:	4686      	mov	lr, r0
     96e:	468c      	mov	ip, r1
     970:	4608      	mov	r0, r1
     972:	9e08      	ldr	r6, [sp, #32]
     974:	4615      	mov	r5, r2
     976:	4674      	mov	r4, lr
     978:	4619      	mov	r1, r3
     97a:	2b00      	cmp	r3, #0
     97c:	f040 80c2 	bne.w	b04 <__udivmoddi4+0x19c>
     980:	4285      	cmp	r5, r0
     982:	fab2 f282 	clz	r2, r2
     986:	d945      	bls.n	a14 <__udivmoddi4+0xac>
     988:	b14a      	cbz	r2, 99e <__udivmoddi4+0x36>
     98a:	f1c2 0320 	rsb	r3, r2, #32
     98e:	fa00 fc02 	lsl.w	ip, r0, r2
     992:	fa2e f303 	lsr.w	r3, lr, r3
     996:	4095      	lsls	r5, r2
     998:	ea43 0c0c 	orr.w	ip, r3, ip
     99c:	4094      	lsls	r4, r2
     99e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     9a2:	b2a8      	uxth	r0, r5
     9a4:	fbbc f8fe 	udiv	r8, ip, lr
     9a8:	0c23      	lsrs	r3, r4, #16
     9aa:	fb0e cc18 	mls	ip, lr, r8, ip
     9ae:	fb08 f900 	mul.w	r9, r8, r0
     9b2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     9b6:	4599      	cmp	r9, r3
     9b8:	d928      	bls.n	a0c <__udivmoddi4+0xa4>
     9ba:	18eb      	adds	r3, r5, r3
     9bc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     9c0:	d204      	bcs.n	9cc <__udivmoddi4+0x64>
     9c2:	4599      	cmp	r9, r3
     9c4:	d902      	bls.n	9cc <__udivmoddi4+0x64>
     9c6:	f1a8 0702 	sub.w	r7, r8, #2
     9ca:	442b      	add	r3, r5
     9cc:	eba3 0309 	sub.w	r3, r3, r9
     9d0:	b2a4      	uxth	r4, r4
     9d2:	fbb3 fcfe 	udiv	ip, r3, lr
     9d6:	fb0e 331c 	mls	r3, lr, ip, r3
     9da:	fb0c f000 	mul.w	r0, ip, r0
     9de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9e2:	42a0      	cmp	r0, r4
     9e4:	d914      	bls.n	a10 <__udivmoddi4+0xa8>
     9e6:	192c      	adds	r4, r5, r4
     9e8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     9ec:	d204      	bcs.n	9f8 <__udivmoddi4+0x90>
     9ee:	42a0      	cmp	r0, r4
     9f0:	d902      	bls.n	9f8 <__udivmoddi4+0x90>
     9f2:	f1ac 0302 	sub.w	r3, ip, #2
     9f6:	442c      	add	r4, r5
     9f8:	1a24      	subs	r4, r4, r0
     9fa:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     9fe:	b11e      	cbz	r6, a08 <__udivmoddi4+0xa0>
     a00:	40d4      	lsrs	r4, r2
     a02:	2300      	movs	r3, #0
     a04:	6034      	str	r4, [r6, #0]
     a06:	6073      	str	r3, [r6, #4]
     a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a0c:	4647      	mov	r7, r8
     a0e:	e7dd      	b.n	9cc <__udivmoddi4+0x64>
     a10:	4663      	mov	r3, ip
     a12:	e7f1      	b.n	9f8 <__udivmoddi4+0x90>
     a14:	bb92      	cbnz	r2, a7c <__udivmoddi4+0x114>
     a16:	1b43      	subs	r3, r0, r5
     a18:	2101      	movs	r1, #1
     a1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a1e:	b2af      	uxth	r7, r5
     a20:	fbb3 fcfe 	udiv	ip, r3, lr
     a24:	0c20      	lsrs	r0, r4, #16
     a26:	fb0e 331c 	mls	r3, lr, ip, r3
     a2a:	fb0c f807 	mul.w	r8, ip, r7
     a2e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     a32:	4598      	cmp	r8, r3
     a34:	d962      	bls.n	afc <__udivmoddi4+0x194>
     a36:	18eb      	adds	r3, r5, r3
     a38:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     a3c:	d204      	bcs.n	a48 <__udivmoddi4+0xe0>
     a3e:	4598      	cmp	r8, r3
     a40:	d902      	bls.n	a48 <__udivmoddi4+0xe0>
     a42:	f1ac 0002 	sub.w	r0, ip, #2
     a46:	442b      	add	r3, r5
     a48:	eba3 0308 	sub.w	r3, r3, r8
     a4c:	b2a4      	uxth	r4, r4
     a4e:	fbb3 fcfe 	udiv	ip, r3, lr
     a52:	fb0e 331c 	mls	r3, lr, ip, r3
     a56:	fb0c f707 	mul.w	r7, ip, r7
     a5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a5e:	42a7      	cmp	r7, r4
     a60:	d94e      	bls.n	b00 <__udivmoddi4+0x198>
     a62:	192c      	adds	r4, r5, r4
     a64:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     a68:	d204      	bcs.n	a74 <__udivmoddi4+0x10c>
     a6a:	42a7      	cmp	r7, r4
     a6c:	d902      	bls.n	a74 <__udivmoddi4+0x10c>
     a6e:	f1ac 0302 	sub.w	r3, ip, #2
     a72:	442c      	add	r4, r5
     a74:	1be4      	subs	r4, r4, r7
     a76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     a7a:	e7c0      	b.n	9fe <__udivmoddi4+0x96>
     a7c:	f1c2 0320 	rsb	r3, r2, #32
     a80:	fa20 f103 	lsr.w	r1, r0, r3
     a84:	4095      	lsls	r5, r2
     a86:	4090      	lsls	r0, r2
     a88:	fa2e f303 	lsr.w	r3, lr, r3
     a8c:	4303      	orrs	r3, r0
     a8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a92:	b2af      	uxth	r7, r5
     a94:	fbb1 fcfe 	udiv	ip, r1, lr
     a98:	fb0e 101c 	mls	r0, lr, ip, r1
     a9c:	0c19      	lsrs	r1, r3, #16
     a9e:	fb0c f807 	mul.w	r8, ip, r7
     aa2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     aa6:	4588      	cmp	r8, r1
     aa8:	fa04 f402 	lsl.w	r4, r4, r2
     aac:	d922      	bls.n	af4 <__udivmoddi4+0x18c>
     aae:	1869      	adds	r1, r5, r1
     ab0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     ab4:	d204      	bcs.n	ac0 <__udivmoddi4+0x158>
     ab6:	4588      	cmp	r8, r1
     ab8:	d902      	bls.n	ac0 <__udivmoddi4+0x158>
     aba:	f1ac 0002 	sub.w	r0, ip, #2
     abe:	4429      	add	r1, r5
     ac0:	eba1 0108 	sub.w	r1, r1, r8
     ac4:	b29b      	uxth	r3, r3
     ac6:	fbb1 fcfe 	udiv	ip, r1, lr
     aca:	fb0e 111c 	mls	r1, lr, ip, r1
     ace:	fb0c f707 	mul.w	r7, ip, r7
     ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     ad6:	429f      	cmp	r7, r3
     ad8:	d90e      	bls.n	af8 <__udivmoddi4+0x190>
     ada:	18eb      	adds	r3, r5, r3
     adc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     ae0:	d204      	bcs.n	aec <__udivmoddi4+0x184>
     ae2:	429f      	cmp	r7, r3
     ae4:	d902      	bls.n	aec <__udivmoddi4+0x184>
     ae6:	f1ac 0102 	sub.w	r1, ip, #2
     aea:	442b      	add	r3, r5
     aec:	1bdb      	subs	r3, r3, r7
     aee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     af2:	e792      	b.n	a1a <__udivmoddi4+0xb2>
     af4:	4660      	mov	r0, ip
     af6:	e7e3      	b.n	ac0 <__udivmoddi4+0x158>
     af8:	4661      	mov	r1, ip
     afa:	e7f7      	b.n	aec <__udivmoddi4+0x184>
     afc:	4660      	mov	r0, ip
     afe:	e7a3      	b.n	a48 <__udivmoddi4+0xe0>
     b00:	4663      	mov	r3, ip
     b02:	e7b7      	b.n	a74 <__udivmoddi4+0x10c>
     b04:	4283      	cmp	r3, r0
     b06:	d906      	bls.n	b16 <__udivmoddi4+0x1ae>
     b08:	b916      	cbnz	r6, b10 <__udivmoddi4+0x1a8>
     b0a:	2100      	movs	r1, #0
     b0c:	4608      	mov	r0, r1
     b0e:	e77b      	b.n	a08 <__udivmoddi4+0xa0>
     b10:	e9c6 e000 	strd	lr, r0, [r6]
     b14:	e7f9      	b.n	b0a <__udivmoddi4+0x1a2>
     b16:	fab3 f783 	clz	r7, r3
     b1a:	b98f      	cbnz	r7, b40 <__udivmoddi4+0x1d8>
     b1c:	4283      	cmp	r3, r0
     b1e:	d301      	bcc.n	b24 <__udivmoddi4+0x1bc>
     b20:	4572      	cmp	r2, lr
     b22:	d808      	bhi.n	b36 <__udivmoddi4+0x1ce>
     b24:	ebbe 0402 	subs.w	r4, lr, r2
     b28:	eb60 0303 	sbc.w	r3, r0, r3
     b2c:	2001      	movs	r0, #1
     b2e:	469c      	mov	ip, r3
     b30:	b91e      	cbnz	r6, b3a <__udivmoddi4+0x1d2>
     b32:	2100      	movs	r1, #0
     b34:	e768      	b.n	a08 <__udivmoddi4+0xa0>
     b36:	4638      	mov	r0, r7
     b38:	e7fa      	b.n	b30 <__udivmoddi4+0x1c8>
     b3a:	e9c6 4c00 	strd	r4, ip, [r6]
     b3e:	e7f8      	b.n	b32 <__udivmoddi4+0x1ca>
     b40:	f1c7 0c20 	rsb	ip, r7, #32
     b44:	40bb      	lsls	r3, r7
     b46:	fa22 f40c 	lsr.w	r4, r2, ip
     b4a:	431c      	orrs	r4, r3
     b4c:	fa2e f10c 	lsr.w	r1, lr, ip
     b50:	fa20 f30c 	lsr.w	r3, r0, ip
     b54:	40b8      	lsls	r0, r7
     b56:	4301      	orrs	r1, r0
     b58:	ea4f 4914 	mov.w	r9, r4, lsr #16
     b5c:	fa0e f507 	lsl.w	r5, lr, r7
     b60:	fbb3 f8f9 	udiv	r8, r3, r9
     b64:	fa1f fe84 	uxth.w	lr, r4
     b68:	fb09 3018 	mls	r0, r9, r8, r3
     b6c:	0c0b      	lsrs	r3, r1, #16
     b6e:	fb08 fa0e 	mul.w	sl, r8, lr
     b72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b76:	459a      	cmp	sl, r3
     b78:	fa02 f207 	lsl.w	r2, r2, r7
     b7c:	d940      	bls.n	c00 <__udivmoddi4+0x298>
     b7e:	18e3      	adds	r3, r4, r3
     b80:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     b84:	d204      	bcs.n	b90 <__udivmoddi4+0x228>
     b86:	459a      	cmp	sl, r3
     b88:	d902      	bls.n	b90 <__udivmoddi4+0x228>
     b8a:	f1a8 0002 	sub.w	r0, r8, #2
     b8e:	4423      	add	r3, r4
     b90:	eba3 030a 	sub.w	r3, r3, sl
     b94:	b289      	uxth	r1, r1
     b96:	fbb3 f8f9 	udiv	r8, r3, r9
     b9a:	fb09 3318 	mls	r3, r9, r8, r3
     b9e:	fb08 fe0e 	mul.w	lr, r8, lr
     ba2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     ba6:	458e      	cmp	lr, r1
     ba8:	d92c      	bls.n	c04 <__udivmoddi4+0x29c>
     baa:	1861      	adds	r1, r4, r1
     bac:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     bb0:	d204      	bcs.n	bbc <__udivmoddi4+0x254>
     bb2:	458e      	cmp	lr, r1
     bb4:	d902      	bls.n	bbc <__udivmoddi4+0x254>
     bb6:	f1a8 0302 	sub.w	r3, r8, #2
     bba:	4421      	add	r1, r4
     bbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     bc0:	fba0 9802 	umull	r9, r8, r0, r2
     bc4:	eba1 010e 	sub.w	r1, r1, lr
     bc8:	4541      	cmp	r1, r8
     bca:	46ce      	mov	lr, r9
     bcc:	4643      	mov	r3, r8
     bce:	d302      	bcc.n	bd6 <__udivmoddi4+0x26e>
     bd0:	d106      	bne.n	be0 <__udivmoddi4+0x278>
     bd2:	454d      	cmp	r5, r9
     bd4:	d204      	bcs.n	be0 <__udivmoddi4+0x278>
     bd6:	ebb9 0e02 	subs.w	lr, r9, r2
     bda:	eb68 0304 	sbc.w	r3, r8, r4
     bde:	3801      	subs	r0, #1
     be0:	2e00      	cmp	r6, #0
     be2:	d0a6      	beq.n	b32 <__udivmoddi4+0x1ca>
     be4:	ebb5 020e 	subs.w	r2, r5, lr
     be8:	eb61 0103 	sbc.w	r1, r1, r3
     bec:	fa01 fc0c 	lsl.w	ip, r1, ip
     bf0:	fa22 f307 	lsr.w	r3, r2, r7
     bf4:	ea4c 0303 	orr.w	r3, ip, r3
     bf8:	40f9      	lsrs	r1, r7
     bfa:	e9c6 3100 	strd	r3, r1, [r6]
     bfe:	e798      	b.n	b32 <__udivmoddi4+0x1ca>
     c00:	4640      	mov	r0, r8
     c02:	e7c5      	b.n	b90 <__udivmoddi4+0x228>
     c04:	4643      	mov	r3, r8
     c06:	e7d9      	b.n	bbc <__udivmoddi4+0x254>

00000c08 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
     c08:	b530      	push	{r4, r5, lr}
     c0a:	b089      	sub	sp, #36	; 0x24

	//uint8_t reading[1]= {0};
    uint8_t sensor_regs[1];
	
	sensor_regs[0] = reg;
	ret = i2c_write_read_dt(&dev_i2c,&sensor_regs[0],1,bufp,len);
     c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	sensor_regs[0] = reg;
     c10:	f88d 1004 	strb.w	r1, [sp, #4]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
     c14:	a901      	add	r1, sp, #4
     c16:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
     c18:	2400      	movs	r4, #0
	msg[0].len = num_write;
     c1a:	2101      	movs	r1, #1

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     c1c:	2307      	movs	r3, #7
	msg[0].len = num_write;
     c1e:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
     c20:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     c24:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     c28:	4804      	ldr	r0, [pc, #16]	; (c3c <platform_read+0x34>)
     c2a:	6883      	ldr	r3, [r0, #8]
     c2c:	2202      	movs	r2, #2
     c2e:	689d      	ldr	r5, [r3, #8]
     c30:	a902      	add	r1, sp, #8
     c32:	236b      	movs	r3, #107	; 0x6b
     c34:	47a8      	blx	r5

	return 0;
}
     c36:	4620      	mov	r0, r4
     c38:	b009      	add	sp, #36	; 0x24
     c3a:	bd30      	pop	{r4, r5, pc}
     c3c:	000070d0 	.word	0x000070d0

00000c40 <platform_write>:
{
     c40:	b510      	push	{r4, lr}
     c42:	b088      	sub	sp, #32
	buffer[0] = reg;
     c44:	f88d 1010 	strb.w	r1, [sp, #16]
	aux = 1;
     c48:	2101      	movs	r1, #1
     c4a:	1e48      	subs	r0, r1, #1
     c4c:	b2c0      	uxtb	r0, r0
	for (i = 0; i < len; i++) {
     c4e:	4298      	cmp	r0, r3
     c50:	d30f      	bcc.n	c72 <platform_write+0x32>
	msg.buf = (uint8_t *)buf;
     c52:	ab04      	add	r3, sp, #16
	ret = i2c_write_dt(&dev_i2c, buffer, aux);
     c54:	e9cd 3101 	strd	r3, r1, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     c58:	2302      	movs	r3, #2
     c5a:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     c5e:	4809      	ldr	r0, [pc, #36]	; (c84 <platform_write+0x44>)
     c60:	6883      	ldr	r3, [r0, #8]
     c62:	2201      	movs	r2, #1
     c64:	689c      	ldr	r4, [r3, #8]
     c66:	a901      	add	r1, sp, #4
     c68:	236b      	movs	r3, #107	; 0x6b
     c6a:	47a0      	blx	r4
}
     c6c:	2000      	movs	r0, #0
     c6e:	b008      	add	sp, #32
     c70:	bd10      	pop	{r4, pc}
		buffer[aux] = bufp[i];
     c72:	f101 0420 	add.w	r4, r1, #32
     c76:	446c      	add	r4, sp
     c78:	5c10      	ldrb	r0, [r2, r0]
     c7a:	f804 0c10 	strb.w	r0, [r4, #-16]
		aux++;
     c7e:	3101      	adds	r1, #1
     c80:	b2c9      	uxtb	r1, r1
	for (i = 0; i < len; i++) {
     c82:	e7e2      	b.n	c4a <platform_write+0xa>
     c84:	000070d0 	.word	0x000070d0

00000c88 <main>:
{
     c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printk("I2C Accel Tests\n");
     c8c:	484a      	ldr	r0, [pc, #296]	; (db8 <main+0x130>)
{
     c8e:	b08b      	sub	sp, #44	; 0x2c
	printk("I2C Accel Tests\n");
     c90:	f005 fb4c 	bl	632c <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     c94:	4c49      	ldr	r4, [pc, #292]	; (dbc <main+0x134>)
     c96:	4620      	mov	r0, r4
     c98:	f006 f82a 	bl	6cf0 <z_device_is_ready>
	if (!device_is_ready(dev_i2c.bus)) {
     c9c:	b918      	cbnz	r0, ca6 <main+0x1e>
		printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);		
     c9e:	6821      	ldr	r1, [r4, #0]
     ca0:	4847      	ldr	r0, [pc, #284]	; (dc0 <main+0x138>)
     ca2:	f005 fb43 	bl	632c <printk>
	dev_ctx.write_reg = platform_write;
     ca6:	4b47      	ldr	r3, [pc, #284]	; (dc4 <main+0x13c>)
     ca8:	9306      	str	r3, [sp, #24]
	dev_ctx.read_reg = platform_read;
     caa:	4b47      	ldr	r3, [pc, #284]	; (dc8 <main+0x140>)
     cac:	9307      	str	r3, [sp, #28]
	ism330dhcx_device_id_get(&dev_ctx, &whoamI);
     cae:	4c47      	ldr	r4, [pc, #284]	; (dcc <main+0x144>)
        ism330dhcx_reset_get(&dev_ctx, &rst);
     cb0:	4d47      	ldr	r5, [pc, #284]	; (dd0 <main+0x148>)
        printk("ISM resetting dev %x\n", rst);
     cb2:	4e48      	ldr	r6, [pc, #288]	; (dd4 <main+0x14c>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     cb4:	2100      	movs	r1, #0
     cb6:	f240 6067 	movw	r0, #1639	; 0x667
     cba:	f004 fc79 	bl	55b0 <z_impl_k_sleep>
	ism330dhcx_device_id_get(&dev_ctx, &whoamI);
     cbe:	4621      	mov	r1, r4
     cc0:	a806      	add	r0, sp, #24
     cc2:	f005 f8ec 	bl	5e9e <ism330dhcx_device_id_get>
	printk("ISM whoiam %x\n", whoamI);
     cc6:	7821      	ldrb	r1, [r4, #0]
     cc8:	4843      	ldr	r0, [pc, #268]	; (dd8 <main+0x150>)
     cca:	f005 fb2f 	bl	632c <printk>
    ism330dhcx_reset_set(&dev_ctx, PROPERTY_ENABLE);
     cce:	2101      	movs	r1, #1
     cd0:	a806      	add	r0, sp, #24
     cd2:	f005 f8eb 	bl	5eac <ism330dhcx_reset_set>
        ism330dhcx_reset_get(&dev_ctx, &rst);
     cd6:	493e      	ldr	r1, [pc, #248]	; (dd0 <main+0x148>)
     cd8:	a806      	add	r0, sp, #24
     cda:	f005 f8fe 	bl	5eda <ism330dhcx_reset_get>
        printk("ISM resetting dev %x\n", rst);
     cde:	7829      	ldrb	r1, [r5, #0]
     ce0:	4630      	mov	r0, r6
     ce2:	f005 fb23 	bl	632c <printk>
    } while (rst);
     ce6:	782c      	ldrb	r4, [r5, #0]
     ce8:	2c00      	cmp	r4, #0
     cea:	d1f4      	bne.n	cd6 <main+0x4e>
      ism330dhcx_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
     cec:	2101      	movs	r1, #1
     cee:	a806      	add	r0, sp, #24
     cf0:	f005 f8a7 	bl	5e42 <ism330dhcx_device_conf_set>
      ism330dhcx_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
     cf4:	2101      	movs	r1, #1
     cf6:	a806      	add	r0, sp, #24
     cf8:	f005 f860 	bl	5dbc <ism330dhcx_block_data_update_set>
      ism330dhcx_xl_data_rate_set(&dev_ctx, ISM330DHCX_XL_ODR_104Hz);
     cfc:	2104      	movs	r1, #4
     cfe:	a806      	add	r0, sp, #24
     d00:	f005 f9d4 	bl	60ac <ism330dhcx_xl_data_rate_set>
      ism330dhcx_gy_data_rate_set(&dev_ctx, ISM330DHCX_GY_ODR_104Hz);
     d04:	2104      	movs	r1, #4
     d06:	a806      	add	r0, sp, #24
     d08:	f005 fa6f 	bl	61ea <ism330dhcx_gy_data_rate_set>
      ism330dhcx_xl_full_scale_set(&dev_ctx, ISM330DHCX_2g);
     d0c:	4621      	mov	r1, r4
     d0e:	a806      	add	r0, sp, #24
     d10:	f005 f826 	bl	5d60 <ism330dhcx_xl_full_scale_set>
      ism330dhcx_gy_full_scale_set(&dev_ctx, ISM330DHCX_2000dps);
     d14:	210c      	movs	r1, #12
     d16:	a806      	add	r0, sp, #24
     d18:	f005 f839 	bl	5d8e <ism330dhcx_gy_full_scale_set>
      ism330dhcx_xl_hp_path_on_out_set(&dev_ctx, ISM330DHCX_LP_ODR_DIV_100);
     d1c:	2104      	movs	r1, #4
     d1e:	a806      	add	r0, sp, #24
     d20:	f005 f92e 	bl	5f80 <ism330dhcx_xl_hp_path_on_out_set>
      ism330dhcx_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
     d24:	2101      	movs	r1, #1
     d26:	a806      	add	r0, sp, #24
     d28:	f005 f8e5 	bl	5ef6 <ism330dhcx_xl_filter_lp2_set>
      ism330dhcx_gy_lp1_bandwidth_set(&dev_ctx, ISM330DHCX_MEDIUM);
     d2c:	2103      	movs	r1, #3
     d2e:	a806      	add	r0, sp, #24
     d30:	f005 f90f 	bl	5f52 <ism330dhcx_gy_lp1_bandwidth_set>
      ism330dhcx_gy_filter_lp1_set(&dev_ctx, PROPERTY_ENABLE);
     d34:	2101      	movs	r1, #1
     d36:	a806      	add	r0, sp, #24
     d38:	f005 f8f4 	bl	5f24 <ism330dhcx_gy_filter_lp1_set>
		 	 	 		 	 		 memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
     d3c:	4e27      	ldr	r6, [pc, #156]	; (ddc <main+0x154>)
		 	 	 		 	 		 acceleration_mg[0] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[0]);
     d3e:	4c28      	ldr	r4, [pc, #160]	; (de0 <main+0x158>)
		 	 	 		 	 		 printf("Accel [mg]:%4.2f\t%4.2f\t%4.2f\r\n", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
     d40:	4f28      	ldr	r7, [pc, #160]	; (de4 <main+0x15c>)
		 	 	 		 	 	 ism330dhcx_xl_flag_data_ready_get(&dev_ctx, &reg);
     d42:	f10d 0117 	add.w	r1, sp, #23
     d46:	a806      	add	r0, sp, #24
     d48:	f005 f84f 	bl	5dea <ism330dhcx_xl_flag_data_ready_get>
		 	 	 		 	 	 if (reg) {
     d4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d50:	b363      	cbz	r3, dac <main+0x124>
		 	 	 		 	 		 memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
     d52:	2206      	movs	r2, #6
     d54:	2100      	movs	r1, #0
     d56:	4821      	ldr	r0, [pc, #132]	; (ddc <main+0x154>)
     d58:	f005 fc9f 	bl	669a <memset>
		 	 	 		 	 		 ism330dhcx_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
     d5c:	491f      	ldr	r1, [pc, #124]	; (ddc <main+0x154>)
     d5e:	a806      	add	r0, sp, #24
     d60:	f005 f851 	bl	5e06 <ism330dhcx_acceleration_raw_get>
		 	 	 		 	 		 acceleration_mg[0] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[0]);
     d64:	f9b6 0000 	ldrsh.w	r0, [r6]
     d68:	f000 f83e 	bl	de8 <ism330dhcx_from_fs2g_to_mg>
     d6c:	6020      	str	r0, [r4, #0]
		 	 	 		 	 		 acceleration_mg[1] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[1]);
     d6e:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
     d72:	f000 f839 	bl	de8 <ism330dhcx_from_fs2g_to_mg>
     d76:	6060      	str	r0, [r4, #4]
		 	 	 		 	 		 acceleration_mg[2] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[2]);
     d78:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
     d7c:	f000 f834 	bl	de8 <ism330dhcx_from_fs2g_to_mg>
     d80:	4605      	mov	r5, r0
     d82:	60a0      	str	r0, [r4, #8]
		 	 	 		 	 		 printf("Accel [mg]:%4.2f\t%4.2f\t%4.2f\r\n", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
     d84:	6820      	ldr	r0, [r4, #0]
     d86:	f7ff fb1f 	bl	3c8 <__aeabi_f2d>
     d8a:	4680      	mov	r8, r0
     d8c:	4628      	mov	r0, r5
     d8e:	4689      	mov	r9, r1
     d90:	f7ff fb1a 	bl	3c8 <__aeabi_f2d>
     d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
     d98:	6860      	ldr	r0, [r4, #4]
     d9a:	f7ff fb15 	bl	3c8 <__aeabi_f2d>
     d9e:	4642      	mov	r2, r8
     da0:	e9cd 0100 	strd	r0, r1, [sp]
     da4:	464b      	mov	r3, r9
     da6:	4638      	mov	r0, r7
     da8:	f001 fda4 	bl	28f4 <printf>
     dac:	2100      	movs	r1, #0
     dae:	f240 6067 	movw	r0, #1639	; 0x667
     db2:	f004 fbfd 	bl	55b0 <z_impl_k_sleep>
	while(1) {
     db6:	e7c4      	b.n	d42 <main+0xba>
     db8:	00007544 	.word	0x00007544
     dbc:	000070d0 	.word	0x000070d0
     dc0:	00007555 	.word	0x00007555
     dc4:	00000c41 	.word	0x00000c41
     dc8:	00000c09 	.word	0x00000c09
     dcc:	20000be7 	.word	0x20000be7
     dd0:	20000be6 	.word	0x20000be6
     dd4:	0000757f 	.word	0x0000757f
     dd8:	00007570 	.word	0x00007570
     ddc:	20000be0 	.word	0x20000be0
     de0:	20000300 	.word	0x20000300
     de4:	00007595 	.word	0x00007595

00000de8 <ism330dhcx_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dhcx_from_fs2g_to_mg(int16_t lsb)
{
     de8:	b508      	push	{r3, lr}
  return ((float_t)lsb * 0.061f);
     dea:	f7ff fbff 	bl	5ec <__aeabi_i2f>
     dee:	4902      	ldr	r1, [pc, #8]	; (df8 <ism330dhcx_from_fs2g_to_mg+0x10>)
     df0:	f7ff fc50 	bl	694 <__aeabi_fmul>
}
     df4:	bd08      	pop	{r3, pc}
     df6:	bf00      	nop
     df8:	3d79db23 	.word	0x3d79db23

00000dfc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     dfc:	4b01      	ldr	r3, [pc, #4]	; (e04 <char_out+0x8>)
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	4718      	bx	r3
     e02:	bf00      	nop
     e04:	20000000 	.word	0x20000000

00000e08 <__printk_hook_install>:
	_char_out = fn;
     e08:	4b01      	ldr	r3, [pc, #4]	; (e10 <__printk_hook_install+0x8>)
     e0a:	6018      	str	r0, [r3, #0]
}
     e0c:	4770      	bx	lr
     e0e:	bf00      	nop
     e10:	20000000 	.word	0x20000000

00000e14 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     e14:	b507      	push	{r0, r1, r2, lr}
     e16:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     e18:	2100      	movs	r1, #0
     e1a:	4602      	mov	r2, r0
     e1c:	9100      	str	r1, [sp, #0]
     e1e:	4803      	ldr	r0, [pc, #12]	; (e2c <vprintk+0x18>)
     e20:	f000 f914 	bl	104c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     e24:	b003      	add	sp, #12
     e26:	f85d fb04 	ldr.w	pc, [sp], #4
     e2a:	bf00      	nop
     e2c:	00000dfd 	.word	0x00000dfd

00000e30 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     e34:	8b05      	ldrh	r5, [r0, #24]
{
     e36:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     e38:	0728      	lsls	r0, r5, #28
{
     e3a:	4690      	mov	r8, r2
	if (processing) {
     e3c:	d411      	bmi.n	e62 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     e3e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     e40:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     e44:	f040 80cd 	bne.w	fe2 <process_event+0x1b2>
			evt = process_recheck(mgr);
     e48:	4620      	mov	r0, r4
     e4a:	f005 fa86 	bl	635a <process_recheck>
		}

		if (evt == EVT_NOP) {
     e4e:	b178      	cbz	r0, e70 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     e50:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e52:	8b21      	ldrh	r1, [r4, #24]
     e54:	2804      	cmp	r0, #4
     e56:	d811      	bhi.n	e7c <process_event+0x4c>
     e58:	e8df f000 	tbb	[pc, r0]
     e5c:	856d10c3 	.word	0x856d10c3
     e60:	95          	.byte	0x95
     e61:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     e62:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     e64:	bf0c      	ite	eq
     e66:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e6a:	f045 0520 	orrne.w	r5, r5, #32
     e6e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     e70:	f388 8811 	msr	BASEPRI, r8
     e74:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e7c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     e80:	45aa      	cmp	sl, r5
     e82:	f000 80a6 	beq.w	fd2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     e86:	2700      	movs	r7, #0
     e88:	46b9      	mov	r9, r7
     e8a:	463e      	mov	r6, r7
     e8c:	68a3      	ldr	r3, [r4, #8]
     e8e:	2b00      	cmp	r3, #0
     e90:	f000 80bd 	beq.w	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e94:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e98:	8321      	strh	r1, [r4, #24]
     e9a:	f388 8811 	msr	BASEPRI, r8
     e9e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     ea2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ea4:	2900      	cmp	r1, #0
     ea6:	f000 80bb 	beq.w	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
	return node->next;
     eaa:	680d      	ldr	r5, [r1, #0]
     eac:	2900      	cmp	r1, #0
     eae:	f000 80b7 	beq.w	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
		mon->callback(mgr, mon, state, res);
     eb2:	f8d1 8004 	ldr.w	r8, [r1, #4]
     eb6:	4633      	mov	r3, r6
     eb8:	4652      	mov	r2, sl
     eba:	4620      	mov	r0, r4
     ebc:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ebe:	2d00      	cmp	r5, #0
     ec0:	d076      	beq.n	fb0 <process_event+0x180>
     ec2:	682b      	ldr	r3, [r5, #0]
     ec4:	4629      	mov	r1, r5
     ec6:	461d      	mov	r5, r3
     ec8:	e7f0      	b.n	eac <process_event+0x7c>
     eca:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     ece:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     ed0:	2a01      	cmp	r2, #1
     ed2:	d81b      	bhi.n	f0c <process_event+0xdc>
	list->head = NULL;
     ed4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ed6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     eda:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     edc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ede:	b289      	uxth	r1, r1
	list->tail = NULL;
     ee0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     ee4:	d109      	bne.n	efa <process_event+0xca>
     ee6:	463b      	mov	r3, r7
     ee8:	e003      	b.n	ef2 <process_event+0xc2>
				mgr->refs += 1U;
     eea:	8b62      	ldrh	r2, [r4, #26]
     eec:	3201      	adds	r2, #1
     eee:	8362      	strh	r2, [r4, #26]
	return node->next;
     ef0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ef2:	2b00      	cmp	r3, #0
     ef4:	d1f9      	bne.n	eea <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ef6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     efa:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     efc:	4620      	mov	r0, r4
     efe:	f005 fa2c 	bl	635a <process_recheck>
     f02:	2800      	cmp	r0, #0
     f04:	d07b      	beq.n	ffe <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f06:	f041 0120 	orr.w	r1, r1, #32
     f0a:	e077      	b.n	ffc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     f0c:	2b04      	cmp	r3, #4
     f0e:	d10a      	bne.n	f26 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f10:	f021 0107 	bic.w	r1, r1, #7
     f14:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     f18:	4620      	mov	r0, r4
     f1a:	f005 fa1e 	bl	635a <process_recheck>
     f1e:	b110      	cbz	r0, f26 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f20:	f041 0120 	orr.w	r1, r1, #32
     f24:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f26:	8b21      	ldrh	r1, [r4, #24]
     f28:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f2c:	45aa      	cmp	sl, r5
     f2e:	d050      	beq.n	fd2 <process_event+0x1a2>
     f30:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     f32:	46b9      	mov	r9, r7
     f34:	e7aa      	b.n	e8c <process_event+0x5c>
			transit = mgr->transitions->start;
     f36:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f38:	f021 0107 	bic.w	r1, r1, #7
     f3c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     f40:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     f42:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     f46:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     f48:	d12d      	bne.n	fa6 <process_event+0x176>
		    || (transit != NULL)) {
     f4a:	f1b9 0f00 	cmp.w	r9, #0
     f4e:	d040      	beq.n	fd2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     f50:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     f54:	8321      	strh	r1, [r4, #24]
     f56:	f388 8811 	msr	BASEPRI, r8
     f5a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     f5e:	493a      	ldr	r1, [pc, #232]	; (1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>)
     f60:	4620      	mov	r0, r4
     f62:	47c8      	blx	r9
     f64:	e029      	b.n	fba <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f66:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     f6a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f6c:	f041 0104 	orr.w	r1, r1, #4
     f70:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     f72:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     f74:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     f78:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     f7a:	d0e6      	beq.n	f4a <process_event+0x11a>
     f7c:	2700      	movs	r7, #0
		res = 0;
     f7e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f80:	f04f 0a04 	mov.w	sl, #4
     f84:	e782      	b.n	e8c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f86:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     f8a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f8c:	f041 0105 	orr.w	r1, r1, #5
     f90:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     f92:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     f94:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     f98:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     f9a:	d0d6      	beq.n	f4a <process_event+0x11a>
     f9c:	2700      	movs	r7, #0
		res = 0;
     f9e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     fa0:	f04f 0a05 	mov.w	sl, #5
     fa4:	e772      	b.n	e8c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     fa6:	2700      	movs	r7, #0
		res = 0;
     fa8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     faa:	f04f 0a06 	mov.w	sl, #6
     fae:	e76d      	b.n	e8c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     fb0:	462b      	mov	r3, r5
     fb2:	e787      	b.n	ec4 <process_event+0x94>
			if (transit != NULL) {
     fb4:	f1b9 0f00 	cmp.w	r9, #0
     fb8:	d1d1      	bne.n	f5e <process_event+0x12e>
	__asm__ volatile(
     fba:	f04f 0320 	mov.w	r3, #32
     fbe:	f3ef 8811 	mrs	r8, BASEPRI
     fc2:	f383 8812 	msr	BASEPRI_MAX, r3
     fc6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     fca:	8b23      	ldrh	r3, [r4, #24]
     fcc:	f023 0308 	bic.w	r3, r3, #8
     fd0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     fd2:	8b25      	ldrh	r5, [r4, #24]
     fd4:	06ea      	lsls	r2, r5, #27
     fd6:	d52e      	bpl.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     fd8:	f025 0310 	bic.w	r3, r5, #16
     fdc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     fde:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     fe2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fe4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     fe6:	2e00      	cmp	r6, #0
     fe8:	f6bf af6f 	bge.w	eca <process_event+0x9a>
	list->head = NULL;
     fec:	2300      	movs	r3, #0
		*clients = mgr->clients;
     fee:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     ff0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ff4:	f021 0107 	bic.w	r1, r1, #7
     ff8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     ffc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     ffe:	8b21      	ldrh	r1, [r4, #24]
    1000:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1004:	45aa      	cmp	sl, r5
    1006:	f04f 0900 	mov.w	r9, #0
    100a:	f47f af3f 	bne.w	e8c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    100e:	2f00      	cmp	r7, #0
    1010:	d09b      	beq.n	f4a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1012:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1016:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1018:	f388 8811 	msr	BASEPRI, r8
    101c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1020:	2f00      	cmp	r7, #0
    1022:	d0c7      	beq.n	fb4 <process_event+0x184>
	return node->next;
    1024:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1026:	4639      	mov	r1, r7
    1028:	4633      	mov	r3, r6
    102a:	4652      	mov	r2, sl
    102c:	4620      	mov	r0, r4
    102e:	f005 f9c0 	bl	63b2 <notify_one>
	list->head = node;
    1032:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1034:	e7f4      	b.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1036:	06ab      	lsls	r3, r5, #26
    1038:	f57f af1a 	bpl.w	e70 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    103c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1040:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1042:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1046:	e6ff      	b.n	e48 <process_event+0x18>
    1048:	000063df 	.word	0x000063df

0000104c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1050:	b09f      	sub	sp, #124	; 0x7c
    1052:	4682      	mov	sl, r0
    1054:	9103      	str	r1, [sp, #12]
    1056:	4616      	mov	r6, r2
    1058:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    105a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    105c:	7830      	ldrb	r0, [r6, #0]
    105e:	b910      	cbnz	r0, 1066 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1060:	4628      	mov	r0, r5
    1062:	f000 bd8b 	b.w	1b7c <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
    1066:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    1068:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    106a:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    106c:	d006      	beq.n	107c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    106e:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    1070:	47d0      	blx	sl
    1072:	2800      	cmp	r0, #0
    1074:	f2c0 8582 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1078:	3501      	adds	r5, #1
		if (bps == NULL) {
    107a:	e22b      	b.n	14d4 <z_cbvprintf_impl+0x488>
		} state = {
    107c:	2218      	movs	r2, #24
    107e:	2100      	movs	r1, #0
    1080:	a810      	add	r0, sp, #64	; 0x40
    1082:	f005 fb0a 	bl	669a <memset>
	if (*sp == '%') {
    1086:	7873      	ldrb	r3, [r6, #1]
    1088:	2b25      	cmp	r3, #37	; 0x25
    108a:	d07d      	beq.n	1188 <z_cbvprintf_impl+0x13c>
    108c:	2300      	movs	r3, #0
    108e:	1c70      	adds	r0, r6, #1
    1090:	4698      	mov	r8, r3
    1092:	469e      	mov	lr, r3
    1094:	469c      	mov	ip, r3
    1096:	461f      	mov	r7, r3
    1098:	4601      	mov	r1, r0
		switch (*sp) {
    109a:	f810 2b01 	ldrb.w	r2, [r0], #1
    109e:	2a2b      	cmp	r2, #43	; 0x2b
    10a0:	f000 80a1 	beq.w	11e6 <z_cbvprintf_impl+0x19a>
    10a4:	f200 8098 	bhi.w	11d8 <z_cbvprintf_impl+0x18c>
    10a8:	2a20      	cmp	r2, #32
    10aa:	f000 809f 	beq.w	11ec <z_cbvprintf_impl+0x1a0>
    10ae:	2a23      	cmp	r2, #35	; 0x23
    10b0:	f000 809f 	beq.w	11f2 <z_cbvprintf_impl+0x1a6>
    10b4:	b12b      	cbz	r3, 10c2 <z_cbvprintf_impl+0x76>
    10b6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    10ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10be:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    10c2:	f1b8 0f00 	cmp.w	r8, #0
    10c6:	d005      	beq.n	10d4 <z_cbvprintf_impl+0x88>
    10c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    10cc:	f043 0320 	orr.w	r3, r3, #32
    10d0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    10d4:	f1be 0f00 	cmp.w	lr, #0
    10d8:	d005      	beq.n	10e6 <z_cbvprintf_impl+0x9a>
    10da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    10de:	f043 0310 	orr.w	r3, r3, #16
    10e2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    10e6:	f1bc 0f00 	cmp.w	ip, #0
    10ea:	d005      	beq.n	10f8 <z_cbvprintf_impl+0xac>
    10ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    10f0:	f043 0308 	orr.w	r3, r3, #8
    10f4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    10f8:	b12f      	cbz	r7, 1106 <z_cbvprintf_impl+0xba>
    10fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    10fe:	f043 0304 	orr.w	r3, r3, #4
    1102:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    1106:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    110a:	f003 0044 	and.w	r0, r3, #68	; 0x44
    110e:	2844      	cmp	r0, #68	; 0x44
    1110:	d103      	bne.n	111a <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    1112:	f36f 1386 	bfc	r3, #6, #1
    1116:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    111a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    111e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1124:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    1128:	d17f      	bne.n	122a <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    112a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    112e:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1132:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1134:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    1138:	781a      	ldrb	r2, [r3, #0]
    113a:	2a2e      	cmp	r2, #46	; 0x2e
    113c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1140:	bf0c      	ite	eq
    1142:	2101      	moveq	r1, #1
    1144:	2100      	movne	r1, #0
    1146:	f361 0241 	bfi	r2, r1, #1, #1
    114a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    114e:	d178      	bne.n	1242 <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    1150:	785a      	ldrb	r2, [r3, #1]
    1152:	2a2a      	cmp	r2, #42	; 0x2a
    1154:	d06e      	beq.n	1234 <z_cbvprintf_impl+0x1e8>
	++sp;
    1156:	3301      	adds	r3, #1
	size_t val = 0;
    1158:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    115a:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    115e:	4619      	mov	r1, r3
    1160:	f811 0b01 	ldrb.w	r0, [r1], #1
    1164:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1168:	2f09      	cmp	r7, #9
    116a:	f240 80af 	bls.w	12cc <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    116e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    1172:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    1174:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1178:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    117c:	460a      	mov	r2, r1
    117e:	f360 0241 	bfi	r2, r0, #1, #1
    1182:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    1186:	e05c      	b.n	1242 <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    1188:	1cb2      	adds	r2, r6, #2
    118a:	9206      	str	r2, [sp, #24]
    118c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    1190:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1194:	07df      	lsls	r7, r3, #31
    1196:	f140 8154 	bpl.w	1442 <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    119a:	f854 2b04 	ldr.w	r2, [r4], #4
    119e:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    11a0:	2a00      	cmp	r2, #0
    11a2:	da08      	bge.n	11b6 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    11a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    11a8:	f042 0204 	orr.w	r2, r2, #4
    11ac:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    11b0:	9a04      	ldr	r2, [sp, #16]
    11b2:	4252      	negs	r2, r2
		int width = -1;
    11b4:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    11b6:	0758      	lsls	r0, r3, #29
    11b8:	f140 814b 	bpl.w	1452 <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    11bc:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    11c0:	2f00      	cmp	r7, #0
    11c2:	f280 814a 	bge.w	145a <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    11c6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    11ca:	f36f 0341 	bfc	r3, #1, #1
    11ce:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    11d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    11d6:	e140      	b.n	145a <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    11d8:	2a2d      	cmp	r2, #45	; 0x2d
    11da:	d00d      	beq.n	11f8 <z_cbvprintf_impl+0x1ac>
    11dc:	2a30      	cmp	r2, #48	; 0x30
    11de:	f47f af69 	bne.w	10b4 <z_cbvprintf_impl+0x68>
    11e2:	2301      	movs	r3, #1
	} while (loop);
    11e4:	e758      	b.n	1098 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    11e6:	f04f 0c01 	mov.w	ip, #1
    11ea:	e755      	b.n	1098 <z_cbvprintf_impl+0x4c>
    11ec:	f04f 0e01 	mov.w	lr, #1
    11f0:	e752      	b.n	1098 <z_cbvprintf_impl+0x4c>
    11f2:	f04f 0801 	mov.w	r8, #1
    11f6:	e74f      	b.n	1098 <z_cbvprintf_impl+0x4c>
    11f8:	2701      	movs	r7, #1
    11fa:	e74d      	b.n	1098 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    11fc:	fb0e 7202 	mla	r2, lr, r2, r7
    1200:	3a30      	subs	r2, #48	; 0x30
    1202:	4603      	mov	r3, r0
    1204:	4618      	mov	r0, r3
    1206:	f810 7b01 	ldrb.w	r7, [r0], #1
    120a:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    120e:	f1bc 0f09 	cmp.w	ip, #9
    1212:	d9f3      	bls.n	11fc <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    1214:	4299      	cmp	r1, r3
    1216:	d08f      	beq.n	1138 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    1218:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    121c:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    121e:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1220:	f362 0141 	bfi	r1, r2, #1, #1
    1224:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    1228:	e786      	b.n	1138 <z_cbvprintf_impl+0xec>
    122a:	460b      	mov	r3, r1
	size_t val = 0;
    122c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    122e:	f04f 0e0a 	mov.w	lr, #10
    1232:	e7e7      	b.n	1204 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    1234:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1238:	f042 0204 	orr.w	r2, r2, #4
    123c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    1240:	3302      	adds	r3, #2
	switch (*sp) {
    1242:	781a      	ldrb	r2, [r3, #0]
    1244:	2a6c      	cmp	r2, #108	; 0x6c
    1246:	d061      	beq.n	130c <z_cbvprintf_impl+0x2c0>
    1248:	d845      	bhi.n	12d6 <z_cbvprintf_impl+0x28a>
    124a:	2a68      	cmp	r2, #104	; 0x68
    124c:	d04b      	beq.n	12e6 <z_cbvprintf_impl+0x29a>
    124e:	2a6a      	cmp	r2, #106	; 0x6a
    1250:	d065      	beq.n	131e <z_cbvprintf_impl+0x2d2>
    1252:	2a4c      	cmp	r2, #76	; 0x4c
    1254:	d06b      	beq.n	132e <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    1256:	f813 2b01 	ldrb.w	r2, [r3], #1
    125a:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    125c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    125e:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    1262:	f200 80ad 	bhi.w	13c0 <z_cbvprintf_impl+0x374>
    1266:	2a6d      	cmp	r2, #109	; 0x6d
    1268:	d86e      	bhi.n	1348 <z_cbvprintf_impl+0x2fc>
    126a:	2a69      	cmp	r2, #105	; 0x69
    126c:	f200 80a8 	bhi.w	13c0 <z_cbvprintf_impl+0x374>
    1270:	2a57      	cmp	r2, #87	; 0x57
    1272:	f200 8088 	bhi.w	1386 <z_cbvprintf_impl+0x33a>
    1276:	2a41      	cmp	r2, #65	; 0x41
    1278:	d004      	beq.n	1284 <z_cbvprintf_impl+0x238>
    127a:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    127e:	2b02      	cmp	r3, #2
    1280:	f200 809e 	bhi.w	13c0 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    1284:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    1288:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    128c:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    128e:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    1292:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1296:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    129a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    129e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    12a2:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    12a6:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    12aa:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    12ac:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    12b0:	b2cb      	uxtb	r3, r1
    12b2:	f100 80c4 	bmi.w	143e <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    12b6:	f003 0278 	and.w	r2, r3, #120	; 0x78
    12ba:	2a18      	cmp	r2, #24
    12bc:	f040 80ae 	bne.w	141c <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    12c0:	f36f 03c6 	bfc	r3, #3, #4
    12c4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    12c8:	2300      	movs	r3, #0
    12ca:	e09d      	b.n	1408 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    12cc:	fb0c 0202 	mla	r2, ip, r2, r0
    12d0:	3a30      	subs	r2, #48	; 0x30
    12d2:	460b      	mov	r3, r1
    12d4:	e743      	b.n	115e <z_cbvprintf_impl+0x112>
	switch (*sp) {
    12d6:	2a74      	cmp	r2, #116	; 0x74
    12d8:	d025      	beq.n	1326 <z_cbvprintf_impl+0x2da>
    12da:	2a7a      	cmp	r2, #122	; 0x7a
    12dc:	d1bb      	bne.n	1256 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    12de:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    12e2:	2106      	movs	r1, #6
    12e4:	e00c      	b.n	1300 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    12e6:	785a      	ldrb	r2, [r3, #1]
    12e8:	2a68      	cmp	r2, #104	; 0x68
    12ea:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    12ee:	d106      	bne.n	12fe <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    12f0:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    12f2:	f361 02c6 	bfi	r2, r1, #3, #4
    12f6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    12fa:	3302      	adds	r3, #2
    12fc:	e7ab      	b.n	1256 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    12fe:	2102      	movs	r1, #2
    1300:	f361 02c6 	bfi	r2, r1, #3, #4
    1304:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    1308:	3301      	adds	r3, #1
    130a:	e7a4      	b.n	1256 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    130c:	785a      	ldrb	r2, [r3, #1]
    130e:	2a6c      	cmp	r2, #108	; 0x6c
    1310:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1314:	d101      	bne.n	131a <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    1316:	2104      	movs	r1, #4
    1318:	e7eb      	b.n	12f2 <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    131a:	2103      	movs	r1, #3
    131c:	e7f0      	b.n	1300 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    131e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1322:	2105      	movs	r1, #5
    1324:	e7ec      	b.n	1300 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    1326:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    132a:	2107      	movs	r1, #7
    132c:	e7e8      	b.n	1300 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    132e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    1332:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1336:	f022 0202 	bic.w	r2, r2, #2
    133a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    133e:	f042 0202 	orr.w	r2, r2, #2
    1342:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    1346:	e7df      	b.n	1308 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    1348:	3a6e      	subs	r2, #110	; 0x6e
    134a:	b2d3      	uxtb	r3, r2
    134c:	2201      	movs	r2, #1
    134e:	409a      	lsls	r2, r3
    1350:	f240 4382 	movw	r3, #1154	; 0x482
    1354:	421a      	tst	r2, r3
    1356:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    135a:	d138      	bne.n	13ce <z_cbvprintf_impl+0x382>
    135c:	f012 0f24 	tst.w	r2, #36	; 0x24
    1360:	d160      	bne.n	1424 <z_cbvprintf_impl+0x3d8>
    1362:	07d1      	lsls	r1, r2, #31
    1364:	d52c      	bpl.n	13c0 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    1366:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    136a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    136e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1372:	2103      	movs	r1, #3
    1374:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1378:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    137c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1380:	eb43 030c 	adc.w	r3, r3, ip
    1384:	e040      	b.n	1408 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
    1386:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    138a:	b2c9      	uxtb	r1, r1
    138c:	2001      	movs	r0, #1
    138e:	fa00 f101 	lsl.w	r1, r0, r1
    1392:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1396:	f47f af75 	bne.w	1284 <z_cbvprintf_impl+0x238>
    139a:	f640 0301 	movw	r3, #2049	; 0x801
    139e:	4219      	tst	r1, r3
    13a0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    13a4:	d119      	bne.n	13da <z_cbvprintf_impl+0x38e>
    13a6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    13aa:	d009      	beq.n	13c0 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    13ac:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    13b0:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    13b4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    13b8:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    13ba:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    13be:	d183      	bne.n	12c8 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    13c0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    13c4:	f043 0301 	orr.w	r3, r3, #1
    13c8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    13cc:	e77c      	b.n	12c8 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    13ce:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    13d2:	2102      	movs	r1, #2
    13d4:	f361 0202 	bfi	r2, r1, #0, #3
    13d8:	e7ec      	b.n	13b4 <z_cbvprintf_impl+0x368>
    13da:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    13de:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    13e0:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    13e4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    13e8:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    13ea:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    13ee:	bf02      	ittt	eq
    13f0:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    13f4:	f041 0101 	orreq.w	r1, r1, #1
    13f8:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    13fc:	2a63      	cmp	r2, #99	; 0x63
    13fe:	f47f af63 	bne.w	12c8 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1402:	3b00      	subs	r3, #0
    1404:	bf18      	it	ne
    1406:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1408:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    140c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1410:	430b      	orrs	r3, r1
    1412:	f363 0241 	bfi	r2, r3, #1, #1
    1416:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    141a:	e6b9      	b.n	1190 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    141c:	f013 0f38 	tst.w	r3, #56	; 0x38
    1420:	d1ce      	bne.n	13c0 <z_cbvprintf_impl+0x374>
    1422:	e751      	b.n	12c8 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    1424:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1428:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    142a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    142e:	f361 0202 	bfi	r2, r1, #0, #3
    1432:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    1436:	bf14      	ite	ne
    1438:	2301      	movne	r3, #1
    143a:	2300      	moveq	r3, #0
    143c:	e7e4      	b.n	1408 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    143e:	2301      	movs	r3, #1
    1440:	e7e2      	b.n	1408 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    1442:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    1446:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1448:	bfb4      	ite	lt
    144a:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    144c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    1450:	e6b0      	b.n	11b4 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    1452:	0799      	lsls	r1, r3, #30
    1454:	f57f aebd 	bpl.w	11d2 <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    1458:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    145a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    145e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1460:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    1464:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1468:	f003 0207 	and.w	r2, r3, #7
    146c:	2a04      	cmp	r2, #4
    146e:	d107      	bne.n	1480 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    1470:	078a      	lsls	r2, r1, #30
    1472:	d405      	bmi.n	1480 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    1474:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    1478:	2a00      	cmp	r2, #0
    147a:	bfac      	ite	ge
    147c:	2706      	movge	r7, #6
    147e:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    1480:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1484:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1486:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    148a:	d133      	bne.n	14f4 <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    148c:	1ecb      	subs	r3, r1, #3
    148e:	2b04      	cmp	r3, #4
    1490:	d804      	bhi.n	149c <z_cbvprintf_impl+0x450>
    1492:	e8df f003 	tbb	[pc, r3]
    1496:	4621      	.short	0x4621
    1498:	2146      	.short	0x2146
    149a:	21          	.byte	0x21
    149b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    149c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    149e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    14a0:	ea4f 72e3 	mov.w	r2, r3, asr #31
    14a4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    14a8:	d11c      	bne.n	14e4 <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    14aa:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    14ae:	17da      	asrs	r2, r3, #31
    14b0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    14b4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    14b6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    14ba:	9307      	str	r3, [sp, #28]
    14bc:	079b      	lsls	r3, r3, #30
    14be:	d050      	beq.n	1562 <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    14c0:	9b06      	ldr	r3, [sp, #24]
    14c2:	9903      	ldr	r1, [sp, #12]
    14c4:	4632      	mov	r2, r6
    14c6:	4650      	mov	r0, sl
    14c8:	f005 f895 	bl	65f6 <outs>
    14cc:	2800      	cmp	r0, #0
    14ce:	f2c0 8355 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    14d2:	4405      	add	r5, r0
			continue;
    14d4:	9e06      	ldr	r6, [sp, #24]
    14d6:	e5c1      	b.n	105c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    14d8:	f854 3b04 	ldr.w	r3, [r4], #4
    14dc:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    14de:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    14e2:	e7e8      	b.n	14b6 <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    14e4:	2902      	cmp	r1, #2
    14e6:	d1e5      	bne.n	14b4 <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    14e8:	b21a      	sxth	r2, r3
    14ea:	f343 33c0 	sbfx	r3, r3, #15, #1
    14ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    14f2:	e7df      	b.n	14b4 <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    14f4:	2b02      	cmp	r3, #2
    14f6:	d124      	bne.n	1542 <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    14f8:	1ecb      	subs	r3, r1, #3
    14fa:	2b04      	cmp	r3, #4
    14fc:	d804      	bhi.n	1508 <z_cbvprintf_impl+0x4bc>
    14fe:	e8df f003 	tbb	[pc, r3]
    1502:	1018      	.short	0x1018
    1504:	1810      	.short	0x1810
    1506:	18          	.byte	0x18
    1507:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1508:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    150a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    150e:	f04f 0200 	mov.w	r2, #0
    1512:	d014      	beq.n	153e <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    1514:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1516:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    151a:	d1cc      	bne.n	14b6 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    151c:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    151e:	9310      	str	r3, [sp, #64]	; 0x40
    1520:	e7c9      	b.n	14b6 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    1522:	3407      	adds	r4, #7
    1524:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1528:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    152c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    1530:	e7c1      	b.n	14b6 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    1532:	f854 3b04 	ldr.w	r3, [r4], #4
    1536:	9310      	str	r3, [sp, #64]	; 0x40
    1538:	2300      	movs	r3, #0
    153a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    153c:	e7bb      	b.n	14b6 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    153e:	b2db      	uxtb	r3, r3
    1540:	e7cd      	b.n	14de <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    1542:	2b04      	cmp	r3, #4
    1544:	d108      	bne.n	1558 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    1546:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1548:	f024 0407 	bic.w	r4, r4, #7
    154c:	e9d4 2300 	ldrd	r2, r3, [r4]
    1550:	3408      	adds	r4, #8
    1552:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    1556:	e7ae      	b.n	14b6 <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1558:	2b03      	cmp	r3, #3
    155a:	d1ac      	bne.n	14b6 <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    155c:	f854 3b04 	ldr.w	r3, [r4], #4
    1560:	e7dd      	b.n	151e <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    1562:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    1566:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    156a:	d8b3      	bhi.n	14d4 <z_cbvprintf_impl+0x488>
    156c:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    1570:	d849      	bhi.n	1606 <z_cbvprintf_impl+0x5ba>
    1572:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    1576:	f000 8091 	beq.w	169c <z_cbvprintf_impl+0x650>
    157a:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    157e:	d9a9      	bls.n	14d4 <z_cbvprintf_impl+0x488>
    1580:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    1584:	d003      	beq.n	158e <z_cbvprintf_impl+0x542>
    1586:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    158a:	2a02      	cmp	r2, #2
    158c:	d8a2      	bhi.n	14d4 <z_cbvprintf_impl+0x488>
	} u = {
    158e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    1592:	2a00      	cmp	r2, #0
    1594:	f2c0 8136 	blt.w	1804 <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    1598:	9b07      	ldr	r3, [sp, #28]
    159a:	0718      	lsls	r0, r3, #28
    159c:	f100 8135 	bmi.w	180a <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    15a0:	f3c3 1900 	ubfx	r9, r3, #4, #1
    15a4:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    15a8:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    15ac:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    15b0:	2800      	cmp	r0, #0
    15b2:	f040 812d 	bne.w	1810 <z_cbvprintf_impl+0x7c4>
    15b6:	ea51 0602 	orrs.w	r6, r1, r2
    15ba:	bf14      	ite	ne
    15bc:	2601      	movne	r6, #1
    15be:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    15c0:	02d2      	lsls	r2, r2, #11
    15c2:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    15c6:	02c9      	lsls	r1, r1, #11
		c = 'f';
    15c8:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    15cc:	ea40 0e01 	orr.w	lr, r0, r1
    15d0:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    15d4:	bf08      	it	eq
    15d6:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    15da:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    15de:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    15e2:	f000 8199 	beq.w	1918 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
    15e6:	2e00      	cmp	r6, #0
    15e8:	f040 8144 	bne.w	1874 <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    15ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    15ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    15f2:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    15f6:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    15f8:	2000      	movs	r0, #0
    15fa:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    15fe:	4606      	mov	r6, r0
		fract *= 5U;
    1600:	f04f 0c05 	mov.w	ip, #5
    1604:	e150      	b.n	18a8 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    1606:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    160a:	2a20      	cmp	r2, #32
    160c:	f63f af62 	bhi.w	14d4 <z_cbvprintf_impl+0x488>
    1610:	a001      	add	r0, pc, #4	; (adr r0, 1618 <z_cbvprintf_impl+0x5cc>)
    1612:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    1616:	bf00      	nop
    1618:	000017a3 	.word	0x000017a3
    161c:	000014d5 	.word	0x000014d5
    1620:	000014d5 	.word	0x000014d5
    1624:	000014d5 	.word	0x000014d5
    1628:	000014d5 	.word	0x000014d5
    162c:	000014d5 	.word	0x000014d5
    1630:	000014d5 	.word	0x000014d5
    1634:	000014d5 	.word	0x000014d5
    1638:	000014d5 	.word	0x000014d5
    163c:	0000158f 	.word	0x0000158f
    1640:	000014d5 	.word	0x000014d5
    1644:	00001727 	.word	0x00001727
    1648:	0000173b 	.word	0x0000173b
    164c:	0000158f 	.word	0x0000158f
    1650:	0000158f 	.word	0x0000158f
    1654:	0000158f 	.word	0x0000158f
    1658:	000014d5 	.word	0x000014d5
    165c:	0000173b 	.word	0x0000173b
    1660:	000014d5 	.word	0x000014d5
    1664:	000014d5 	.word	0x000014d5
    1668:	000014d5 	.word	0x000014d5
    166c:	000014d5 	.word	0x000014d5
    1670:	000017dd 	.word	0x000017dd
    1674:	000017a3 	.word	0x000017a3
    1678:	000017a9 	.word	0x000017a9
    167c:	000014d5 	.word	0x000014d5
    1680:	000014d5 	.word	0x000014d5
    1684:	000016a3 	.word	0x000016a3
    1688:	000014d5 	.word	0x000014d5
    168c:	000017a3 	.word	0x000017a3
    1690:	000014d5 	.word	0x000014d5
    1694:	000014d5 	.word	0x000014d5
    1698:	000017a3 	.word	0x000017a3
			OUTC('%');
    169c:	9903      	ldr	r1, [sp, #12]
    169e:	4658      	mov	r0, fp
    16a0:	e4e6      	b.n	1070 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    16a2:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    16a4:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    16a6:	db3a      	blt.n	171e <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    16a8:	4639      	mov	r1, r7
    16aa:	4630      	mov	r0, r6
    16ac:	f004 ffe1 	bl	6672 <strnlen>
			bpe = bps + len;
    16b0:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    16b2:	2e00      	cmp	r6, #0
    16b4:	f43f af0e 	beq.w	14d4 <z_cbvprintf_impl+0x488>
		char sign = 0;
    16b8:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    16bc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    16c0:	f013 0210 	ands.w	r2, r3, #16
    16c4:	9205      	str	r2, [sp, #20]
    16c6:	f000 824e 	beq.w	1b66 <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
    16ca:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    16cc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    16d0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    16d4:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    16d6:	bf18      	it	ne
    16d8:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    16da:	f8cd 801c 	str.w	r8, [sp, #28]
    16de:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    16e0:	bf18      	it	ne
    16e2:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    16e4:	9b04      	ldr	r3, [sp, #16]
    16e6:	2b00      	cmp	r3, #0
    16e8:	f340 8258 	ble.w	1b9c <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
    16ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    16f0:	1a1b      	subs	r3, r3, r0
    16f2:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    16f4:	0753      	lsls	r3, r2, #29
    16f6:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    16fa:	f100 824f 	bmi.w	1b9c <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
    16fe:	0650      	lsls	r0, r2, #25
    1700:	f140 823f 	bpl.w	1b82 <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
    1704:	f1b9 0f00 	cmp.w	r9, #0
    1708:	d007      	beq.n	171a <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    170a:	9903      	ldr	r1, [sp, #12]
    170c:	4648      	mov	r0, r9
    170e:	47d0      	blx	sl
    1710:	2800      	cmp	r0, #0
    1712:	f2c0 8233 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1716:	3501      	adds	r5, #1
						sign = 0;
    1718:	46d9      	mov	r9, fp
					pad = '0';
    171a:	2230      	movs	r2, #48	; 0x30
    171c:	e232      	b.n	1b84 <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
    171e:	4630      	mov	r0, r6
    1720:	f004 ffa0 	bl	6664 <strlen>
    1724:	e7c4      	b.n	16b0 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1726:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1728:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    172c:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    1730:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    1734:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    1736:	2001      	movs	r0, #1
    1738:	e7c0      	b.n	16bc <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    173a:	9b07      	ldr	r3, [sp, #28]
    173c:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    173e:	bf58      	it	pl
    1740:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    1744:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    1748:	bf54      	ite	pl
    174a:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    174e:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    1752:	2b00      	cmp	r3, #0
    1754:	da06      	bge.n	1764 <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
    1756:	4252      	negs	r2, r2
    1758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    175c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    1760:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    1764:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    1768:	9300      	str	r3, [sp, #0]
    176a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    176e:	ab17      	add	r3, sp, #92	; 0x5c
    1770:	aa12      	add	r2, sp, #72	; 0x48
    1772:	f004 fefa 	bl	656a <encode_uint>
    1776:	4606      	mov	r6, r0
			if (precision >= 0) {
    1778:	2f00      	cmp	r7, #0
    177a:	db0c      	blt.n	1796 <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    177c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    1780:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    1784:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    1786:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    178a:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    178c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    1790:	d901      	bls.n	1796 <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    1792:	1afb      	subs	r3, r7, r3
    1794:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    1796:	2e00      	cmp	r6, #0
    1798:	f43f ae9c 	beq.w	14d4 <z_cbvprintf_impl+0x488>
    179c:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    17a0:	e056      	b.n	1850 <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    17a2:	f04f 0900 	mov.w	r9, #0
    17a6:	e7dd      	b.n	1764 <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    17a8:	9810      	ldr	r0, [sp, #64]	; 0x40
    17aa:	2800      	cmp	r0, #0
    17ac:	f000 81d6 	beq.w	1b5c <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17b0:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    17b4:	9300      	str	r3, [sp, #0]
    17b6:	aa12      	add	r2, sp, #72	; 0x48
    17b8:	ab17      	add	r3, sp, #92	; 0x5c
    17ba:	2100      	movs	r1, #0
    17bc:	f004 fed5 	bl	656a <encode_uint>
				conv->altform_0c = true;
    17c0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    17c4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    17c8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    17cc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17d0:	4606      	mov	r6, r0
				conv->altform_0c = true;
    17d2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    17d6:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    17da:	e7cd      	b.n	1778 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    17dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    17de:	2907      	cmp	r1, #7
    17e0:	f63f ae78 	bhi.w	14d4 <z_cbvprintf_impl+0x488>
    17e4:	e8df f001 	tbb	[pc, r1]
    17e8:	0c06040c 	.word	0x0c06040c
    17ec:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    17f0:	701d      	strb	r5, [r3, #0]
		break;
    17f2:	e66f      	b.n	14d4 <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    17f4:	801d      	strh	r5, [r3, #0]
		break;
    17f6:	e66d      	b.n	14d4 <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    17f8:	17ea      	asrs	r2, r5, #31
    17fa:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    17fe:	e669      	b.n	14d4 <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1800:	601d      	str	r5, [r3, #0]
		break;
    1802:	e667      	b.n	14d4 <z_cbvprintf_impl+0x488>
		*sign = '-';
    1804:	f04f 092d 	mov.w	r9, #45	; 0x2d
    1808:	e6ce      	b.n	15a8 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    180a:	f04f 092b 	mov.w	r9, #43	; 0x2b
    180e:	e6cb      	b.n	15a8 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1810:	f240 76ff 	movw	r6, #2047	; 0x7ff
    1814:	42b0      	cmp	r0, r6
    1816:	d12a      	bne.n	186e <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    1818:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    181a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    181e:	d11e      	bne.n	185e <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c)) {
    1820:	2b1a      	cmp	r3, #26
    1822:	bf35      	itete	cc
    1824:	2349      	movcc	r3, #73	; 0x49
    1826:	2369      	movcs	r3, #105	; 0x69
    1828:	214e      	movcc	r1, #78	; 0x4e
    182a:	216e      	movcs	r1, #110	; 0x6e
    182c:	bf34      	ite	cc
    182e:	2246      	movcc	r2, #70	; 0x46
    1830:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    1832:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    1836:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    183a:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    183e:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    1842:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    1846:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    184a:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    184e:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    1850:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    1852:	f1b9 0f00 	cmp.w	r9, #0
    1856:	f43f af31 	beq.w	16bc <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    185a:	3001      	adds	r0, #1
    185c:	e72e      	b.n	16bc <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c)) {
    185e:	2b19      	cmp	r3, #25
    1860:	bf8b      	itete	hi
    1862:	236e      	movhi	r3, #110	; 0x6e
    1864:	234e      	movls	r3, #78	; 0x4e
    1866:	2161      	movhi	r1, #97	; 0x61
    1868:	2141      	movls	r1, #65	; 0x41
    186a:	461a      	mov	r2, r3
    186c:	e7e1      	b.n	1832 <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    186e:	2600      	movs	r6, #0
    1870:	e6a6      	b.n	15c0 <z_cbvprintf_impl+0x574>
				expo--;
    1872:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1874:	1849      	adds	r1, r1, r1
    1876:	4152      	adcs	r2, r2
    1878:	2a00      	cmp	r2, #0
    187a:	dafa      	bge.n	1872 <z_cbvprintf_impl+0x826>
    187c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    1880:	e6b4      	b.n	15ec <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    1882:	0849      	lsrs	r1, r1, #1
    1884:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    1888:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    188a:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    188e:	4640      	mov	r0, r8
			expo++;
    1890:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1894:	d2f5      	bcs.n	1882 <z_cbvprintf_impl+0x836>
		fract *= 5U;
    1896:	fb0c fe02 	mul.w	lr, ip, r2
    189a:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    189e:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    18a2:	4472      	add	r2, lr
		decexp--;
    18a4:	3e01      	subs	r6, #1
    18a6:	2001      	movs	r0, #1
	while (expo < -2) {
    18a8:	f118 0f02 	cmn.w	r8, #2
    18ac:	dbe9      	blt.n	1882 <z_cbvprintf_impl+0x836>
    18ae:	b108      	cbz	r0, 18b4 <z_cbvprintf_impl+0x868>
    18b0:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    18b4:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    18b8:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    18bc:	dc2f      	bgt.n	191e <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
    18be:	f1c8 0004 	rsb	r0, r8, #4
    18c2:	f108 081c 	add.w	r8, r8, #28
    18c6:	f1a0 0c20 	sub.w	ip, r0, #32
    18ca:	40c2      	lsrs	r2, r0
    18cc:	fa21 f300 	lsr.w	r3, r1, r0
    18d0:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    18d4:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    18d8:	ea42 0208 	orr.w	r2, r2, r8
    18dc:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    18e0:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    18e2:	ea42 020c 	orr.w	r2, r2, ip
    18e6:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    18e8:	d13a      	bne.n	1960 <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
    18ea:	1cf3      	adds	r3, r6, #3
    18ec:	db01      	blt.n	18f2 <z_cbvprintf_impl+0x8a6>
    18ee:	42b7      	cmp	r7, r6
    18f0:	da2b      	bge.n	194a <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
    18f2:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    18f6:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    18f8:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    18fc:	dd7f      	ble.n	19fe <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
    18fe:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    1902:	0680      	lsls	r0, r0, #26
				precision--;
    1904:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    1908:	d479      	bmi.n	19fe <z_cbvprintf_impl+0x9b2>
    190a:	1e3b      	subs	r3, r7, #0
    190c:	bf18      	it	ne
    190e:	2301      	movne	r3, #1
	bool prune_zero = false;
    1910:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    1912:	f107 0801 	add.w	r8, r7, #1
    1916:	e02d      	b.n	1974 <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1918:	f04f 0800 	mov.w	r8, #0
    191c:	e66c      	b.n	15f8 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    191e:	3202      	adds	r2, #2
    1920:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    1924:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    1926:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    192a:	f004 fdef 	bl	650c <_ldiv5>
		expo--;
    192e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    1932:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    1936:	3601      	adds	r6, #1
			fract <<= 1;
    1938:	1892      	adds	r2, r2, r2
    193a:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    193c:	2900      	cmp	r1, #0
			expo--;
    193e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1942:	daf9      	bge.n	1938 <z_cbvprintf_impl+0x8ec>
    1944:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    1948:	e7b4      	b.n	18b4 <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    194a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    194e:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    1950:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    1954:	d451      	bmi.n	19fa <z_cbvprintf_impl+0x9ae>
    1956:	1e3b      	subs	r3, r7, #0
    1958:	bf18      	it	ne
    195a:	2301      	movne	r3, #1
	bool prune_zero = false;
    195c:	9305      	str	r3, [sp, #20]
    195e:	e004      	b.n	196a <z_cbvprintf_impl+0x91e>
    1960:	2300      	movs	r3, #0
	if (c == 'f') {
    1962:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    1966:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    1968:	d1d3      	bne.n	1912 <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
    196a:	eb17 0806 	adds.w	r8, r7, r6
    196e:	f04f 0b66 	mov.w	fp, #102	; 0x66
    1972:	d446      	bmi.n	1a02 <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
    1974:	f1b8 0f10 	cmp.w	r8, #16
    1978:	bfa8      	it	ge
    197a:	f04f 0810 	movge.w	r8, #16
    197e:	2010      	movs	r0, #16
    1980:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    1982:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1986:	2000      	movs	r0, #0
    1988:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    198c:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    1990:	f1b8 0f00 	cmp.w	r8, #0
    1994:	d138      	bne.n	1a08 <z_cbvprintf_impl+0x9bc>
	fract += round;
    1996:	9908      	ldr	r1, [sp, #32]
    1998:	1812      	adds	r2, r2, r0
    199a:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    199e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    19a2:	d23f      	bcs.n	1a24 <z_cbvprintf_impl+0x9d8>
	fract += round;
    19a4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    19a8:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    19aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    19ae:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    19b2:	f040 80b2 	bne.w	1b1a <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
    19b6:	2e00      	cmp	r6, #0
    19b8:	dc3f      	bgt.n	1a3a <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
    19ba:	2130      	movs	r1, #48	; 0x30
    19bc:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    19c0:	2a00      	cmp	r2, #0
    19c2:	d163      	bne.n	1a8c <z_cbvprintf_impl+0xa40>
    19c4:	2f00      	cmp	r7, #0
    19c6:	f340 81a8 	ble.w	1d1a <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    19ca:	222e      	movs	r2, #46	; 0x2e
    19cc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    19d0:	b186      	cbz	r6, 19f4 <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
    19d2:	4272      	negs	r2, r6
    19d4:	42ba      	cmp	r2, r7
    19d6:	bfa8      	it	ge
    19d8:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    19da:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    19de:	9213      	str	r2, [sp, #76]	; 0x4c
    19e0:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    19e2:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    19e6:	bfd4      	ite	le
    19e8:	2200      	movle	r2, #0
    19ea:	2201      	movgt	r2, #1
    19ec:	f362 1145 	bfi	r1, r2, #5, #1
    19f0:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    19f4:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    19f8:	e037      	b.n	1a6a <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
    19fa:	2300      	movs	r3, #0
    19fc:	e7ae      	b.n	195c <z_cbvprintf_impl+0x910>
    19fe:	2300      	movs	r3, #0
    1a00:	e786      	b.n	1910 <z_cbvprintf_impl+0x8c4>
			decimals = 0;
    1a02:	f04f 0800 	mov.w	r8, #0
    1a06:	e7ba      	b.n	197e <z_cbvprintf_impl+0x932>
	*v >>= 1;
    1a08:	0840      	lsrs	r0, r0, #1
    1a0a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    1a0e:	085b      	lsrs	r3, r3, #1
    1a10:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    1a14:	a80e      	add	r0, sp, #56	; 0x38
    1a16:	9209      	str	r2, [sp, #36]	; 0x24
    1a18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1a1c:	f004 fd76 	bl	650c <_ldiv5>
    1a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    1a22:	e7b3      	b.n	198c <z_cbvprintf_impl+0x940>
	*v >>= 1;
    1a24:	0852      	lsrs	r2, r2, #1
    1a26:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    1a2a:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    1a2c:	0849      	lsrs	r1, r1, #1
    1a2e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    1a32:	3601      	adds	r6, #1
	_ldiv5(v);
    1a34:	f004 fd6a 	bl	650c <_ldiv5>
		decexp++;
    1a38:	e7b6      	b.n	19a8 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
    1a3a:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    1a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a40:	2900      	cmp	r1, #0
    1a42:	dd09      	ble.n	1a58 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
    1a44:	a90b      	add	r1, sp, #44	; 0x2c
    1a46:	a80c      	add	r0, sp, #48	; 0x30
    1a48:	9207      	str	r2, [sp, #28]
    1a4a:	f004 fd77 	bl	653c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1a4e:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    1a50:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    1a54:	9a07      	ldr	r2, [sp, #28]
    1a56:	d1f2      	bne.n	1a3e <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
    1a58:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    1a5a:	b99a      	cbnz	r2, 1a84 <z_cbvprintf_impl+0xa38>
    1a5c:	2f00      	cmp	r7, #0
    1a5e:	f340 815a 	ble.w	1d16 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    1a62:	212e      	movs	r1, #46	; 0x2e
    1a64:	f808 1b01 	strb.w	r1, [r8], #1
    1a68:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    1a6a:	2f00      	cmp	r7, #0
    1a6c:	dd17      	ble.n	1a9e <z_cbvprintf_impl+0xa52>
    1a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1a70:	2a00      	cmp	r2, #0
    1a72:	dd14      	ble.n	1a9e <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
    1a74:	a90b      	add	r1, sp, #44	; 0x2c
    1a76:	a80c      	add	r0, sp, #48	; 0x30
    1a78:	f004 fd60 	bl	653c <_get_digit>
		precision--;
    1a7c:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    1a7e:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    1a82:	e7f2      	b.n	1a6a <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
    1a84:	222e      	movs	r2, #46	; 0x2e
    1a86:	f808 2b01 	strb.w	r2, [r8], #1
    1a8a:	e7ed      	b.n	1a68 <z_cbvprintf_impl+0xa1c>
    1a8c:	222e      	movs	r2, #46	; 0x2e
    1a8e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    1a92:	2e00      	cmp	r6, #0
    1a94:	d0ae      	beq.n	19f4 <z_cbvprintf_impl+0x9a8>
    1a96:	2f00      	cmp	r7, #0
    1a98:	dc9b      	bgt.n	19d2 <z_cbvprintf_impl+0x986>
			*buf++ = '.';
    1a9a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    1a9e:	9b05      	ldr	r3, [sp, #20]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d14e      	bne.n	1b42 <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
    1aa4:	9714      	str	r7, [sp, #80]	; 0x50
    1aa6:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    1aa8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    1aac:	2a45      	cmp	r2, #69	; 0x45
    1aae:	d123      	bne.n	1af8 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
    1ab0:	2e00      	cmp	r6, #0
			decexp = -decexp;
    1ab2:	bfba      	itte	lt
    1ab4:	4276      	neglt	r6, r6
			*buf++ = '-';
    1ab6:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    1ab8:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    1aba:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    1abc:	bfc8      	it	gt
    1abe:	2164      	movgt	r1, #100	; 0x64
    1ac0:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    1ac2:	bfd1      	iteee	le
    1ac4:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    1ac6:	fbb6 f3f1 	udivgt	r3, r6, r1
    1aca:	1cfa      	addgt	r2, r7, #3
    1acc:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    1ad0:	bfc8      	it	gt
    1ad2:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    1ad6:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    1ada:	bfc8      	it	gt
    1adc:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    1ade:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    1ae2:	fbb6 f3f1 	udiv	r3, r6, r1
    1ae6:	4617      	mov	r7, r2
    1ae8:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1aec:	fb01 6313 	mls	r3, r1, r3, r6
    1af0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1af2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    1af6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    1af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1afa:	2b00      	cmp	r3, #0
    1afc:	dc2c      	bgt.n	1b58 <z_cbvprintf_impl+0xb0c>
    1afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1b00:	2b00      	cmp	r3, #0
    1b02:	bfd4      	ite	le
    1b04:	2300      	movle	r3, #0
    1b06:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1b08:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1b0c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1b10:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1b12:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    1b16:	703b      	strb	r3, [r7, #0]
	return bps;
    1b18:	e699      	b.n	184e <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    1b1a:	a90b      	add	r1, sp, #44	; 0x2c
    1b1c:	a80c      	add	r0, sp, #48	; 0x30
    1b1e:	9207      	str	r2, [sp, #28]
    1b20:	f004 fd0c 	bl	653c <_get_digit>
		if (*buf++ != '0') {
    1b24:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    1b26:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    1b2a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1b2c:	bf18      	it	ne
    1b2e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1b32:	b912      	cbnz	r2, 1b3a <z_cbvprintf_impl+0xaee>
    1b34:	2f00      	cmp	r7, #0
    1b36:	f340 80f0 	ble.w	1d1a <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    1b3a:	222e      	movs	r2, #46	; 0x2e
    1b3c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    1b40:	e758      	b.n	19f4 <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
    1b42:	4647      	mov	r7, r8
    1b44:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1b48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    1b4c:	2a30      	cmp	r2, #48	; 0x30
    1b4e:	d0f8      	beq.n	1b42 <z_cbvprintf_impl+0xaf6>
    1b50:	2a2e      	cmp	r2, #46	; 0x2e
    1b52:	bf08      	it	eq
    1b54:	4647      	moveq	r7, r8
    1b56:	e7a7      	b.n	1aa8 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
    1b58:	2301      	movs	r3, #1
    1b5a:	e7d5      	b.n	1b08 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
    1b5c:	4f70      	ldr	r7, [pc, #448]	; (1d20 <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
    1b5e:	4681      	mov	r9, r0
			bps = "(nil)";
    1b60:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    1b62:	2005      	movs	r0, #5
    1b64:	e5aa      	b.n	16bc <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    1b66:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1b68:	bf48      	it	mi
    1b6a:	3001      	addmi	r0, #1
    1b6c:	e5ae      	b.n	16cc <z_cbvprintf_impl+0x680>
					OUTC(pad);
    1b6e:	4610      	mov	r0, r2
    1b70:	9209      	str	r2, [sp, #36]	; 0x24
    1b72:	9903      	ldr	r1, [sp, #12]
    1b74:	47d0      	blx	sl
    1b76:	2800      	cmp	r0, #0
    1b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b7a:	da05      	bge.n	1b88 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
    1b7c:	b01f      	add	sp, #124	; 0x7c
    1b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1b82:	2220      	movs	r2, #32
					pad = '0';
    1b84:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    1b88:	4659      	mov	r1, fp
    1b8a:	2900      	cmp	r1, #0
    1b8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1b90:	dced      	bgt.n	1b6e <z_cbvprintf_impl+0xb22>
    1b92:	9b04      	ldr	r3, [sp, #16]
    1b94:	f8cd b010 	str.w	fp, [sp, #16]
    1b98:	442b      	add	r3, r5
    1b9a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    1b9c:	f1b9 0f00 	cmp.w	r9, #0
    1ba0:	d005      	beq.n	1bae <z_cbvprintf_impl+0xb62>
			OUTC(sign);
    1ba2:	9903      	ldr	r1, [sp, #12]
    1ba4:	4648      	mov	r0, r9
    1ba6:	47d0      	blx	sl
    1ba8:	2800      	cmp	r0, #0
    1baa:	dbe7      	blt.n	1b7c <z_cbvprintf_impl+0xb30>
    1bac:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1bae:	9b08      	ldr	r3, [sp, #32]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d075      	beq.n	1ca0 <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
    1bb4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    1bb8:	2b00      	cmp	r3, #0
    1bba:	db28      	blt.n	1c0e <z_cbvprintf_impl+0xbc2>
    1bbc:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
    1bbe:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1bc2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1bc6:	2b09      	cmp	r3, #9
    1bc8:	46d9      	mov	r9, fp
    1bca:	f10b 0b01 	add.w	fp, fp, #1
    1bce:	d93f      	bls.n	1c50 <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
    1bd0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1bd4:	1bae      	subs	r6, r5, r6
    1bd6:	0699      	lsls	r1, r3, #26
    1bd8:	444e      	add	r6, r9
    1bda:	d407      	bmi.n	1bec <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
    1bdc:	4642      	mov	r2, r8
    1bde:	2a00      	cmp	r2, #0
    1be0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1be4:	dc39      	bgt.n	1c5a <z_cbvprintf_impl+0xc0e>
    1be6:	9b07      	ldr	r3, [sp, #28]
    1be8:	4433      	add	r3, r6
    1bea:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    1bec:	f899 0000 	ldrb.w	r0, [r9]
    1bf0:	282e      	cmp	r0, #46	; 0x2e
    1bf2:	d10a      	bne.n	1c0a <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
    1bf4:	9903      	ldr	r1, [sp, #12]
    1bf6:	47d0      	blx	sl
						OUTC('0');
    1bf8:	2800      	cmp	r0, #0
    1bfa:	dbbf      	blt.n	1b7c <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
    1bfc:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    1c00:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    1c04:	dc2f      	bgt.n	1c66 <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
    1c06:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    1c0a:	464d      	mov	r5, r9
    1c0c:	e035      	b.n	1c7a <z_cbvprintf_impl+0xc2e>
    1c0e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    1c10:	f899 0000 	ldrb.w	r0, [r9]
    1c14:	2870      	cmp	r0, #112	; 0x70
    1c16:	46c8      	mov	r8, r9
    1c18:	f109 0901 	add.w	r9, r9, #1
    1c1c:	d113      	bne.n	1c46 <z_cbvprintf_impl+0xbfa>
    1c1e:	1bae      	subs	r6, r5, r6
    1c20:	9d14      	ldr	r5, [sp, #80]	; 0x50
    1c22:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    1c24:	4435      	add	r5, r6
    1c26:	1bab      	subs	r3, r5, r6
    1c28:	2b00      	cmp	r3, #0
    1c2a:	dc31      	bgt.n	1c90 <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
    1c2c:	9903      	ldr	r1, [sp, #12]
    1c2e:	463b      	mov	r3, r7
    1c30:	4642      	mov	r2, r8
    1c32:	4650      	mov	r0, sl
    1c34:	f004 fcdf 	bl	65f6 <outs>
    1c38:	2800      	cmp	r0, #0
    1c3a:	db9f      	blt.n	1b7c <z_cbvprintf_impl+0xb30>
    1c3c:	4430      	add	r0, r6
    1c3e:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    1c40:	4605      	mov	r5, r0
    1c42:	4406      	add	r6, r0
    1c44:	e062      	b.n	1d0c <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
    1c46:	9903      	ldr	r1, [sp, #12]
    1c48:	47d0      	blx	sl
    1c4a:	2800      	cmp	r0, #0
    1c4c:	dae0      	bge.n	1c10 <z_cbvprintf_impl+0xbc4>
    1c4e:	e795      	b.n	1b7c <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
    1c50:	9903      	ldr	r1, [sp, #12]
    1c52:	47d0      	blx	sl
    1c54:	2800      	cmp	r0, #0
    1c56:	dab2      	bge.n	1bbe <z_cbvprintf_impl+0xb72>
    1c58:	e790      	b.n	1b7c <z_cbvprintf_impl+0xb30>
						OUTC('0');
    1c5a:	9903      	ldr	r1, [sp, #12]
    1c5c:	2030      	movs	r0, #48	; 0x30
    1c5e:	47d0      	blx	sl
    1c60:	2800      	cmp	r0, #0
    1c62:	dabb      	bge.n	1bdc <z_cbvprintf_impl+0xb90>
    1c64:	e78a      	b.n	1b7c <z_cbvprintf_impl+0xb30>
						OUTC('0');
    1c66:	9903      	ldr	r1, [sp, #12]
    1c68:	2030      	movs	r0, #48	; 0x30
    1c6a:	47d0      	blx	sl
    1c6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1c70:	e7c2      	b.n	1bf8 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
    1c72:	9903      	ldr	r1, [sp, #12]
    1c74:	47d0      	blx	sl
    1c76:	2800      	cmp	r0, #0
    1c78:	db80      	blt.n	1b7c <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp)) {
    1c7a:	7828      	ldrb	r0, [r5, #0]
    1c7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1c80:	2b09      	cmp	r3, #9
    1c82:	46a8      	mov	r8, r5
    1c84:	f105 0501 	add.w	r5, r5, #1
    1c88:	d9f3      	bls.n	1c72 <z_cbvprintf_impl+0xc26>
    1c8a:	eba6 0609 	sub.w	r6, r6, r9
    1c8e:	e7c7      	b.n	1c20 <z_cbvprintf_impl+0xbd4>
				OUTC('0');
    1c90:	9903      	ldr	r1, [sp, #12]
    1c92:	2030      	movs	r0, #48	; 0x30
    1c94:	47d0      	blx	sl
    1c96:	2800      	cmp	r0, #0
    1c98:	f6ff af70 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1c9c:	3601      	adds	r6, #1
    1c9e:	e7c2      	b.n	1c26 <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
    1ca0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1ca4:	06da      	lsls	r2, r3, #27
    1ca6:	d401      	bmi.n	1cac <z_cbvprintf_impl+0xc60>
    1ca8:	071b      	lsls	r3, r3, #28
    1caa:	d506      	bpl.n	1cba <z_cbvprintf_impl+0xc6e>
				OUTC('0');
    1cac:	9903      	ldr	r1, [sp, #12]
    1cae:	2030      	movs	r0, #48	; 0x30
    1cb0:	47d0      	blx	sl
    1cb2:	2800      	cmp	r0, #0
    1cb4:	f6ff af62 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1cb8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1cba:	9b05      	ldr	r3, [sp, #20]
    1cbc:	b13b      	cbz	r3, 1cce <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
    1cbe:	9903      	ldr	r1, [sp, #12]
    1cc0:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    1cc4:	47d0      	blx	sl
    1cc6:	2800      	cmp	r0, #0
    1cc8:	f6ff af58 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1ccc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1cce:	44a8      	add	r8, r5
    1cd0:	e006      	b.n	1ce0 <z_cbvprintf_impl+0xc94>
				OUTC('0');
    1cd2:	9903      	ldr	r1, [sp, #12]
    1cd4:	2030      	movs	r0, #48	; 0x30
    1cd6:	47d0      	blx	sl
    1cd8:	2800      	cmp	r0, #0
    1cda:	f6ff af4f 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1cde:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1ce0:	eba8 0305 	sub.w	r3, r8, r5
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	dcf4      	bgt.n	1cd2 <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
    1ce8:	9903      	ldr	r1, [sp, #12]
    1cea:	463b      	mov	r3, r7
    1cec:	4632      	mov	r2, r6
    1cee:	4650      	mov	r0, sl
    1cf0:	f004 fc81 	bl	65f6 <outs>
    1cf4:	2800      	cmp	r0, #0
    1cf6:	f6ff af41 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1cfa:	4428      	add	r0, r5
    1cfc:	e79f      	b.n	1c3e <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
    1cfe:	9903      	ldr	r1, [sp, #12]
    1d00:	2020      	movs	r0, #32
    1d02:	47d0      	blx	sl
    1d04:	2800      	cmp	r0, #0
    1d06:	f6ff af39 	blt.w	1b7c <z_cbvprintf_impl+0xb30>
    1d0a:	3501      	adds	r5, #1
		while (width > 0) {
    1d0c:	1b73      	subs	r3, r6, r5
    1d0e:	2b00      	cmp	r3, #0
    1d10:	dcf5      	bgt.n	1cfe <z_cbvprintf_impl+0xcb2>
    1d12:	f7ff bbdf 	b.w	14d4 <z_cbvprintf_impl+0x488>
			decexp = 0;
    1d16:	4616      	mov	r6, r2
    1d18:	e6c1      	b.n	1a9e <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
    1d1a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    1d1e:	e6be      	b.n	1a9e <z_cbvprintf_impl+0xa52>
    1d20:	000075ca 	.word	0x000075ca

00001d24 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d24:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d26:	f04f 0220 	mov.w	r2, #32
    1d2a:	f3ef 8311 	mrs	r3, BASEPRI
    1d2e:	f382 8812 	msr	BASEPRI_MAX, r2
    1d32:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d36:	f000 fe21 	bl	297c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d3a:	4803      	ldr	r0, [pc, #12]	; (1d48 <sys_reboot+0x24>)
    1d3c:	f004 faf6 	bl	632c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d40:	f000 fa30 	bl	21a4 <arch_cpu_idle>
    1d44:	e7fc      	b.n	1d40 <sys_reboot+0x1c>
    1d46:	bf00      	nop
    1d48:	000075cb 	.word	0x000075cb

00001d4c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1d4c:	f001 be54 	b.w	39f8 <SystemInit>

00001d50 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d54:	4605      	mov	r5, r0
    1d56:	f04f 0320 	mov.w	r3, #32
    1d5a:	f3ef 8611 	mrs	r6, BASEPRI
    1d5e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d62:	f3bf 8f6f 	isb	sy
	return list->head;
    1d66:	4b0e      	ldr	r3, [pc, #56]	; (1da0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1d68:	4f0e      	ldr	r7, [pc, #56]	; (1da4 <pm_state_notify+0x54>)
    1d6a:	681c      	ldr	r4, [r3, #0]
    1d6c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1da8 <pm_state_notify+0x58>
    1d70:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1d74:	b92c      	cbnz	r4, 1d82 <pm_state_notify+0x32>
	__asm__ volatile(
    1d76:	f386 8811 	msr	BASEPRI, r6
    1d7a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1d82:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1d86:	2d00      	cmp	r5, #0
    1d88:	bf18      	it	ne
    1d8a:	4613      	movne	r3, r2
		if (callback) {
    1d8c:	b12b      	cbz	r3, 1d9a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1d8e:	f898 2014 	ldrb.w	r2, [r8, #20]
    1d92:	fb09 f202 	mul.w	r2, r9, r2
    1d96:	5cb8      	ldrb	r0, [r7, r2]
    1d98:	4798      	blx	r3
	return node->next;
    1d9a:	6824      	ldr	r4, [r4, #0]
    1d9c:	e7ea      	b.n	1d74 <pm_state_notify+0x24>
    1d9e:	bf00      	nop
    1da0:	20000324 	.word	0x20000324
    1da4:	20000318 	.word	0x20000318
    1da8:	200009d0 	.word	0x200009d0

00001dac <pm_system_resume>:

void pm_system_resume(void)
{
    1dac:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1dae:	4b19      	ldr	r3, [pc, #100]	; (1e14 <pm_system_resume+0x68>)
    1db0:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1db2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1db6:	f004 031f 	and.w	r3, r4, #31
    1dba:	2201      	movs	r2, #1
    1dbc:	409a      	lsls	r2, r3
    1dbe:	4b16      	ldr	r3, [pc, #88]	; (1e18 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1dc0:	0961      	lsrs	r1, r4, #5
    1dc2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1dc6:	43d0      	mvns	r0, r2
    1dc8:	e853 1f00 	ldrex	r1, [r3]
    1dcc:	ea01 0500 	and.w	r5, r1, r0
    1dd0:	e843 5600 	strex	r6, r5, [r3]
    1dd4:	2e00      	cmp	r6, #0
    1dd6:	d1f7      	bne.n	1dc8 <pm_system_resume+0x1c>
    1dd8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1ddc:	420a      	tst	r2, r1
    1dde:	d013      	beq.n	1e08 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    1de0:	4b0e      	ldr	r3, [pc, #56]	; (1e1c <pm_system_resume+0x70>)
    1de2:	4d0f      	ldr	r5, [pc, #60]	; (1e20 <pm_system_resume+0x74>)
    1de4:	b18b      	cbz	r3, 1e0a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1de6:	230c      	movs	r3, #12
    1de8:	4363      	muls	r3, r4
    1dea:	18ea      	adds	r2, r5, r3
    1dec:	5ce8      	ldrb	r0, [r5, r3]
    1dee:	7851      	ldrb	r1, [r2, #1]
    1df0:	f004 fc6d 	bl	66ce <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1df4:	2000      	movs	r0, #0
    1df6:	f7ff ffab 	bl	1d50 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1dfa:	230c      	movs	r3, #12
    1dfc:	435c      	muls	r4, r3
    1dfe:	192a      	adds	r2, r5, r4
    1e00:	2300      	movs	r3, #0
    1e02:	512b      	str	r3, [r5, r4]
    1e04:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1e08:	bd70      	pop	{r4, r5, r6, pc}
    1e0a:	f383 8811 	msr	BASEPRI, r3
    1e0e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1e12:	e7ef      	b.n	1df4 <pm_system_resume+0x48>
    1e14:	200009d0 	.word	0x200009d0
    1e18:	2000032c 	.word	0x2000032c
    1e1c:	000066cf 	.word	0x000066cf
    1e20:	20000318 	.word	0x20000318

00001e24 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1e28:	4b35      	ldr	r3, [pc, #212]	; (1f00 <pm_system_suspend+0xdc>)
{
    1e2a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1e2c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    1e2e:	f04f 0320 	mov.w	r3, #32
    1e32:	f3ef 8811 	mrs	r8, BASEPRI
    1e36:	f383 8812 	msr	BASEPRI_MAX, r3
    1e3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1e3e:	240c      	movs	r4, #12
    1e40:	4b30      	ldr	r3, [pc, #192]	; (1f04 <pm_system_suspend+0xe0>)
    1e42:	4e31      	ldr	r6, [pc, #196]	; (1f08 <pm_system_suspend+0xe4>)
    1e44:	436c      	muls	r4, r5
    1e46:	191a      	adds	r2, r3, r4
    1e48:	5d19      	ldrb	r1, [r3, r4]
    1e4a:	2900      	cmp	r1, #0
    1e4c:	d04c      	beq.n	1ee8 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1e4e:	ca07      	ldmia	r2, {r0, r1, r2}
    1e50:	eb06 0c04 	add.w	ip, r6, r4
    1e54:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1e58:	2200      	movs	r2, #0
    1e5a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1e5c:	f388 8811 	msr	BASEPRI, r8
    1e60:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1e64:	230c      	movs	r3, #12
    1e66:	436b      	muls	r3, r5
    1e68:	18f2      	adds	r2, r6, r3
    1e6a:	5cf0      	ldrb	r0, [r6, r3]
    1e6c:	2800      	cmp	r0, #0
    1e6e:	d039      	beq.n	1ee4 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1e70:	1c7b      	adds	r3, r7, #1
    1e72:	d010      	beq.n	1e96 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1e74:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1e78:	4c24      	ldr	r4, [pc, #144]	; (1f0c <pm_system_suspend+0xe8>)
    1e7a:	4a25      	ldr	r2, [pc, #148]	; (1f10 <pm_system_suspend+0xec>)
    1e7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1e80:	2100      	movs	r1, #0
    1e82:	fbec 4100 	umlal	r4, r1, ip, r0
    1e86:	2300      	movs	r3, #0
    1e88:	4620      	mov	r0, r4
    1e8a:	f7fe fd53 	bl	934 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1e8e:	2101      	movs	r1, #1
    1e90:	1a38      	subs	r0, r7, r0
    1e92:	f005 f884 	bl	6f9e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1e96:	f003 facd 	bl	5434 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1e9a:	2001      	movs	r0, #1
    1e9c:	f7ff ff58 	bl	1d50 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ea0:	f3bf 8f5b 	dmb	ish
    1ea4:	4b1b      	ldr	r3, [pc, #108]	; (1f14 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1ea6:	096a      	lsrs	r2, r5, #5
    1ea8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1eac:	f005 011f 	and.w	r1, r5, #31
    1eb0:	2201      	movs	r2, #1
    1eb2:	408a      	lsls	r2, r1
    1eb4:	e853 0f00 	ldrex	r0, [r3]
    1eb8:	4310      	orrs	r0, r2
    1eba:	e843 0100 	strex	r1, r0, [r3]
    1ebe:	2900      	cmp	r1, #0
    1ec0:	d1f8      	bne.n	1eb4 <pm_system_suspend+0x90>
    1ec2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1ec6:	4b14      	ldr	r3, [pc, #80]	; (1f18 <pm_system_suspend+0xf4>)
    1ec8:	b13b      	cbz	r3, 1eda <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    1eca:	230c      	movs	r3, #12
    1ecc:	fb03 f005 	mul.w	r0, r3, r5
    1ed0:	1833      	adds	r3, r6, r0
    1ed2:	5c30      	ldrb	r0, [r6, r0]
    1ed4:	7859      	ldrb	r1, [r3, #1]
    1ed6:	f004 fbee 	bl	66b6 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1eda:	f7ff ff67 	bl	1dac <pm_system_resume>
	k_sched_unlock();
    1ede:	f003 fabd 	bl	545c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1ee2:	2001      	movs	r0, #1
}
    1ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1ee8:	4601      	mov	r1, r0
    1eea:	4628      	mov	r0, r5
    1eec:	f000 f816 	bl	1f1c <pm_policy_next_state>
		if (info != NULL) {
    1ef0:	2800      	cmp	r0, #0
    1ef2:	d0b3      	beq.n	1e5c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1ef4:	c807      	ldmia	r0, {r0, r1, r2}
    1ef6:	4434      	add	r4, r6
    1ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1efc:	e7ae      	b.n	1e5c <pm_system_suspend+0x38>
    1efe:	bf00      	nop
    1f00:	200009d0 	.word	0x200009d0
    1f04:	2000030c 	.word	0x2000030c
    1f08:	20000318 	.word	0x20000318
    1f0c:	000f423f 	.word	0x000f423f
    1f10:	000f4240 	.word	0x000f4240
    1f14:	2000032c 	.word	0x2000032c
    1f18:	000066b7 	.word	0x000066b7

00001f1c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f20:	b085      	sub	sp, #20
    1f22:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1f24:	a903      	add	r1, sp, #12
    1f26:	f000 f843 	bl	1fb0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1f2a:	4b1e      	ldr	r3, [pc, #120]	; (1fa4 <pm_policy_next_state+0x88>)
    1f2c:	9d03      	ldr	r5, [sp, #12]
    1f2e:	f8d3 a000 	ldr.w	sl, [r3]
    1f32:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1fa8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1f36:	1e43      	subs	r3, r0, #1
    1f38:	b21b      	sxth	r3, r3
    1f3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1f3e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1f40:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1f44:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1f48:	f04f 0b00 	mov.w	fp, #0
    1f4c:	b924      	cbnz	r4, 1f58 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1f4e:	46a1      	mov	r9, r4
}
    1f50:	4648      	mov	r0, r9
    1f52:	b005      	add	sp, #20
    1f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f58:	6868      	ldr	r0, [r5, #4]
    1f5a:	4a14      	ldr	r2, [pc, #80]	; (1fac <pm_policy_next_state+0x90>)
    1f5c:	46c4      	mov	ip, r8
    1f5e:	4659      	mov	r1, fp
    1f60:	fbe0 c107 	umlal	ip, r1, r0, r7
    1f64:	2300      	movs	r3, #0
    1f66:	4660      	mov	r0, ip
    1f68:	f7fe fce4 	bl	934 <__aeabi_uldivmod>
    1f6c:	9001      	str	r0, [sp, #4]
    1f6e:	68a8      	ldr	r0, [r5, #8]
    1f70:	4a0e      	ldr	r2, [pc, #56]	; (1fac <pm_policy_next_state+0x90>)
    1f72:	46c4      	mov	ip, r8
    1f74:	4659      	mov	r1, fp
    1f76:	fbe0 c107 	umlal	ip, r1, r0, r7
    1f7a:	2300      	movs	r3, #0
    1f7c:	4660      	mov	r0, ip
    1f7e:	f7fe fcd9 	bl	934 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1f82:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    1f86:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1f88:	d001      	beq.n	1f8e <pm_policy_next_state+0x72>
    1f8a:	4582      	cmp	sl, r0
    1f8c:	d905      	bls.n	1f9a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1f8e:	1c73      	adds	r3, r6, #1
    1f90:	d0de      	beq.n	1f50 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    1f92:	9b01      	ldr	r3, [sp, #4]
    1f94:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1f96:	42b0      	cmp	r0, r6
    1f98:	d9da      	bls.n	1f50 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1f9a:	3c01      	subs	r4, #1
    1f9c:	b2a4      	uxth	r4, r4
    1f9e:	3d0c      	subs	r5, #12
    1fa0:	e7d4      	b.n	1f4c <pm_policy_next_state+0x30>
    1fa2:	bf00      	nop
    1fa4:	20000004 	.word	0x20000004
    1fa8:	000f423f 	.word	0x000f423f
    1fac:	000f4240 	.word	0x000f4240

00001fb0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1fb0:	b908      	cbnz	r0, 1fb6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1fb2:	4b02      	ldr	r3, [pc, #8]	; (1fbc <pm_state_cpu_get_all+0xc>)
    1fb4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1fb6:	2000      	movs	r0, #0
    1fb8:	4770      	bx	lr
    1fba:	bf00      	nop
    1fbc:	00007308 	.word	0x00007308

00001fc0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1fc0:	4801      	ldr	r0, [pc, #4]	; (1fc8 <nrf_cc3xx_platform_abort_init+0x8>)
    1fc2:	f003 bd1d 	b.w	5a00 <nrf_cc3xx_platform_set_abort>
    1fc6:	bf00      	nop
    1fc8:	00007308 	.word	0x00007308

00001fcc <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fcc:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1fce:	4604      	mov	r4, r0
    1fd0:	b918      	cbnz	r0, 1fda <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1fd2:	4b0f      	ldr	r3, [pc, #60]	; (2010 <mutex_free_platform+0x44>)
    1fd4:	480f      	ldr	r0, [pc, #60]	; (2014 <mutex_free_platform+0x48>)
    1fd6:	685b      	ldr	r3, [r3, #4]
    1fd8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1fda:	6861      	ldr	r1, [r4, #4]
    1fdc:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1fe0:	d00f      	beq.n	2002 <mutex_free_platform+0x36>
    1fe2:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    1fe6:	d00c      	beq.n	2002 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fe8:	4d0b      	ldr	r5, [pc, #44]	; (2018 <mutex_free_platform+0x4c>)
    1fea:	42a9      	cmp	r1, r5
    1fec:	d009      	beq.n	2002 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1fee:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1ff2:	d007      	beq.n	2004 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ff4:	4809      	ldr	r0, [pc, #36]	; (201c <mutex_free_platform+0x50>)
    1ff6:	4621      	mov	r1, r4
    1ff8:	f004 fec8 	bl	6d8c <k_mem_slab_free>
        mutex->mutex = NULL;
    1ffc:	2300      	movs	r3, #0
    1ffe:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2000:	6065      	str	r5, [r4, #4]
}
    2002:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2004:	6820      	ldr	r0, [r4, #0]
    2006:	2214      	movs	r2, #20
    2008:	f004 fb47 	bl	669a <memset>
    200c:	e7f8      	b.n	2000 <mutex_free_platform+0x34>
    200e:	bf00      	nop
    2010:	20000118 	.word	0x20000118
    2014:	000075f7 	.word	0x000075f7
    2018:	a95c5f2c 	.word	0xa95c5f2c
    201c:	20000830 	.word	0x20000830

00002020 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2020:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2022:	b320      	cbz	r0, 206e <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2024:	6843      	ldr	r3, [r0, #4]
    2026:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    202a:	d110      	bne.n	204e <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    202c:	2201      	movs	r2, #1
    202e:	6803      	ldr	r3, [r0, #0]
    2030:	f3bf 8f5b 	dmb	ish
    2034:	e853 1f00 	ldrex	r1, [r3]
    2038:	2900      	cmp	r1, #0
    203a:	d103      	bne.n	2044 <mutex_lock_platform+0x24>
    203c:	e843 2000 	strex	r0, r2, [r3]
    2040:	2800      	cmp	r0, #0
    2042:	d1f7      	bne.n	2034 <mutex_lock_platform+0x14>
    2044:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2048:	d10d      	bne.n	2066 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    204a:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    204c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    204e:	4a09      	ldr	r2, [pc, #36]	; (2074 <mutex_lock_platform+0x54>)
    2050:	4293      	cmp	r3, r2
    2052:	d00a      	beq.n	206a <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2054:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    205e:	f002 fee1 	bl	4e24 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2062:	2800      	cmp	r0, #0
    2064:	d0f1      	beq.n	204a <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2066:	4804      	ldr	r0, [pc, #16]	; (2078 <mutex_lock_platform+0x58>)
    2068:	e7f0      	b.n	204c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    206a:	4804      	ldr	r0, [pc, #16]	; (207c <mutex_lock_platform+0x5c>)
    206c:	e7ee      	b.n	204c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    206e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2072:	e7eb      	b.n	204c <mutex_lock_platform+0x2c>
    2074:	a95c5f2c 	.word	0xa95c5f2c
    2078:	ffff8fe9 	.word	0xffff8fe9
    207c:	ffff8fea 	.word	0xffff8fea

00002080 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2080:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2082:	b1d8      	cbz	r0, 20bc <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2084:	6843      	ldr	r3, [r0, #4]
    2086:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    208a:	d110      	bne.n	20ae <mutex_unlock_platform+0x2e>
    208c:	2200      	movs	r2, #0
    208e:	6803      	ldr	r3, [r0, #0]
    2090:	f3bf 8f5b 	dmb	ish
    2094:	e853 1f00 	ldrex	r1, [r3]
    2098:	2901      	cmp	r1, #1
    209a:	d103      	bne.n	20a4 <mutex_unlock_platform+0x24>
    209c:	e843 2000 	strex	r0, r2, [r3]
    20a0:	2800      	cmp	r0, #0
    20a2:	d1f7      	bne.n	2094 <mutex_unlock_platform+0x14>
    20a4:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20a8:	d10b      	bne.n	20c2 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    20aa:	2000      	movs	r0, #0
    }
}
    20ac:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    20ae:	4a07      	ldr	r2, [pc, #28]	; (20cc <mutex_unlock_platform+0x4c>)
    20b0:	4293      	cmp	r3, r2
    20b2:	d008      	beq.n	20c6 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    20b4:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    20b6:	f002 ff2f 	bl	4f18 <z_impl_k_mutex_unlock>
    20ba:	e7f6      	b.n	20aa <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    20bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    20c0:	e7f4      	b.n	20ac <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20c2:	4803      	ldr	r0, [pc, #12]	; (20d0 <mutex_unlock_platform+0x50>)
    20c4:	e7f2      	b.n	20ac <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    20c6:	4803      	ldr	r0, [pc, #12]	; (20d4 <mutex_unlock_platform+0x54>)
    20c8:	e7f0      	b.n	20ac <mutex_unlock_platform+0x2c>
    20ca:	bf00      	nop
    20cc:	a95c5f2c 	.word	0xa95c5f2c
    20d0:	ffff8fe9 	.word	0xffff8fe9
    20d4:	ffff8fea 	.word	0xffff8fea

000020d8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    20d8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    20da:	4604      	mov	r4, r0
    20dc:	b918      	cbnz	r0, 20e6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    20de:	4b1d      	ldr	r3, [pc, #116]	; (2154 <mutex_init_platform+0x7c>)
    20e0:	481d      	ldr	r0, [pc, #116]	; (2158 <mutex_init_platform+0x80>)
    20e2:	685b      	ldr	r3, [r3, #4]
    20e4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    20e6:	6863      	ldr	r3, [r4, #4]
    20e8:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    20ec:	d02f      	beq.n	214e <mutex_init_platform+0x76>
    20ee:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    20f2:	d02c      	beq.n	214e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    20f4:	4a19      	ldr	r2, [pc, #100]	; (215c <mutex_init_platform+0x84>)
    20f6:	4293      	cmp	r3, r2
    20f8:	d119      	bne.n	212e <mutex_init_platform+0x56>
    20fa:	6823      	ldr	r3, [r4, #0]
    20fc:	bb03      	cbnz	r3, 2140 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    20fe:	4818      	ldr	r0, [pc, #96]	; (2160 <mutex_init_platform+0x88>)
    2100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2108:	4621      	mov	r1, r4
    210a:	f002 fdb3 	bl	4c74 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    210e:	b908      	cbnz	r0, 2114 <mutex_init_platform+0x3c>
    2110:	6823      	ldr	r3, [r4, #0]
    2112:	b91b      	cbnz	r3, 211c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    2114:	4b0f      	ldr	r3, [pc, #60]	; (2154 <mutex_init_platform+0x7c>)
    2116:	4813      	ldr	r0, [pc, #76]	; (2164 <mutex_init_platform+0x8c>)
    2118:	685b      	ldr	r3, [r3, #4]
    211a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    211c:	6820      	ldr	r0, [r4, #0]
    211e:	2214      	movs	r2, #20
    2120:	2100      	movs	r1, #0
    2122:	f004 faba 	bl	669a <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2126:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    212a:	6063      	str	r3, [r4, #4]
    212c:	e008      	b.n	2140 <mutex_init_platform+0x68>
    switch(flags){
    212e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2132:	d80d      	bhi.n	2150 <mutex_init_platform+0x78>
    2134:	2b3a      	cmp	r3, #58	; 0x3a
    2136:	d003      	beq.n	2140 <mutex_init_platform+0x68>
    2138:	f640 62ba 	movw	r2, #3770	; 0xeba
    213c:	4293      	cmp	r3, r2
    213e:	d1de      	bne.n	20fe <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2140:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2142:	f004 fe61 	bl	6e08 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2146:	6863      	ldr	r3, [r4, #4]
    2148:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    214c:	6063      	str	r3, [r4, #4]
}
    214e:	bd10      	pop	{r4, pc}
    switch(flags){
    2150:	4a05      	ldr	r2, [pc, #20]	; (2168 <mutex_init_platform+0x90>)
    2152:	e7f3      	b.n	213c <mutex_init_platform+0x64>
    2154:	20000118 	.word	0x20000118
    2158:	000075f7 	.word	0x000075f7
    215c:	a95c5f2c 	.word	0xa95c5f2c
    2160:	20000830 	.word	0x20000830
    2164:	0000761d 	.word	0x0000761d
    2168:	3a00003a 	.word	0x3a00003a

0000216c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    216c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    216e:	4906      	ldr	r1, [pc, #24]	; (2188 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2170:	4806      	ldr	r0, [pc, #24]	; (218c <nrf_cc3xx_platform_mutex_init+0x20>)
    2172:	2340      	movs	r3, #64	; 0x40
    2174:	2214      	movs	r2, #20
    2176:	f004 fdfb 	bl	6d70 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    217a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    217e:	4904      	ldr	r1, [pc, #16]	; (2190 <nrf_cc3xx_platform_mutex_init+0x24>)
    2180:	4804      	ldr	r0, [pc, #16]	; (2194 <nrf_cc3xx_platform_mutex_init+0x28>)
    2182:	f003 bcaf 	b.w	5ae4 <nrf_cc3xx_platform_set_mutexes>
    2186:	bf00      	nop
    2188:	20000330 	.word	0x20000330
    218c:	20000830 	.word	0x20000830
    2190:	00007310 	.word	0x00007310
    2194:	00007324 	.word	0x00007324

00002198 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2198:	4901      	ldr	r1, [pc, #4]	; (21a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    219a:	2210      	movs	r2, #16
	str	r2, [r1]
    219c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    219e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    21a0:	e000ed10 	.word	0xe000ed10

000021a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    21a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    21a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    21a8:	f380 8811 	msr	BASEPRI, r0
	isb
    21ac:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    21b0:	f3bf 8f4f 	dsb	sy
    21b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    21b6:	b662      	cpsie	i
	isb
    21b8:	f3bf 8f6f 	isb	sy

	bx	lr
    21bc:	4770      	bx	lr
    21be:	bf00      	nop

000021c0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    21c0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    21c2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    21c4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    21c8:	f3bf 8f4f 	dsb	sy
    21cc:	bf20      	wfe

	msr	BASEPRI, r0
    21ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    21d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop

000021d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    21d8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    21da:	2800      	cmp	r0, #0
    21dc:	db07      	blt.n	21ee <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21de:	4a04      	ldr	r2, [pc, #16]	; (21f0 <arch_irq_enable+0x18>)
    21e0:	0941      	lsrs	r1, r0, #5
    21e2:	2301      	movs	r3, #1
    21e4:	f000 001f 	and.w	r0, r0, #31
    21e8:	4083      	lsls	r3, r0
    21ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    21ee:	4770      	bx	lr
    21f0:	e000e100 	.word	0xe000e100

000021f4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    21f4:	4b05      	ldr	r3, [pc, #20]	; (220c <arch_irq_is_enabled+0x18>)
    21f6:	0942      	lsrs	r2, r0, #5
    21f8:	f000 001f 	and.w	r0, r0, #31
    21fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2200:	2301      	movs	r3, #1
    2202:	fa03 f000 	lsl.w	r0, r3, r0
}
    2206:	4010      	ands	r0, r2
    2208:	4770      	bx	lr
    220a:	bf00      	nop
    220c:	e000e100 	.word	0xe000e100

00002210 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2210:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2212:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2214:	bfa8      	it	ge
    2216:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    221a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    221e:	bfb8      	it	lt
    2220:	4b06      	ldrlt	r3, [pc, #24]	; (223c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2222:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2226:	bfac      	ite	ge
    2228:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    222c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2230:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2232:	bfb4      	ite	lt
    2234:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2236:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    223a:	4770      	bx	lr
    223c:	e000ed14 	.word	0xe000ed14

00002240 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2240:	bf30      	wfi
    b z_SysNmiOnReset
    2242:	f7ff bffd 	b.w	2240 <z_SysNmiOnReset>
    2246:	bf00      	nop

00002248 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2248:	4a0b      	ldr	r2, [pc, #44]	; (2278 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    224a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    224c:	4b0b      	ldr	r3, [pc, #44]	; (227c <z_arm_prep_c+0x34>)
    224e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2252:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2258:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    225c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2260:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2268:	f002 fc40 	bl	4aec <z_bss_zero>
	z_data_copy();
    226c:	f003 fa20 	bl	56b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2270:	f000 f9d6 	bl	2620 <z_arm_interrupt_init>
	z_cstart();
    2274:	f002 fc7e 	bl	4b74 <z_cstart>
    2278:	00000000 	.word	0x00000000
    227c:	e000ed00 	.word	0xe000ed00

00002280 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2280:	4a09      	ldr	r2, [pc, #36]	; (22a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2282:	490a      	ldr	r1, [pc, #40]	; (22ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2284:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2286:	6809      	ldr	r1, [r1, #0]
    2288:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    228a:	4909      	ldr	r1, [pc, #36]	; (22b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    228c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    228e:	684b      	ldr	r3, [r1, #4]
    2290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2294:	604b      	str	r3, [r1, #4]
    2296:	2300      	movs	r3, #0
    2298:	f383 8811 	msr	BASEPRI, r3
    229c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    22a0:	6893      	ldr	r3, [r2, #8]
}
    22a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    22a4:	4770      	bx	lr
    22a6:	bf00      	nop
    22a8:	200009d0 	.word	0x200009d0
    22ac:	000074a0 	.word	0x000074a0
    22b0:	e000ed00 	.word	0xe000ed00

000022b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    22b4:	4912      	ldr	r1, [pc, #72]	; (2300 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    22b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    22b8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    22bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    22be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    22c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    22c6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    22c8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    22cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    22d0:	4f0c      	ldr	r7, [pc, #48]	; (2304 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    22d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    22d6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    22d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    22da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    22dc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    22de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    22e0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    22e2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    22e6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    22e8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    22ea:	f000 fa35 	bl	2758 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    22ee:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    22f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    22f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    22fa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    22fe:	4770      	bx	lr
    ldr r1, =_kernel
    2300:	200009d0 	.word	0x200009d0
    ldr v4, =_SCS_ICSR
    2304:	e000ed04 	.word	0xe000ed04

00002308 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2308:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    230c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    230e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2312:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2316:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2318:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    231c:	2902      	cmp	r1, #2
    beq _oops
    231e:	d0ff      	beq.n	2320 <_oops>

00002320 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2320:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2322:	f004 f986 	bl	6632 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2326:	bd01      	pop	{r0, pc}

00002328 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2328:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    232c:	9b00      	ldr	r3, [sp, #0]
    232e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2332:	490a      	ldr	r1, [pc, #40]	; (235c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2334:	9b01      	ldr	r3, [sp, #4]
    2336:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    233a:	9b02      	ldr	r3, [sp, #8]
    233c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2340:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2348:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    234c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2350:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2352:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2354:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2356:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2358:	4770      	bx	lr
    235a:	bf00      	nop
    235c:	00006347 	.word	0x00006347

00002360 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2360:	4a09      	ldr	r2, [pc, #36]	; (2388 <z_check_thread_stack_fail+0x28>)
{
    2362:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2364:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2366:	b170      	cbz	r0, 2386 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2368:	f113 0f16 	cmn.w	r3, #22
    236c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    236e:	d005      	beq.n	237c <z_check_thread_stack_fail+0x1c>
    2370:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    2374:	429a      	cmp	r2, r3
    2376:	d805      	bhi.n	2384 <z_check_thread_stack_fail+0x24>
    2378:	4283      	cmp	r3, r0
    237a:	d203      	bcs.n	2384 <z_check_thread_stack_fail+0x24>
		return 0;
    237c:	4281      	cmp	r1, r0
    237e:	bf28      	it	cs
    2380:	2000      	movcs	r0, #0
    2382:	4770      	bx	lr
    2384:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    2386:	4770      	bx	lr
    2388:	200009d0 	.word	0x200009d0

0000238c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    238c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    238e:	4b09      	ldr	r3, [pc, #36]	; (23b4 <arch_switch_to_main_thread+0x28>)
    2390:	6098      	str	r0, [r3, #8]
{
    2392:	460d      	mov	r5, r1
    2394:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2396:	f000 f9df 	bl	2758 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    239a:	4620      	mov	r0, r4
    239c:	f385 8809 	msr	PSP, r5
    23a0:	2100      	movs	r1, #0
    23a2:	b663      	cpsie	if
    23a4:	f381 8811 	msr	BASEPRI, r1
    23a8:	f3bf 8f6f 	isb	sy
    23ac:	2200      	movs	r2, #0
    23ae:	2300      	movs	r3, #0
    23b0:	f003 ffc9 	bl	6346 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    23b4:	200009d0 	.word	0x200009d0

000023b8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    23b8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    23ba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    23bc:	4a0b      	ldr	r2, [pc, #44]	; (23ec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    23be:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    23c0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    23c2:	bf1e      	ittt	ne
	movne	r1, #0
    23c4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    23c6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    23c8:	f004 fd0f 	blne	6dea <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    23cc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    23ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    23d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    23d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    23da:	4905      	ldr	r1, [pc, #20]	; (23f0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    23dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    23de:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    23e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    23e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    23e6:	4903      	ldr	r1, [pc, #12]	; (23f4 <_isr_wrapper+0x3c>)
	bx r1
    23e8:	4708      	bx	r1
    23ea:	0000      	.short	0x0000
	ldr r2, =_kernel
    23ec:	200009d0 	.word	0x200009d0
	ldr r1, =_sw_isr_table
    23f0:	000070e8 	.word	0x000070e8
	ldr r1, =z_arm_int_exit
    23f4:	000023f9 	.word	0x000023f9

000023f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    23f8:	4b04      	ldr	r3, [pc, #16]	; (240c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    23fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    23fc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    23fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2400:	d003      	beq.n	240a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2402:	4903      	ldr	r1, [pc, #12]	; (2410 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2408:	600a      	str	r2, [r1, #0]

0000240a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    240a:	4770      	bx	lr
	ldr r3, =_kernel
    240c:	200009d0 	.word	0x200009d0
	ldr r1, =_SCS_ICSR
    2410:	e000ed04 	.word	0xe000ed04

00002414 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2414:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2416:	4b1d      	ldr	r3, [pc, #116]	; (248c <mem_manage_fault+0x78>)
{
    2418:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    241a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    241c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    241e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2420:	0792      	lsls	r2, r2, #30
{
    2422:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2424:	d522      	bpl.n	246c <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2426:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    242a:	0614      	lsls	r4, r2, #24
    242c:	d51e      	bpl.n	246c <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    242e:	b119      	cbz	r1, 2438 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2436:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    243a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    243c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    243e:	4c13      	ldr	r4, [pc, #76]	; (248c <mem_manage_fault+0x78>)
    2440:	f012 0f10 	tst.w	r2, #16
    2444:	d115      	bne.n	2472 <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2448:	0799      	lsls	r1, r3, #30
    244a:	d412      	bmi.n	2472 <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    244c:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    244e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2450:	4a0e      	ldr	r2, [pc, #56]	; (248c <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2452:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2454:	bf42      	ittt	mi
    2456:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    2458:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    245c:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    245e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2460:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2464:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2466:	2300      	movs	r3, #0
    2468:	702b      	strb	r3, [r5, #0]

	return reason;
}
    246a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    246c:	f06f 0015 	mvn.w	r0, #21
    2470:	e7e2      	b.n	2438 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2472:	6863      	ldr	r3, [r4, #4]
    2474:	051a      	lsls	r2, r3, #20
    2476:	d5e9      	bpl.n	244c <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2478:	4631      	mov	r1, r6
    247a:	f7ff ff71 	bl	2360 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    247e:	2800      	cmp	r0, #0
    2480:	d0e4      	beq.n	244c <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2482:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2486:	2002      	movs	r0, #2
    2488:	e7e1      	b.n	244e <mem_manage_fault+0x3a>
    248a:	bf00      	nop
    248c:	e000ed00 	.word	0xe000ed00

00002490 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2490:	4b0d      	ldr	r3, [pc, #52]	; (24c8 <bus_fault.constprop.0+0x38>)
    2492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2498:	0592      	lsls	r2, r2, #22
    249a:	d508      	bpl.n	24ae <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    249e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24a0:	0412      	lsls	r2, r2, #16
    24a2:	d504      	bpl.n	24ae <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    24a4:	b118      	cbz	r0, 24ae <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    24a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    24ac:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    24ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    24b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24b2:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    24b4:	4a04      	ldr	r2, [pc, #16]	; (24c8 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    24b6:	bf58      	it	pl
    24b8:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    24ba:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    24bc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    24be:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    24c2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    24c4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    24c6:	4770      	bx	lr
    24c8:	e000ed00 	.word	0xe000ed00

000024cc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    24cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    24ce:	4b4a      	ldr	r3, [pc, #296]	; (25f8 <z_arm_fault+0x12c>)
    24d0:	685b      	ldr	r3, [r3, #4]
{
    24d2:	b08a      	sub	sp, #40	; 0x28
    24d4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    24d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    24da:	2600      	movs	r6, #0
    24dc:	f386 8811 	msr	BASEPRI, r6
    24e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    24e4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    24e8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    24ec:	d111      	bne.n	2512 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    24ee:	f002 000c 	and.w	r0, r2, #12
    24f2:	2808      	cmp	r0, #8
    24f4:	d00d      	beq.n	2512 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    24f6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    24f8:	bf4c      	ite	mi
    24fa:	460d      	movmi	r5, r1
			*nested_exc = true;
    24fc:	2601      	movpl	r6, #1
	*recoverable = false;
    24fe:	2200      	movs	r2, #0
	switch (fault) {
    2500:	3b03      	subs	r3, #3
	*recoverable = false;
    2502:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2506:	2b03      	cmp	r3, #3
    2508:	d84d      	bhi.n	25a6 <z_arm_fault+0xda>
    250a:	e8df f003 	tbb	[pc, r3]
    250e:	6504      	.short	0x6504
    2510:	6d69      	.short	0x6d69
		return NULL;
    2512:	4635      	mov	r5, r6
    2514:	e7f3      	b.n	24fe <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2516:	4b38      	ldr	r3, [pc, #224]	; (25f8 <z_arm_fault+0x12c>)
    2518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    251a:	0791      	lsls	r1, r2, #30
    251c:	d443      	bmi.n	25a6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    251e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2520:	2a00      	cmp	r2, #0
    2522:	db40      	blt.n	25a6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2526:	0052      	lsls	r2, r2, #1
    2528:	d53d      	bpl.n	25a6 <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    252a:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    252c:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    252e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    2532:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2534:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2538:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    253c:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    253e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2546:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    254c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2550:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2554:	4291      	cmp	r1, r2
    2556:	d009      	beq.n	256c <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    255a:	b2d2      	uxtb	r2, r2
    255c:	b142      	cbz	r2, 2570 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    255e:	f10d 0207 	add.w	r2, sp, #7
    2562:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2564:	4628      	mov	r0, r5
    2566:	f7ff ff55 	bl	2414 <mem_manage_fault>
    256a:	e00a      	b.n	2582 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    256c:	682c      	ldr	r4, [r5, #0]
    256e:	e01b      	b.n	25a8 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2572:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    2576:	d006      	beq.n	2586 <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    2578:	f10d 0107 	add.w	r1, sp, #7
    257c:	2001      	movs	r0, #1
    257e:	f7ff ff87 	bl	2490 <bus_fault.constprop.0>
    2582:	4604      	mov	r4, r0
    2584:	e010      	b.n	25a8 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2588:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    258c:	d30b      	bcc.n	25a6 <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    258e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    259a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    259c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    25a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    25a4:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    25a6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    25a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    25ac:	b993      	cbnz	r3, 25d4 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    25ae:	2220      	movs	r2, #32
    25b0:	4629      	mov	r1, r5
    25b2:	a802      	add	r0, sp, #8
    25b4:	f004 f866 	bl	6684 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    25b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ba:	b1be      	cbz	r6, 25ec <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    25bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    25c0:	b922      	cbnz	r2, 25cc <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    25c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    25c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    25ca:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    25cc:	a902      	add	r1, sp, #8
    25ce:	4620      	mov	r0, r4
    25d0:	f004 f82d 	bl	662e <z_arm_fatal_error>
}
    25d4:	b00a      	add	sp, #40	; 0x28
    25d6:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    25d8:	f10d 0207 	add.w	r2, sp, #7
    25dc:	2100      	movs	r1, #0
    25de:	e7c1      	b.n	2564 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    25e0:	f10d 0107 	add.w	r1, sp, #7
    25e4:	2000      	movs	r0, #0
    25e6:	e7ca      	b.n	257e <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25e8:	4b03      	ldr	r3, [pc, #12]	; (25f8 <z_arm_fault+0x12c>)
    25ea:	e7d0      	b.n	258e <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    25ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    25f0:	f023 0301 	bic.w	r3, r3, #1
    25f4:	e7e9      	b.n	25ca <z_arm_fault+0xfe>
    25f6:	bf00      	nop
    25f8:	e000ed00 	.word	0xe000ed00

000025fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    25fc:	4a02      	ldr	r2, [pc, #8]	; (2608 <z_arm_fault_init+0xc>)
    25fe:	6953      	ldr	r3, [r2, #20]
    2600:	f043 0310 	orr.w	r3, r3, #16
    2604:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2606:	4770      	bx	lr
    2608:	e000ed00 	.word	0xe000ed00

0000260c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    260c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2610:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2614:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2616:	4672      	mov	r2, lr
	bl z_arm_fault
    2618:	f7ff ff58 	bl	24cc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    261c:	bd01      	pop	{r0, pc}
    261e:	bf00      	nop

00002620 <z_arm_interrupt_init>:
    2620:	4804      	ldr	r0, [pc, #16]	; (2634 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2622:	2300      	movs	r3, #0
    2624:	2120      	movs	r1, #32
    2626:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2628:	3301      	adds	r3, #1
    262a:	2b30      	cmp	r3, #48	; 0x30
    262c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2630:	d1f9      	bne.n	2626 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2632:	4770      	bx	lr
    2634:	e000e100 	.word	0xe000e100

00002638 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2638:	2000      	movs	r0, #0
    msr CONTROL, r0
    263a:	f380 8814 	msr	CONTROL, r0
    isb
    263e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2642:	f7ff fb83 	bl	1d4c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2646:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2648:	490d      	ldr	r1, [pc, #52]	; (2680 <__start+0x48>)
    str r0, [r1]
    264a:	6008      	str	r0, [r1, #0]
    dsb
    264c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2650:	480c      	ldr	r0, [pc, #48]	; (2684 <__start+0x4c>)
    msr msp, r0
    2652:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2656:	f000 f82b 	bl	26b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    265a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    265c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2660:	4809      	ldr	r0, [pc, #36]	; (2688 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2662:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    2666:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2668:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    266c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2670:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2672:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2674:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2678:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    267c:	f7ff fde4 	bl	2248 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2680:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2684:	20001dc0 	.word	0x20001dc0
    ldr r0, =z_interrupt_stacks
    2688:	20001000 	.word	0x20001000

0000268c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    268c:	4907      	ldr	r1, [pc, #28]	; (26ac <z_arm_clear_arm_mpu_config+0x20>)
    268e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2692:	2300      	movs	r3, #0
	int num_regions =
    2694:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2698:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    269a:	4293      	cmp	r3, r2
    269c:	db00      	blt.n	26a0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    269e:	4770      	bx	lr
  MPU->RNR = rnr;
    26a0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    26a4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    26a8:	3301      	adds	r3, #1
    26aa:	e7f6      	b.n	269a <z_arm_clear_arm_mpu_config+0xe>
    26ac:	e000ed00 	.word	0xe000ed00

000026b0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    26b0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    26b2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    26b4:	2300      	movs	r3, #0
    26b6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    26ba:	f7ff ffe7 	bl	268c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    26be:	4b14      	ldr	r3, [pc, #80]	; (2710 <z_arm_init_arch_hw_at_boot+0x60>)
    26c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    26c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    26c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    26cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    26d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    26d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    26d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    26dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    26e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    26e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    26e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    26ec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    26f0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    26f4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    26f8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    26fc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2700:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2704:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2706:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    270a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    270e:	bd08      	pop	{r3, pc}
    2710:	e000e100 	.word	0xe000e100

00002714 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2714:	4b08      	ldr	r3, [pc, #32]	; (2738 <z_impl_k_thread_abort+0x24>)
    2716:	689b      	ldr	r3, [r3, #8]
    2718:	4283      	cmp	r3, r0
    271a:	d10b      	bne.n	2734 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    271c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2720:	b143      	cbz	r3, 2734 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2722:	4b06      	ldr	r3, [pc, #24]	; (273c <z_impl_k_thread_abort+0x28>)
    2724:	685a      	ldr	r2, [r3, #4]
    2726:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    272a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    272c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    272e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2732:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2734:	f002 bf5c 	b.w	55f0 <z_thread_abort>
    2738:	200009d0 	.word	0x200009d0
    273c:	e000ed00 	.word	0xe000ed00

00002740 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2740:	4b02      	ldr	r3, [pc, #8]	; (274c <z_arm_configure_static_mpu_regions+0xc>)
    2742:	4a03      	ldr	r2, [pc, #12]	; (2750 <z_arm_configure_static_mpu_regions+0x10>)
    2744:	4803      	ldr	r0, [pc, #12]	; (2754 <z_arm_configure_static_mpu_regions+0x14>)
    2746:	2101      	movs	r1, #1
    2748:	f000 b870 	b.w	282c <arm_core_mpu_configure_static_mpu_regions>
    274c:	20040000 	.word	0x20040000
    2750:	20000000 	.word	0x20000000
    2754:	00007334 	.word	0x00007334

00002758 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2758:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    275a:	4b05      	ldr	r3, [pc, #20]	; (2770 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    275c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    275e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2760:	4a04      	ldr	r2, [pc, #16]	; (2774 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2762:	2140      	movs	r1, #64	; 0x40
    2764:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2768:	4618      	mov	r0, r3
    276a:	2101      	movs	r1, #1
    276c:	f000 b868 	b.w	2840 <arm_core_mpu_configure_dynamic_mpu_regions>
    2770:	2000084c 	.word	0x2000084c
    2774:	150b0000 	.word	0x150b0000

00002778 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2778:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    277a:	4e20      	ldr	r6, [pc, #128]	; (27fc <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    277c:	2500      	movs	r5, #0
    277e:	428d      	cmp	r5, r1
    2780:	da39      	bge.n	27f6 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    2782:	6844      	ldr	r4, [r0, #4]
    2784:	b374      	cbz	r4, 27e4 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2786:	b153      	cbz	r3, 279e <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2788:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    278c:	ea14 0f0c 	tst.w	r4, ip
    2790:	d12f      	bne.n	27f2 <mpu_configure_regions+0x7a>
		&&
    2792:	2c1f      	cmp	r4, #31
    2794:	d92d      	bls.n	27f2 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    2796:	6807      	ldr	r7, [r0, #0]
		&&
    2798:	ea1c 0f07 	tst.w	ip, r7
    279c:	d129      	bne.n	27f2 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    279e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    27a0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    27a2:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    27a6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    27aa:	d91e      	bls.n	27ea <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    27ac:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    27b0:	d81d      	bhi.n	27ee <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    27b2:	3c01      	subs	r4, #1
    27b4:	fab4 f484 	clz	r4, r4
    27b8:	f1c4 041f 	rsb	r4, r4, #31
    27bc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    27be:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    27c2:	ea4c 0c04 	orr.w	ip, ip, r4
    27c6:	d814      	bhi.n	27f2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27c8:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    27cc:	4314      	orrs	r4, r2
    27ce:	f044 0410 	orr.w	r4, r4, #16
    27d2:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27d6:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    27da:	f04c 0401 	orr.w	r4, ip, #1
    27de:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    27e2:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    27e4:	3501      	adds	r5, #1
    27e6:	300c      	adds	r0, #12
    27e8:	e7c9      	b.n	277e <mpu_configure_regions+0x6>
		return REGION_32B;
    27ea:	2408      	movs	r4, #8
    27ec:	e7e7      	b.n	27be <mpu_configure_regions+0x46>
		return REGION_4G;
    27ee:	243e      	movs	r4, #62	; 0x3e
    27f0:	e7e5      	b.n	27be <mpu_configure_regions+0x46>
			return -EINVAL;
    27f2:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    27f6:	4610      	mov	r0, r2
    27f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27fa:	bf00      	nop
    27fc:	e000ed00 	.word	0xe000ed00

00002800 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2800:	4b04      	ldr	r3, [pc, #16]	; (2814 <arm_core_mpu_enable+0x14>)
    2802:	2205      	movs	r2, #5
    2804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    280c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2810:	4770      	bx	lr
    2812:	bf00      	nop
    2814:	e000ed00 	.word	0xe000ed00

00002818 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2818:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    281c:	4b02      	ldr	r3, [pc, #8]	; (2828 <arm_core_mpu_disable+0x10>)
    281e:	2200      	movs	r2, #0
    2820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2824:	4770      	bx	lr
    2826:	bf00      	nop
    2828:	e000ed00 	.word	0xe000ed00

0000282c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    282c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    282e:	4c03      	ldr	r4, [pc, #12]	; (283c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2830:	2301      	movs	r3, #1
    2832:	7822      	ldrb	r2, [r4, #0]
    2834:	f7ff ffa0 	bl	2778 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2838:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    283a:	bd10      	pop	{r4, pc}
    283c:	20000be8 	.word	0x20000be8

00002840 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    2840:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2842:	4a09      	ldr	r2, [pc, #36]	; (2868 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2844:	2300      	movs	r3, #0
    2846:	7812      	ldrb	r2, [r2, #0]
    2848:	f7ff ff96 	bl	2778 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    284c:	f110 0f16 	cmn.w	r0, #22
    2850:	d002      	beq.n	2858 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    2852:	4a06      	ldr	r2, [pc, #24]	; (286c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2854:	2807      	cmp	r0, #7
    2856:	dd00      	ble.n	285a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2858:	bd08      	pop	{r3, pc}
    285a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    285e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    2862:	3001      	adds	r0, #1
    2864:	e7f6      	b.n	2854 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    2866:	bf00      	nop
    2868:	20000be8 	.word	0x20000be8
    286c:	e000ed00 	.word	0xe000ed00

00002870 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2870:	4914      	ldr	r1, [pc, #80]	; (28c4 <z_arm_mpu_init+0x54>)
    2872:	6808      	ldr	r0, [r1, #0]
    2874:	2808      	cmp	r0, #8
{
    2876:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2878:	d821      	bhi.n	28be <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    287a:	f7ff ffcd 	bl	2818 <arm_core_mpu_disable>
    287e:	4c12      	ldr	r4, [pc, #72]	; (28c8 <z_arm_mpu_init+0x58>)
    2880:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2882:	2200      	movs	r2, #0
    2884:	4290      	cmp	r0, r2
    2886:	f101 010c 	add.w	r1, r1, #12
    288a:	d105      	bne.n	2898 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    288c:	4b0f      	ldr	r3, [pc, #60]	; (28cc <z_arm_mpu_init+0x5c>)
    288e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2890:	f7ff ffb6 	bl	2800 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2894:	2000      	movs	r0, #0
}
    2896:	bd10      	pop	{r4, pc}
    2898:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    289c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    28a0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    28a4:	4313      	orrs	r3, r2
    28a6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    28b2:	f043 0301 	orr.w	r3, r3, #1
    28b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    28ba:	3201      	adds	r2, #1
    28bc:	e7e2      	b.n	2884 <z_arm_mpu_init+0x14>
		return -1;
    28be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28c2:	e7e8      	b.n	2896 <z_arm_mpu_init+0x26>
    28c4:	00007340 	.word	0x00007340
    28c8:	e000ed00 	.word	0xe000ed00
    28cc:	20000be8 	.word	0x20000be8

000028d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    28d0:	4b01      	ldr	r3, [pc, #4]	; (28d8 <__stdout_hook_install+0x8>)
    28d2:	6018      	str	r0, [r3, #0]
}
    28d4:	4770      	bx	lr
    28d6:	bf00      	nop
    28d8:	20000028 	.word	0x20000028

000028dc <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    28dc:	3902      	subs	r1, #2
    28de:	2901      	cmp	r1, #1
    28e0:	d802      	bhi.n	28e8 <z_impl_zephyr_fputc+0xc>
    28e2:	4b03      	ldr	r3, [pc, #12]	; (28f0 <z_impl_zephyr_fputc+0x14>)
    28e4:	681b      	ldr	r3, [r3, #0]
    28e6:	4718      	bx	r3
}
    28e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28ec:	4770      	bx	lr
    28ee:	bf00      	nop
    28f0:	20000028 	.word	0x20000028

000028f4 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    28f4:	b40f      	push	{r0, r1, r2, r3}
    28f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    28f8:	ab06      	add	r3, sp, #24
    28fa:	2100      	movs	r1, #0
    28fc:	f853 2b04 	ldr.w	r2, [r3], #4
    2900:	4805      	ldr	r0, [pc, #20]	; (2918 <printf+0x24>)
    2902:	9100      	str	r1, [sp, #0]
    2904:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
    2906:	9303      	str	r3, [sp, #12]
    2908:	f7fe fba0 	bl	104c <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    290c:	b005      	add	sp, #20
    290e:	f85d eb04 	ldr.w	lr, [sp], #4
    2912:	b004      	add	sp, #16
    2914:	4770      	bx	lr
    2916:	bf00      	nop
    2918:	000066b3 	.word	0x000066b3

0000291c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    291c:	b510      	push	{r4, lr}
	__asm__ volatile(
    291e:	f04f 0320 	mov.w	r3, #32
    2922:	f3ef 8011 	mrs	r0, BASEPRI
    2926:	f383 8812 	msr	BASEPRI_MAX, r3
    292a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    292e:	4a11      	ldr	r2, [pc, #68]	; (2974 <nordicsemi_nrf52_init+0x58>)
    2930:	2301      	movs	r3, #1
    2932:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    293a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    293e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2942:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2946:	2c08      	cmp	r4, #8
    2948:	d108      	bne.n	295c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    294a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    294e:	2905      	cmp	r1, #5
    2950:	d804      	bhi.n	295c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2952:	4c09      	ldr	r4, [pc, #36]	; (2978 <nordicsemi_nrf52_init+0x5c>)
    2954:	5c61      	ldrb	r1, [r4, r1]
    2956:	b109      	cbz	r1, 295c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2958:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    295c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2960:	2201      	movs	r2, #1
    2962:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2966:	f380 8811 	msr	BASEPRI, r0
    296a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    296e:	2000      	movs	r0, #0
    2970:	bd10      	pop	{r4, pc}
    2972:	bf00      	nop
    2974:	4001e000 	.word	0x4001e000
    2978:	0000765d 	.word	0x0000765d

0000297c <sys_arch_reboot>:
    *p_gpregret = val;
    297c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2980:	b2c0      	uxtb	r0, r0
    2982:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2986:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    298a:	4905      	ldr	r1, [pc, #20]	; (29a0 <sys_arch_reboot+0x24>)
    298c:	4b05      	ldr	r3, [pc, #20]	; (29a4 <sys_arch_reboot+0x28>)
    298e:	68ca      	ldr	r2, [r1, #12]
    2990:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2994:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2996:	60cb      	str	r3, [r1, #12]
    2998:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    299c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    299e:	e7fd      	b.n	299c <sys_arch_reboot+0x20>
    29a0:	e000ed00 	.word	0xe000ed00
    29a4:	05fa0004 	.word	0x05fa0004

000029a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    29a8:	b120      	cbz	r0, 29b4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    29aa:	4b03      	ldr	r3, [pc, #12]	; (29b8 <arch_busy_wait+0x10>)
    29ac:	0180      	lsls	r0, r0, #6
    29ae:	f043 0301 	orr.w	r3, r3, #1
    29b2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop
    29b8:	00007300 	.word	0x00007300

000029bc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    29bc:	4b08      	ldr	r3, [pc, #32]	; (29e0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    29be:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    29c0:	1ac3      	subs	r3, r0, r3
{
    29c2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    29c4:	4907      	ldr	r1, [pc, #28]	; (29e4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    29c6:	109b      	asrs	r3, r3, #2
{
    29c8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    29ca:	4359      	muls	r1, r3
    29cc:	4806      	ldr	r0, [pc, #24]	; (29e8 <onoff_stop+0x2c>)
    29ce:	2240      	movs	r2, #64	; 0x40
    29d0:	f003 fe9f 	bl	6712 <stop>
	notify(mgr, res);
    29d4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    29d6:	4601      	mov	r1, r0
	notify(mgr, res);
    29d8:	4620      	mov	r0, r4
}
    29da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    29de:	4718      	bx	r3
    29e0:	2000086c 	.word	0x2000086c
    29e4:	b6db6db7 	.word	0xb6db6db7
    29e8:	00007058 	.word	0x00007058

000029ec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    29ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    29ee:	4c0c      	ldr	r4, [pc, #48]	; (2a20 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    29f0:	4a0c      	ldr	r2, [pc, #48]	; (2a24 <onoff_start+0x38>)
    29f2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    29f4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    29f6:	9300      	str	r3, [sp, #0]
{
    29f8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    29fa:	460b      	mov	r3, r1
    29fc:	490a      	ldr	r1, [pc, #40]	; (2a28 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    29fe:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2a00:	4361      	muls	r1, r4
{
    2a02:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2a04:	4809      	ldr	r0, [pc, #36]	; (2a2c <onoff_start+0x40>)
    2a06:	f003 feb1 	bl	676c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2a0a:	1e01      	subs	r1, r0, #0
    2a0c:	da05      	bge.n	2a1a <onoff_start+0x2e>
		notify(mgr, err);
    2a0e:	4630      	mov	r0, r6
    2a10:	462b      	mov	r3, r5
	}
}
    2a12:	b002      	add	sp, #8
    2a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2a18:	4718      	bx	r3
}
    2a1a:	b002      	add	sp, #8
    2a1c:	bd70      	pop	{r4, r5, r6, pc}
    2a1e:	bf00      	nop
    2a20:	2000086c 	.word	0x2000086c
    2a24:	000067d9 	.word	0x000067d9
    2a28:	b6db6db7 	.word	0xb6db6db7
    2a2c:	00007058 	.word	0x00007058

00002a30 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a30:	2200      	movs	r2, #0
{
    2a32:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a34:	2101      	movs	r1, #1
{
    2a36:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a38:	4610      	mov	r0, r2
    2a3a:	f7ff fbe9 	bl	2210 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2a3e:	480f      	ldr	r0, [pc, #60]	; (2a7c <clk_init+0x4c>)
    2a40:	f001 f962 	bl	3d08 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2a44:	4b0e      	ldr	r3, [pc, #56]	; (2a80 <clk_init+0x50>)
    2a46:	4298      	cmp	r0, r3
    2a48:	d115      	bne.n	2a76 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2a4a:	f004 f801 	bl	6a50 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2a4e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2a50:	490c      	ldr	r1, [pc, #48]	; (2a84 <clk_init+0x54>)
    2a52:	4630      	mov	r0, r6
    2a54:	f003 fcd1 	bl	63fa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2a58:	2800      	cmp	r0, #0
    2a5a:	db0b      	blt.n	2a74 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2a5c:	2501      	movs	r5, #1
    2a5e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    2a60:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2a62:	4908      	ldr	r1, [pc, #32]	; (2a84 <clk_init+0x54>)
    2a64:	f104 001c 	add.w	r0, r4, #28
    2a68:	f003 fcc7 	bl	63fa <onoff_manager_init>
		if (err < 0) {
    2a6c:	2800      	cmp	r0, #0
    2a6e:	db01      	blt.n	2a74 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2a70:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2a72:	2000      	movs	r0, #0
}
    2a74:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2a76:	f06f 0004 	mvn.w	r0, #4
    2a7a:	e7fb      	b.n	2a74 <clk_init+0x44>
    2a7c:	00002abd 	.word	0x00002abd
    2a80:	0bad0000 	.word	0x0bad0000
    2a84:	00007360 	.word	0x00007360

00002a88 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2a88:	b570      	push	{r4, r5, r6, lr}
    2a8a:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2a8c:	230c      	movs	r3, #12
    2a8e:	4809      	ldr	r0, [pc, #36]	; (2ab4 <clkstarted_handle.constprop.0+0x2c>)
    2a90:	434b      	muls	r3, r1
    2a92:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2a94:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2a98:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2a9a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2a9c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2a9e:	4418      	add	r0, r3
    2aa0:	f003 fe24 	bl	66ec <set_on_state>
	if (callback) {
    2aa4:	b12d      	cbz	r5, 2ab2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2aa6:	4632      	mov	r2, r6
    2aa8:	462b      	mov	r3, r5
    2aaa:	4803      	ldr	r0, [pc, #12]	; (2ab8 <clkstarted_handle.constprop.0+0x30>)
}
    2aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2ab0:	4718      	bx	r3
}
    2ab2:	bd70      	pop	{r4, r5, r6, pc}
    2ab4:	2000086c 	.word	0x2000086c
    2ab8:	00007058 	.word	0x00007058

00002abc <clock_event_handler>:
	switch (event) {
    2abc:	b110      	cbz	r0, 2ac4 <clock_event_handler+0x8>
    2abe:	2801      	cmp	r0, #1
    2ac0:	d004      	beq.n	2acc <clock_event_handler+0x10>
    2ac2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2ac4:	4b03      	ldr	r3, [pc, #12]	; (2ad4 <clock_event_handler+0x18>)
    2ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2ac8:	075b      	lsls	r3, r3, #29
    2aca:	d101      	bne.n	2ad0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2acc:	f7ff bfdc 	b.w	2a88 <clkstarted_handle.constprop.0>
}
    2ad0:	4770      	bx	lr
    2ad2:	bf00      	nop
    2ad4:	2000086c 	.word	0x2000086c

00002ad8 <generic_hfclk_start>:
{
    2ad8:	b508      	push	{r3, lr}
	__asm__ volatile(
    2ada:	f04f 0320 	mov.w	r3, #32
    2ade:	f3ef 8111 	mrs	r1, BASEPRI
    2ae2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ae6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2aea:	4a12      	ldr	r2, [pc, #72]	; (2b34 <generic_hfclk_start+0x5c>)
    2aec:	6813      	ldr	r3, [r2, #0]
    2aee:	f043 0002 	orr.w	r0, r3, #2
    2af2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2af4:	07da      	lsls	r2, r3, #31
    2af6:	d408      	bmi.n	2b0a <generic_hfclk_start+0x32>
	__asm__ volatile(
    2af8:	f381 8811 	msr	BASEPRI, r1
    2afc:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2b00:	2001      	movs	r0, #1
}
    2b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2b06:	f003 bfb0 	b.w	6a6a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b0e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2b12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2b16:	07d3      	lsls	r3, r2, #31
    2b18:	d5ee      	bpl.n	2af8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2b1a:	4807      	ldr	r0, [pc, #28]	; (2b38 <generic_hfclk_start+0x60>)
    2b1c:	f003 fde6 	bl	66ec <set_on_state>
    2b20:	f381 8811 	msr	BASEPRI, r1
    2b24:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    2b28:	2000      	movs	r0, #0
}
    2b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2b2e:	f7ff bfab 	b.w	2a88 <clkstarted_handle.constprop.0>
    2b32:	bf00      	nop
    2b34:	200008bc 	.word	0x200008bc
    2b38:	200008ac 	.word	0x200008ac

00002b3c <api_blocking_start>:
{
    2b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2b3e:	2200      	movs	r2, #0
    2b40:	2301      	movs	r3, #1
    2b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2b46:	4a09      	ldr	r2, [pc, #36]	; (2b6c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2b48:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2b4c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2b4e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2b52:	f003 fe3a 	bl	67ca <api_start>
	if (err < 0) {
    2b56:	2800      	cmp	r0, #0
    2b58:	db05      	blt.n	2b66 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2b5e:	2300      	movs	r3, #0
    2b60:	4668      	mov	r0, sp
    2b62:	f002 fa35 	bl	4fd0 <z_impl_k_sem_take>
}
    2b66:	b005      	add	sp, #20
    2b68:	f85d fb04 	ldr.w	pc, [sp], #4
    2b6c:	000067f7 	.word	0x000067f7

00002b70 <generic_hfclk_stop>:
{
    2b70:	b510      	push	{r4, lr}
	__asm__ volatile(
    2b72:	f04f 0320 	mov.w	r3, #32
    2b76:	f3ef 8411 	mrs	r4, BASEPRI
    2b7a:	f383 8812 	msr	BASEPRI_MAX, r3
    2b7e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    2b82:	4a07      	ldr	r2, [pc, #28]	; (2ba0 <generic_hfclk_stop+0x30>)
    2b84:	6813      	ldr	r3, [r2, #0]
    2b86:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    2b8a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    2b8c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    2b8e:	d402      	bmi.n	2b96 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2b90:	2001      	movs	r0, #1
    2b92:	f003 ffa6 	bl	6ae2 <nrfx_clock_stop>
	__asm__ volatile(
    2b96:	f384 8811 	msr	BASEPRI, r4
    2b9a:	f3bf 8f6f 	isb	sy
}
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	200008bc 	.word	0x200008bc

00002ba4 <z_nrf_clock_control_lf_on>:
{
    2ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2ba8:	4938      	ldr	r1, [pc, #224]	; (2c8c <z_nrf_clock_control_lf_on+0xe8>)
    2baa:	f3bf 8f5b 	dmb	ish
    2bae:	4607      	mov	r7, r0
    2bb0:	2201      	movs	r2, #1
    2bb2:	e851 3f00 	ldrex	r3, [r1]
    2bb6:	e841 2000 	strex	r0, r2, [r1]
    2bba:	2800      	cmp	r0, #0
    2bbc:	d1f9      	bne.n	2bb2 <z_nrf_clock_control_lf_on+0xe>
    2bbe:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2bc2:	b933      	cbnz	r3, 2bd2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2bc4:	4932      	ldr	r1, [pc, #200]	; (2c90 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    2bc6:	4833      	ldr	r0, [pc, #204]	; (2c94 <z_nrf_clock_control_lf_on+0xf0>)
    2bc8:	604b      	str	r3, [r1, #4]
    2bca:	60cb      	str	r3, [r1, #12]
    2bcc:	608a      	str	r2, [r1, #8]
    2bce:	f003 fc27 	bl	6420 <onoff_request>
	switch (start_mode) {
    2bd2:	1e7b      	subs	r3, r7, #1
    2bd4:	2b01      	cmp	r3, #1
    2bd6:	d82b      	bhi.n	2c30 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2bd8:	2f01      	cmp	r7, #1
    2bda:	d107      	bne.n	2bec <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2be0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2be4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2be8:	2b01      	cmp	r3, #1
    2bea:	d021      	beq.n	2c30 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2bec:	f004 f8f7 	bl	6dde <k_is_in_isr>
    2bf0:	4605      	mov	r5, r0
    2bf2:	b9f8      	cbnz	r0, 2c34 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    2bf4:	4b28      	ldr	r3, [pc, #160]	; (2c98 <z_nrf_clock_control_lf_on+0xf4>)
    2bf6:	781b      	ldrb	r3, [r3, #0]
    2bf8:	b1e3      	cbz	r3, 2c34 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    2bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bfe:	2202      	movs	r2, #2
    2c00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2c04:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c06:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2c9c <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2c0a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2c0e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2c12:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2c16:	03d2      	lsls	r2, r2, #15
    2c18:	d516      	bpl.n	2c48 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2c1a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2c1e:	2b01      	cmp	r3, #1
    2c20:	d001      	beq.n	2c26 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2c22:	2f01      	cmp	r7, #1
    2c24:	d110      	bne.n	2c48 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    2c26:	b35d      	cbz	r5, 2c80 <z_nrf_clock_control_lf_on+0xdc>
    2c28:	f386 8811 	msr	BASEPRI, r6
    2c2c:	f3bf 8f6f 	isb	sy
}
    2c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    2c34:	f04f 0320 	mov.w	r3, #32
    2c38:	f3ef 8611 	mrs	r6, BASEPRI
    2c3c:	f383 8812 	msr	BASEPRI_MAX, r3
    2c40:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2c44:	2501      	movs	r5, #1
    2c46:	e7de      	b.n	2c06 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2c48:	b1ad      	cbz	r5, 2c76 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2c4a:	4630      	mov	r0, r6
    2c4c:	f7ff fab8 	bl	21c0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2c50:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2c54:	2b00      	cmp	r3, #0
    2c56:	d1da      	bne.n	2c0e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c58:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2c5c:	2a00      	cmp	r2, #0
    2c5e:	d0d6      	beq.n	2c0e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c60:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2c64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2c68:	2301      	movs	r3, #1
    2c6a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    2c6e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c72:	60a3      	str	r3, [r4, #8]
}
    2c74:	e7cb      	b.n	2c0e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    2c76:	2100      	movs	r1, #0
    2c78:	2021      	movs	r0, #33	; 0x21
    2c7a:	f002 fc99 	bl	55b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2c7e:	e7e7      	b.n	2c50 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    2c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c84:	2202      	movs	r2, #2
    2c86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2c8a:	e7d1      	b.n	2c30 <z_nrf_clock_control_lf_on+0x8c>
    2c8c:	20000868 	.word	0x20000868
    2c90:	20000858 	.word	0x20000858
    2c94:	20000888 	.word	0x20000888
    2c98:	20000ffd 	.word	0x20000ffd
    2c9c:	e000e100 	.word	0xe000e100

00002ca0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2ca0:	b508      	push	{r3, lr}
    2ca2:	4807      	ldr	r0, [pc, #28]	; (2cc0 <uart_console_init+0x20>)
    2ca4:	f004 f824 	bl	6cf0 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    2ca8:	b138      	cbz	r0, 2cba <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    2caa:	4806      	ldr	r0, [pc, #24]	; (2cc4 <uart_console_init+0x24>)
    2cac:	f7ff fe10 	bl	28d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2cb0:	4804      	ldr	r0, [pc, #16]	; (2cc4 <uart_console_init+0x24>)
    2cb2:	f7fe f8a9 	bl	e08 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2cb6:	2000      	movs	r0, #0
}
    2cb8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2cba:	f06f 0012 	mvn.w	r0, #18
    2cbe:	e7fb      	b.n	2cb8 <uart_console_init+0x18>
    2cc0:	000070b8 	.word	0x000070b8
    2cc4:	00002cc9 	.word	0x00002cc9

00002cc8 <console_out>:
	if ('\n' == c) {
    2cc8:	280a      	cmp	r0, #10
{
    2cca:	b538      	push	{r3, r4, r5, lr}
    2ccc:	4d07      	ldr	r5, [pc, #28]	; (2cec <console_out+0x24>)
    2cce:	4604      	mov	r4, r0
	if ('\n' == c) {
    2cd0:	d104      	bne.n	2cdc <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2cd2:	68ab      	ldr	r3, [r5, #8]
    2cd4:	210d      	movs	r1, #13
    2cd6:	685b      	ldr	r3, [r3, #4]
    2cd8:	4628      	mov	r0, r5
    2cda:	4798      	blx	r3
    2cdc:	68ab      	ldr	r3, [r5, #8]
    2cde:	4803      	ldr	r0, [pc, #12]	; (2cec <console_out+0x24>)
    2ce0:	685b      	ldr	r3, [r3, #4]
    2ce2:	b2e1      	uxtb	r1, r4
    2ce4:	4798      	blx	r3
}
    2ce6:	4620      	mov	r0, r4
    2ce8:	bd38      	pop	{r3, r4, r5, pc}
    2cea:	bf00      	nop
    2cec:	000070b8 	.word	0x000070b8

00002cf0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2cf0:	b530      	push	{r4, r5, lr}
	return port->config;
    2cf2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2cf4:	7b05      	ldrb	r5, [r0, #12]
    2cf6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2cfa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    2cfe:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2d00:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2d04:	d105      	bne.n	2d12 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2d06:	4620      	mov	r0, r4
    2d08:	f001 fa80 	bl	420c <nrfx_gpiote_trigger_disable>

		return 0;
    2d0c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    2d0e:	b005      	add	sp, #20
    2d10:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d12:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2d14:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d18:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2d1c:	d114      	bne.n	2d48 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d22:	bf0c      	ite	eq
    2d24:	2304      	moveq	r3, #4
    2d26:	2305      	movne	r3, #5
    2d28:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d2c:	2300      	movs	r3, #0
    2d2e:	4619      	mov	r1, r3
    2d30:	aa02      	add	r2, sp, #8
    2d32:	4620      	mov	r0, r4
    2d34:	f001 f8a8 	bl	3e88 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d38:	4b1f      	ldr	r3, [pc, #124]	; (2db8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2d3a:	4298      	cmp	r0, r3
    2d3c:	d139      	bne.n	2db2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2d3e:	2101      	movs	r1, #1
    2d40:	4620      	mov	r0, r4
    2d42:	f001 fa1b 	bl	417c <nrfx_gpiote_trigger_enable>
	return 0;
    2d46:	e7e1      	b.n	2d0c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2d48:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2d4c:	d026      	beq.n	2d9c <gpio_nrfx_pin_interrupt_configure+0xac>
    2d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2d52:	bf14      	ite	ne
    2d54:	2301      	movne	r3, #1
    2d56:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d58:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2d5c:	6883      	ldr	r3, [r0, #8]
    2d5e:	40cb      	lsrs	r3, r1
    2d60:	07d9      	lsls	r1, r3, #31
    2d62:	d4e3      	bmi.n	2d2c <gpio_nrfx_pin_interrupt_configure+0x3c>
    2d64:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2d68:	d1e0      	bne.n	2d2c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2d6a:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    2d6c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2d6e:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    2d72:	4a12      	ldr	r2, [pc, #72]	; (2dbc <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2d74:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2d78:	bf18      	it	ne
    2d7a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2d82:	07db      	lsls	r3, r3, #31
    2d84:	d4d2      	bmi.n	2d2c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2d86:	f10d 0507 	add.w	r5, sp, #7
    2d8a:	4629      	mov	r1, r5
    2d8c:	4620      	mov	r0, r4
    2d8e:	f001 f9a1 	bl	40d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2d92:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2d94:	4298      	cmp	r0, r3
    2d96:	d003      	beq.n	2da0 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    2d98:	9503      	str	r5, [sp, #12]
    2d9a:	e7c7      	b.n	2d2c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2d9c:	2303      	movs	r3, #3
    2d9e:	e7db      	b.n	2d58 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2da0:	4628      	mov	r0, r5
    2da2:	f001 f9e5 	bl	4170 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2da6:	4b04      	ldr	r3, [pc, #16]	; (2db8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2da8:	4298      	cmp	r0, r3
    2daa:	d0f5      	beq.n	2d98 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    2dac:	f06f 000b 	mvn.w	r0, #11
    2db0:	e7ad      	b.n	2d0e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2db2:	f06f 0015 	mvn.w	r0, #21
    2db6:	e7aa      	b.n	2d0e <gpio_nrfx_pin_interrupt_configure+0x1e>
    2db8:	0bad0000 	.word	0x0bad0000
    2dbc:	50000300 	.word	0x50000300
    2dc0:	0bad0004 	.word	0x0bad0004

00002dc4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2dc4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2dc6:	f001 f9c3 	bl	4150 <nrfx_gpiote_is_init>
    2dca:	4604      	mov	r4, r0
    2dcc:	b968      	cbnz	r0, 2dea <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2dce:	f001 f997 	bl	4100 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2dd2:	4b08      	ldr	r3, [pc, #32]	; (2df4 <gpio_nrfx_init+0x30>)
    2dd4:	4298      	cmp	r0, r3
    2dd6:	d10a      	bne.n	2dee <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2dd8:	4807      	ldr	r0, [pc, #28]	; (2df8 <gpio_nrfx_init+0x34>)
    2dda:	4621      	mov	r1, r4
    2ddc:	f001 f974 	bl	40c8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2de0:	4622      	mov	r2, r4
    2de2:	2105      	movs	r1, #5
    2de4:	2006      	movs	r0, #6
    2de6:	f7ff fa13 	bl	2210 <z_arm_irq_priority_set>
		return 0;
    2dea:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2dec:	bd10      	pop	{r4, pc}
		return -EIO;
    2dee:	f06f 0004 	mvn.w	r0, #4
    2df2:	e7fb      	b.n	2dec <gpio_nrfx_init+0x28>
    2df4:	0bad0000 	.word	0x0bad0000
    2df8:	00002dfd 	.word	0x00002dfd

00002dfc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2dfc:	0942      	lsrs	r2, r0, #5
{
    2dfe:	b570      	push	{r4, r5, r6, lr}
    2e00:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2e02:	d002      	beq.n	2e0a <nrfx_gpio_handler+0xe>
    2e04:	2a01      	cmp	r2, #1
    2e06:	d017      	beq.n	2e38 <nrfx_gpio_handler+0x3c>
}
    2e08:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2e0a:	4e0d      	ldr	r6, [pc, #52]	; (2e40 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2e0c:	6932      	ldr	r2, [r6, #16]
    2e0e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e10:	2900      	cmp	r1, #0
    2e12:	d0f9      	beq.n	2e08 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2e14:	f003 031f 	and.w	r3, r3, #31
    2e18:	2501      	movs	r5, #1
    2e1a:	680c      	ldr	r4, [r1, #0]
    2e1c:	409d      	lsls	r5, r3
    2e1e:	2900      	cmp	r1, #0
    2e20:	d0f2      	beq.n	2e08 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    2e22:	688a      	ldr	r2, [r1, #8]
    2e24:	402a      	ands	r2, r5
    2e26:	d002      	beq.n	2e2e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2e28:	684b      	ldr	r3, [r1, #4]
    2e2a:	4630      	mov	r0, r6
    2e2c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e2e:	b12c      	cbz	r4, 2e3c <nrfx_gpio_handler+0x40>
    2e30:	6823      	ldr	r3, [r4, #0]
    2e32:	4621      	mov	r1, r4
    2e34:	461c      	mov	r4, r3
    2e36:	e7f2      	b.n	2e1e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2e38:	4e02      	ldr	r6, [pc, #8]	; (2e44 <nrfx_gpio_handler+0x48>)
    2e3a:	e7e7      	b.n	2e0c <nrfx_gpio_handler+0x10>
    2e3c:	4623      	mov	r3, r4
    2e3e:	e7f8      	b.n	2e32 <nrfx_gpio_handler+0x36>
    2e40:	00007088 	.word	0x00007088
    2e44:	00007070 	.word	0x00007070

00002e48 <gpio_nrfx_pin_configure>:
{
    2e48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2e4c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2e4e:	7b3b      	ldrb	r3, [r7, #12]
    2e50:	f001 051f 	and.w	r5, r1, #31
    2e54:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2e58:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2e5a:	4628      	mov	r0, r5
    2e5c:	f10d 0103 	add.w	r1, sp, #3
{
    2e60:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2e62:	f001 f937 	bl	40d4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2e66:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2e6a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2e6c:	d10b      	bne.n	2e86 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2e6e:	4628      	mov	r0, r5
    2e70:	f001 f9f4 	bl	425c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2e74:	4b3d      	ldr	r3, [pc, #244]	; (2f6c <gpio_nrfx_pin_configure+0x124>)
    2e76:	4598      	cmp	r8, r3
    2e78:	d103      	bne.n	2e82 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2e7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2e7e:	f001 f971 	bl	4164 <nrfx_gpiote_channel_free>
		return 0;
    2e82:	2000      	movs	r0, #0
    2e84:	e00c      	b.n	2ea0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e86:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e88:	4619      	mov	r1, r3
    2e8a:	aa02      	add	r2, sp, #8
    2e8c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e92:	f000 fff9 	bl	3e88 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2e96:	4b35      	ldr	r3, [pc, #212]	; (2f6c <gpio_nrfx_pin_configure+0x124>)
    2e98:	4298      	cmp	r0, r3
    2e9a:	d004      	beq.n	2ea6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    2e9c:	f06f 0015 	mvn.w	r0, #21
}
    2ea0:	b004      	add	sp, #16
    2ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2ea6:	4580      	cmp	r8, r0
    2ea8:	d103      	bne.n	2eb2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2eaa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2eae:	f001 f959 	bl	4164 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2eb2:	03a3      	lsls	r3, r4, #14
    2eb4:	d54b      	bpl.n	2f4e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2eb6:	f240 3306 	movw	r3, #774	; 0x306
    2eba:	4023      	ands	r3, r4
    2ebc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2ec0:	d019      	beq.n	2ef6 <gpio_nrfx_pin_configure+0xae>
    2ec2:	d80c      	bhi.n	2ede <gpio_nrfx_pin_configure+0x96>
    2ec4:	2b06      	cmp	r3, #6
    2ec6:	d017      	beq.n	2ef8 <gpio_nrfx_pin_configure+0xb0>
    2ec8:	d804      	bhi.n	2ed4 <gpio_nrfx_pin_configure+0x8c>
    2eca:	b1ab      	cbz	r3, 2ef8 <gpio_nrfx_pin_configure+0xb0>
    2ecc:	2b02      	cmp	r3, #2
    2ece:	d1e5      	bne.n	2e9c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    2ed0:	2304      	movs	r3, #4
    2ed2:	e011      	b.n	2ef8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2ed8:	d1e0      	bne.n	2e9c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    2eda:	2301      	movs	r3, #1
    2edc:	e00c      	b.n	2ef8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2ede:	f240 2202 	movw	r2, #514	; 0x202
    2ee2:	4293      	cmp	r3, r2
    2ee4:	d027      	beq.n	2f36 <gpio_nrfx_pin_configure+0xee>
    2ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2eea:	d026      	beq.n	2f3a <gpio_nrfx_pin_configure+0xf2>
    2eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2ef0:	d1d4      	bne.n	2e9c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    2ef2:	2302      	movs	r3, #2
    2ef4:	e000      	b.n	2ef8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2ef6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2ef8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2efc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2f00:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2f04:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2f06:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    2f0a:	bf54      	ite	pl
    2f0c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2f10:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2f12:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2f14:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2f18:	d511      	bpl.n	2f3e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2f1a:	687a      	ldr	r2, [r7, #4]
    2f1c:	2301      	movs	r3, #1
    2f1e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2f20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2f24:	2200      	movs	r2, #0
    2f26:	a901      	add	r1, sp, #4
    2f28:	4628      	mov	r0, r5
    2f2a:	f001 f85b 	bl	3fe4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2f2e:	4b0f      	ldr	r3, [pc, #60]	; (2f6c <gpio_nrfx_pin_configure+0x124>)
    2f30:	4298      	cmp	r0, r3
    2f32:	d0a6      	beq.n	2e82 <gpio_nrfx_pin_configure+0x3a>
    2f34:	e7b2      	b.n	2e9c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2f36:	2305      	movs	r3, #5
    2f38:	e7de      	b.n	2ef8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2f3a:	2303      	movs	r3, #3
    2f3c:	e7dc      	b.n	2ef8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2f3e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2f40:	bf41      	itttt	mi
    2f42:	2301      	movmi	r3, #1
    2f44:	687a      	ldrmi	r2, [r7, #4]
    2f46:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    2f48:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    2f4c:	e7ea      	b.n	2f24 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    2f4e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f50:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    2f54:	bf54      	ite	pl
    2f56:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2f5a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f5c:	461a      	mov	r2, r3
    2f5e:	a901      	add	r1, sp, #4
    2f60:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2f62:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f66:	f000 ff8f 	bl	3e88 <nrfx_gpiote_input_configure>
    2f6a:	e7e0      	b.n	2f2e <gpio_nrfx_pin_configure+0xe6>
    2f6c:	0bad0000 	.word	0x0bad0000

00002f70 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    2f70:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    2f72:	6843      	ldr	r3, [r0, #4]
    2f74:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    2f76:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    2f7a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2f7e:	f001 fcdf 	bl	4940 <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2f82:	4b03      	ldr	r3, [pc, #12]	; (2f90 <i2c_nrfx_twi_recover_bus+0x20>)
    2f84:	4298      	cmp	r0, r3
}
    2f86:	bf14      	ite	ne
    2f88:	f06f 000f 	mvnne.w	r0, #15
    2f8c:	2000      	moveq	r0, #0
    2f8e:	bd08      	pop	{r3, pc}
    2f90:	0bad0000 	.word	0x0bad0000

00002f94 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    2f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2f96:	4604      	mov	r4, r0
    2f98:	2200      	movs	r2, #0
    2f9a:	2101      	movs	r1, #1
    2f9c:	2003      	movs	r0, #3
    2f9e:	f7ff f937 	bl	2210 <z_arm_irq_priority_set>
    2fa2:	6863      	ldr	r3, [r4, #4]
    2fa4:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2fa6:	aa01      	add	r2, sp, #4
    2fa8:	2100      	movs	r1, #0
    2faa:	4628      	mov	r0, r5
    2fac:	f003 fd2b 	bl	6a06 <pinctrl_lookup_state>
	if (ret < 0) {
    2fb0:	2800      	cmp	r0, #0
    2fb2:	db14      	blt.n	2fde <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2fb4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2fb6:	682a      	ldr	r2, [r5, #0]
    2fb8:	7919      	ldrb	r1, [r3, #4]
    2fba:	6818      	ldr	r0, [r3, #0]
    2fbc:	f000 fc48 	bl	3850 <pinctrl_configure_pins>
    2fc0:	2800      	cmp	r0, #0
    2fc2:	db0c      	blt.n	2fde <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    2fc4:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    2fc6:	6923      	ldr	r3, [r4, #16]
    2fc8:	4a06      	ldr	r2, [pc, #24]	; (2fe4 <twi_0_init+0x50>)
    2fca:	f100 0108 	add.w	r1, r0, #8
    2fce:	f001 fb41 	bl	4654 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2fd2:	4b05      	ldr	r3, [pc, #20]	; (2fe8 <twi_0_init+0x54>)
	return 0;
    2fd4:	4298      	cmp	r0, r3
    2fd6:	bf14      	ite	ne
    2fd8:	f06f 000f 	mvnne.w	r0, #15
    2fdc:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(0);
    2fde:	b003      	add	sp, #12
    2fe0:	bd30      	pop	{r4, r5, pc}
    2fe2:	bf00      	nop
    2fe4:	00002fed 	.word	0x00002fed
    2fe8:	0bad0000 	.word	0x0bad0000

00002fec <event_handler>:
	switch (p_event->type) {
    2fec:	7803      	ldrb	r3, [r0, #0]
    2fee:	2b01      	cmp	r3, #1
    2ff0:	d008      	beq.n	3004 <event_handler+0x18>
    2ff2:	2b02      	cmp	r3, #2
    2ff4:	d008      	beq.n	3008 <event_handler+0x1c>
    2ff6:	b94b      	cbnz	r3, 300c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2ff8:	4b05      	ldr	r3, [pc, #20]	; (3010 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2ffa:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2ffc:	f101 0010 	add.w	r0, r1, #16
    3000:	f001 bfc6 	b.w	4f90 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3004:	4b03      	ldr	r3, [pc, #12]	; (3014 <event_handler+0x28>)
    3006:	e7f8      	b.n	2ffa <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3008:	4b03      	ldr	r3, [pc, #12]	; (3018 <event_handler+0x2c>)
    300a:	e7f6      	b.n	2ffa <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    300c:	4b03      	ldr	r3, [pc, #12]	; (301c <event_handler+0x30>)
    300e:	e7f4      	b.n	2ffa <event_handler+0xe>
    3010:	0bad0000 	.word	0x0bad0000
    3014:	0bae0001 	.word	0x0bae0001
    3018:	0bae0002 	.word	0x0bae0002
    301c:	0bad0001 	.word	0x0bad0001

00003020 <i2c_nrfx_twi_transfer>:
{
    3020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3024:	b08b      	sub	sp, #44	; 0x2c
    3026:	4605      	mov	r5, r0
    3028:	460c      	mov	r4, r1
    302a:	4690      	mov	r8, r2
    302c:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
    302e:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    3030:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    3032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    303a:	4630      	mov	r0, r6
    303c:	f001 ffc8 	bl	4fd0 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    3040:	f106 0a10 	add.w	sl, r6, #16
    3044:	2200      	movs	r2, #0
    3046:	2300      	movs	r3, #0
    3048:	4650      	mov	r0, sl
    304a:	f001 ffc1 	bl	4fd0 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    304e:	4638      	mov	r0, r7
    3050:	f001 fb62 	bl	4718 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    3054:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 3118 <i2c_nrfx_twi_transfer+0xf8>
	for (size_t i = 0; i < num_msgs; i++) {
    3058:	f04f 0900 	mov.w	r9, #0
    305c:	45c1      	cmp	r9, r8
    305e:	d301      	bcc.n	3064 <i2c_nrfx_twi_transfer+0x44>
    3060:	2400      	movs	r4, #0
    3062:	e02e      	b.n	30c2 <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    3064:	7a23      	ldrb	r3, [r4, #8]
    3066:	9303      	str	r3, [sp, #12]
    3068:	f013 0108 	ands.w	r1, r3, #8
    306c:	d14d      	bne.n	310a <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    306e:	2212      	movs	r2, #18
    3070:	f10d 0016 	add.w	r0, sp, #22
    3074:	9102      	str	r1, [sp, #8]
    3076:	f003 fb10 	bl	669a <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    307a:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
    307c:	6860      	ldr	r0, [r4, #4]
    307e:	9901      	ldr	r1, [sp, #4]
    3080:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    3082:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    3086:	6820      	ldr	r0, [r4, #0]
    3088:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    308c:	f013 0f02 	tst.w	r3, #2
    3090:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
    3092:	f88d 2014 	strb.w	r2, [sp, #20]
    3096:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    3098:	d11d      	bne.n	30d6 <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
    309a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    309e:	454b      	cmp	r3, r9
    30a0:	d902      	bls.n	30a8 <i2c_nrfx_twi_transfer+0x88>
    30a2:	7d23      	ldrb	r3, [r4, #20]
    30a4:	075b      	lsls	r3, r3, #29
    30a6:	d518      	bpl.n	30da <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    30a8:	bb7a      	cbnz	r2, 310a <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    30aa:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    30ac:	a905      	add	r1, sp, #20
    30ae:	4638      	mov	r0, r7
    30b0:	f001 fb5e 	bl	4770 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    30b4:	4558      	cmp	r0, fp
    30b6:	d012      	beq.n	30de <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
    30b8:	4b18      	ldr	r3, [pc, #96]	; (311c <i2c_nrfx_twi_transfer+0xfc>)
    30ba:	4298      	cmp	r0, r3
    30bc:	d028      	beq.n	3110 <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
    30be:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    30c2:	4638      	mov	r0, r7
    30c4:	f001 fb38 	bl	4738 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    30c8:	4630      	mov	r0, r6
    30ca:	f001 ff61 	bl	4f90 <z_impl_k_sem_give>
}
    30ce:	4620      	mov	r0, r4
    30d0:	b00b      	add	sp, #44	; 0x2c
    30d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    30d6:	460a      	mov	r2, r1
    30d8:	e7e8      	b.n	30ac <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    30da:	2240      	movs	r2, #64	; 0x40
    30dc:	e7e6      	b.n	30ac <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    30de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    30e2:	2300      	movs	r3, #0
    30e4:	4650      	mov	r0, sl
    30e6:	f001 ff73 	bl	4fd0 <z_impl_k_sem_take>
		if (ret != 0) {
    30ea:	b130      	cbz	r0, 30fa <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
    30ec:	4638      	mov	r0, r7
    30ee:	f001 fb23 	bl	4738 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    30f2:	4628      	mov	r0, r5
    30f4:	f7ff ff3c 	bl	2f70 <i2c_nrfx_twi_recover_bus>
			break;
    30f8:	e7e1      	b.n	30be <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
    30fa:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    30fc:	455b      	cmp	r3, fp
    30fe:	f104 040c 	add.w	r4, r4, #12
    3102:	d1dc      	bne.n	30be <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    3104:	f109 0901 	add.w	r9, r9, #1
    3108:	e7a8      	b.n	305c <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    310a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    310e:	e7d8      	b.n	30c2 <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
    3110:	f06f 040f 	mvn.w	r4, #15
    3114:	e7d5      	b.n	30c2 <i2c_nrfx_twi_transfer+0xa2>
    3116:	bf00      	nop
    3118:	0bad0000 	.word	0x0bad0000
    311c:	0bad000b 	.word	0x0bad000b

00003120 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3120:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3122:	794b      	ldrb	r3, [r1, #5]
    3124:	2b01      	cmp	r3, #1
    3126:	d026      	beq.n	3176 <uarte_nrfx_configure+0x56>
    3128:	2b03      	cmp	r3, #3
    312a:	d121      	bne.n	3170 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    312c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    312e:	798b      	ldrb	r3, [r1, #6]
    3130:	2b03      	cmp	r3, #3
    3132:	d11d      	bne.n	3170 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3134:	79ce      	ldrb	r6, [r1, #7]
    3136:	b10e      	cbz	r6, 313c <uarte_nrfx_configure+0x1c>
    3138:	2e01      	cmp	r6, #1
    313a:	d119      	bne.n	3170 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    313c:	790a      	ldrb	r2, [r1, #4]
    313e:	b112      	cbz	r2, 3146 <uarte_nrfx_configure+0x26>
    3140:	2a02      	cmp	r2, #2
    3142:	d115      	bne.n	3170 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3144:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3146:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3148:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    314a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    314e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    3150:	d067      	beq.n	3222 <uarte_nrfx_configure+0x102>
    3152:	d82d      	bhi.n	31b0 <uarte_nrfx_configure+0x90>
    3154:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3158:	d066      	beq.n	3228 <uarte_nrfx_configure+0x108>
    315a:	d816      	bhi.n	318a <uarte_nrfx_configure+0x6a>
    315c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3160:	d064      	beq.n	322c <uarte_nrfx_configure+0x10c>
    3162:	d80a      	bhi.n	317a <uarte_nrfx_configure+0x5a>
    3164:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3168:	d063      	beq.n	3232 <uarte_nrfx_configure+0x112>
    316a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    316e:	d063      	beq.n	3238 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    3170:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3174:	e054      	b.n	3220 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    3176:	2500      	movs	r5, #0
    3178:	e7d9      	b.n	312e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    317a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    317e:	d05e      	beq.n	323e <uarte_nrfx_configure+0x11e>
    3180:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3184:	d1f4      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3186:	4b38      	ldr	r3, [pc, #224]	; (3268 <uarte_nrfx_configure+0x148>)
    3188:	e03c      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    318a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    318e:	d059      	beq.n	3244 <uarte_nrfx_configure+0x124>
    3190:	d807      	bhi.n	31a2 <uarte_nrfx_configure+0x82>
    3192:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3196:	d057      	beq.n	3248 <uarte_nrfx_configure+0x128>
    3198:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    319c:	d1e8      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    319e:	4b33      	ldr	r3, [pc, #204]	; (326c <uarte_nrfx_configure+0x14c>)
    31a0:	e030      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31a2:	f647 2412 	movw	r4, #31250	; 0x7a12
    31a6:	42a3      	cmp	r3, r4
    31a8:	d1e2      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    31aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    31ae:	e029      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31b0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    31b4:	d04a      	beq.n	324c <uarte_nrfx_configure+0x12c>
    31b6:	d813      	bhi.n	31e0 <uarte_nrfx_configure+0xc0>
    31b8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    31bc:	d049      	beq.n	3252 <uarte_nrfx_configure+0x132>
    31be:	d809      	bhi.n	31d4 <uarte_nrfx_configure+0xb4>
    31c0:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    31c4:	42a3      	cmp	r3, r4
    31c6:	d046      	beq.n	3256 <uarte_nrfx_configure+0x136>
    31c8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    31cc:	d1d0      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    31ce:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    31d2:	e017      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31d4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    31d8:	d1ca      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    31da:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    31de:	e011      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31e0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    31e4:	d03a      	beq.n	325c <uarte_nrfx_configure+0x13c>
    31e6:	d808      	bhi.n	31fa <uarte_nrfx_configure+0xda>
    31e8:	4c21      	ldr	r4, [pc, #132]	; (3270 <uarte_nrfx_configure+0x150>)
    31ea:	42a3      	cmp	r3, r4
    31ec:	d039      	beq.n	3262 <uarte_nrfx_configure+0x142>
    31ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    31f2:	d1bd      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    31f4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    31f8:	e004      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31fa:	4c1e      	ldr	r4, [pc, #120]	; (3274 <uarte_nrfx_configure+0x154>)
    31fc:	42a3      	cmp	r3, r4
    31fe:	d1b7      	bne.n	3170 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3204:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3206:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    320a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    320c:	4335      	orrs	r5, r6
    320e:	681b      	ldr	r3, [r3, #0]
    3210:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3212:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3216:	c903      	ldmia	r1, {r0, r1}
    3218:	1d23      	adds	r3, r4, #4
    321a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    321e:	2000      	movs	r0, #0
}
    3220:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3222:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3226:	e7ed      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3228:	4b13      	ldr	r3, [pc, #76]	; (3278 <uarte_nrfx_configure+0x158>)
    322a:	e7eb      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    322c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3230:	e7e8      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3232:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3236:	e7e5      	b.n	3204 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3238:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    323c:	e7e2      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    323e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3242:	e7df      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3244:	4b0d      	ldr	r3, [pc, #52]	; (327c <uarte_nrfx_configure+0x15c>)
    3246:	e7dd      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3248:	4b0d      	ldr	r3, [pc, #52]	; (3280 <uarte_nrfx_configure+0x160>)
    324a:	e7db      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    324c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3250:	e7d8      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3252:	4b0c      	ldr	r3, [pc, #48]	; (3284 <uarte_nrfx_configure+0x164>)
    3254:	e7d6      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3256:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    325a:	e7d3      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    325c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3260:	e7d0      	b.n	3204 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3262:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3266:	e7cd      	b.n	3204 <uarte_nrfx_configure+0xe4>
    3268:	0013b000 	.word	0x0013b000
    326c:	004ea000 	.word	0x004ea000
    3270:	0003d090 	.word	0x0003d090
    3274:	000f4240 	.word	0x000f4240
    3278:	00275000 	.word	0x00275000
    327c:	0075c000 	.word	0x0075c000
    3280:	003af000 	.word	0x003af000
    3284:	013a9000 	.word	0x013a9000

00003288 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    328c:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    328e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    3290:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3292:	2100      	movs	r1, #0
    3294:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3298:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    329a:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
    329e:	4680      	mov	r8, r0
	ret = pinctrl_lookup_state(config, id, &state);
    32a0:	aa01      	add	r2, sp, #4
    32a2:	4648      	mov	r0, r9
    32a4:	f003 fbaf 	bl	6a06 <pinctrl_lookup_state>
	if (ret < 0) {
    32a8:	1e05      	subs	r5, r0, #0
    32aa:	db54      	blt.n	3356 <uarte_instance_init.constprop.0+0xce>
	return pinctrl_apply_state_direct(config, state);
    32ac:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    32ae:	f8d9 2000 	ldr.w	r2, [r9]
    32b2:	7919      	ldrb	r1, [r3, #4]
    32b4:	6818      	ldr	r0, [r3, #0]
    32b6:	f000 facb 	bl	3850 <pinctrl_configure_pins>
	if (err < 0) {
    32ba:	1e05      	subs	r5, r0, #0
    32bc:	db4b      	blt.n	3356 <uarte_instance_init.constprop.0+0xce>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    32be:	1d31      	adds	r1, r6, #4
    32c0:	4640      	mov	r0, r8
    32c2:	f7ff ff2d 	bl	3120 <uarte_nrfx_configure>
	if (err) {
    32c6:	4605      	mov	r5, r0
    32c8:	2800      	cmp	r0, #0
    32ca:	d144      	bne.n	3356 <uarte_instance_init.constprop.0+0xce>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    32cc:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    32ce:	0799      	lsls	r1, r3, #30
    32d0:	d51a      	bpl.n	3308 <uarte_instance_init.constprop.0+0x80>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    32d2:	f106 0018 	add.w	r0, r6, #24
    32d6:	f001 f8c3 	bl	4460 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    32da:	4b22      	ldr	r3, [pc, #136]	; (3364 <uarte_instance_init.constprop.0+0xdc>)
    32dc:	4298      	cmp	r0, r3
    32de:	d13e      	bne.n	335e <uarte_instance_init.constprop.0+0xd6>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    32e0:	7e33      	ldrb	r3, [r6, #24]
    32e2:	00db      	lsls	r3, r3, #3
    32e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32e8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    32ec:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    32f0:	f504 7190 	add.w	r1, r4, #288	; 0x120
    32f4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    32f8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    32fc:	7e32      	ldrb	r2, [r6, #24]
    32fe:	2301      	movs	r3, #1
    3300:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    3302:	4a19      	ldr	r2, [pc, #100]	; (3368 <uarte_instance_init.constprop.0+0xe0>)
    3304:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3308:	2308      	movs	r3, #8
    330a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    330e:	7a3b      	ldrb	r3, [r7, #8]
    3310:	b953      	cbnz	r3, 3328 <uarte_instance_init.constprop.0+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3312:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3316:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    331a:	6973      	ldr	r3, [r6, #20]
    331c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3320:	2301      	movs	r3, #1
    3322:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3326:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    332c:	bf5c      	itt	pl
    332e:	f44f 7380 	movpl.w	r3, #256	; 0x100
    3332:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	06db      	lsls	r3, r3, #27
    333a:	bf44      	itt	mi
    333c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3340:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3344:	6933      	ldr	r3, [r6, #16]
    3346:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    334a:	2300      	movs	r3, #0
    334c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3350:	2301      	movs	r3, #1
    3352:	60a3      	str	r3, [r4, #8]
    3354:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3356:	4628      	mov	r0, r5
    3358:	b003      	add	sp, #12
    335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    335e:	f06f 0504 	mvn.w	r5, #4
    3362:	e7f8      	b.n	3356 <uarte_instance_init.constprop.0+0xce>
    3364:	0bad0000 	.word	0x0bad0000
    3368:	4001f000 	.word	0x4001f000

0000336c <uarte_nrfx_poll_out>:
{
    336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    3370:	6907      	ldr	r7, [r0, #16]
{
    3372:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3374:	f003 fd33 	bl	6dde <k_is_in_isr>
    3378:	b9b0      	cbnz	r0, 33a8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    337a:	4b2e      	ldr	r3, [pc, #184]	; (3434 <uarte_nrfx_poll_out+0xc8>)
    337c:	781b      	ldrb	r3, [r3, #0]
    337e:	b19b      	cbz	r3, 33a8 <uarte_nrfx_poll_out+0x3c>
{
    3380:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3382:	6860      	ldr	r0, [r4, #4]
    3384:	f003 facb 	bl	691e <is_tx_ready.isra.0>
    3388:	bb00      	cbnz	r0, 33cc <uarte_nrfx_poll_out+0x60>
    338a:	2001      	movs	r0, #1
    338c:	f003 fb5e 	bl	6a4c <nrfx_busy_wait>
    3390:	3e01      	subs	r6, #1
    3392:	d1f6      	bne.n	3382 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    3394:	2100      	movs	r1, #0
    3396:	2021      	movs	r0, #33	; 0x21
    3398:	f002 f90a 	bl	55b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    339c:	e7f0      	b.n	3380 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    339e:	f386 8811 	msr	BASEPRI, r6
    33a2:	f3bf 8f6f 	isb	sy
}
    33a6:	e7f5      	b.n	3394 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    33a8:	f04f 0320 	mov.w	r3, #32
    33ac:	f3ef 8611 	mrs	r6, BASEPRI
    33b0:	f383 8812 	msr	BASEPRI_MAX, r3
    33b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    33b8:	6860      	ldr	r0, [r4, #4]
    33ba:	4631      	mov	r1, r6
    33bc:	f003 faaf 	bl	691e <is_tx_ready.isra.0>
    33c0:	b990      	cbnz	r0, 33e8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    33c2:	f386 8811 	msr	BASEPRI, r6
    33c6:	f3bf 8f6f 	isb	sy
}
    33ca:	e7ed      	b.n	33a8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    33cc:	f04f 0320 	mov.w	r3, #32
    33d0:	f3ef 8611 	mrs	r6, BASEPRI
    33d4:	f383 8812 	msr	BASEPRI_MAX, r3
    33d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    33dc:	6860      	ldr	r0, [r4, #4]
    33de:	4631      	mov	r1, r6
    33e0:	f003 fa9d 	bl	691e <is_tx_ready.isra.0>
    33e4:	2800      	cmp	r0, #0
    33e6:	d0da      	beq.n	339e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    33e8:	693b      	ldr	r3, [r7, #16]
    33ea:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    33ec:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    33ee:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    33f0:	6813      	ldr	r3, [r2, #0]
    33f2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    33f6:	2001      	movs	r0, #1
    33f8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33fc:	2000      	movs	r0, #0
    33fe:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    3402:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    3406:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    340a:	6852      	ldr	r2, [r2, #4]
    340c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    3410:	06d2      	lsls	r2, r2, #27
    3412:	d508      	bpl.n	3426 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    3414:	6862      	ldr	r2, [r4, #4]
    3416:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3418:	2008      	movs	r0, #8
    341a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    341e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3422:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3426:	2201      	movs	r2, #1
    3428:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    342a:	f381 8811 	msr	BASEPRI, r1
    342e:	f3bf 8f6f 	isb	sy
}
    3432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3434:	20000ffd 	.word	0x20000ffd

00003438 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3438:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    343a:	2301      	movs	r3, #1
    343c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    343e:	4a0e      	ldr	r2, [pc, #56]	; (3478 <compare_int_lock+0x40>)
    3440:	f3bf 8f5b 	dmb	ish
    3444:	43dc      	mvns	r4, r3
    3446:	e852 1f00 	ldrex	r1, [r2]
    344a:	ea01 0504 	and.w	r5, r1, r4
    344e:	e842 5600 	strex	r6, r5, [r2]
    3452:	2e00      	cmp	r6, #0
    3454:	d1f7      	bne.n	3446 <compare_int_lock+0xe>
    3456:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    345a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    345e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3460:	4806      	ldr	r0, [pc, #24]	; (347c <compare_int_lock+0x44>)
    3462:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3466:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    346a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    346e:	420b      	tst	r3, r1
}
    3470:	bf14      	ite	ne
    3472:	2001      	movne	r0, #1
    3474:	2000      	moveq	r0, #0
    3476:	bd70      	pop	{r4, r5, r6, pc}
    3478:	200008dc 	.word	0x200008dc
    347c:	40011000 	.word	0x40011000

00003480 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3480:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3482:	490e      	ldr	r1, [pc, #56]	; (34bc <sys_clock_timeout_handler+0x3c>)
    3484:	e9d1 3400 	ldrd	r3, r4, [r1]
    3488:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    348a:	18c3      	adds	r3, r0, r3
    348c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    3490:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    3494:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3498:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    349c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    34a0:	d209      	bcs.n	34b6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    34a2:	4b07      	ldr	r3, [pc, #28]	; (34c0 <sys_clock_timeout_handler+0x40>)
    34a4:	681b      	ldr	r3, [r3, #0]
    34a6:	0a1a      	lsrs	r2, r3, #8
    34a8:	061b      	lsls	r3, r3, #24
    34aa:	199c      	adds	r4, r3, r6
    34ac:	4b05      	ldr	r3, [pc, #20]	; (34c4 <sys_clock_timeout_handler+0x44>)
    34ae:	f142 0500 	adc.w	r5, r2, #0
    34b2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    34b6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    34b8:	f002 b9e0 	b.w	587c <sys_clock_announce>
    34bc:	200001e8 	.word	0x200001e8
    34c0:	200008e0 	.word	0x200008e0
    34c4:	200001f0 	.word	0x200001f0

000034c8 <compare_int_unlock>:
	if (key) {
    34c8:	b311      	cbz	r1, 3510 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34ca:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    34ce:	2301      	movs	r3, #1
    34d0:	4a10      	ldr	r2, [pc, #64]	; (3514 <compare_int_unlock+0x4c>)
    34d2:	4083      	lsls	r3, r0
    34d4:	e852 cf00 	ldrex	ip, [r2]
    34d8:	ea4c 0c03 	orr.w	ip, ip, r3
    34dc:	e842 c100 	strex	r1, ip, [r2]
    34e0:	2900      	cmp	r1, #0
    34e2:	d1f7      	bne.n	34d4 <compare_int_unlock+0xc>
    34e4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    34e8:	4a0b      	ldr	r2, [pc, #44]	; (3518 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    34ee:	4083      	lsls	r3, r0
    34f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    34f4:	4b09      	ldr	r3, [pc, #36]	; (351c <compare_int_unlock+0x54>)
    34f6:	f3bf 8f5b 	dmb	ish
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3500:	40c3      	lsrs	r3, r0
    3502:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3504:	bf42      	ittt	mi
    3506:	4b06      	ldrmi	r3, [pc, #24]	; (3520 <compare_int_unlock+0x58>)
    3508:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    350c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3510:	4770      	bx	lr
    3512:	bf00      	nop
    3514:	200008dc 	.word	0x200008dc
    3518:	40011000 	.word	0x40011000
    351c:	200008d8 	.word	0x200008d8
    3520:	e000e100 	.word	0xe000e100

00003524 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3524:	4b0d      	ldr	r3, [pc, #52]	; (355c <z_nrf_rtc_timer_read+0x38>)
    3526:	6818      	ldr	r0, [r3, #0]
    3528:	0a01      	lsrs	r1, r0, #8
    352a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    352c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3530:	4b0b      	ldr	r3, [pc, #44]	; (3560 <z_nrf_rtc_timer_read+0x3c>)
    3532:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3536:	1818      	adds	r0, r3, r0
    3538:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    353c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3540:	d20a      	bcs.n	3558 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3542:	4b08      	ldr	r3, [pc, #32]	; (3564 <z_nrf_rtc_timer_read+0x40>)
    3544:	e9d3 2300 	ldrd	r2, r3, [r3]
    3548:	4290      	cmp	r0, r2
    354a:	eb71 0303 	sbcs.w	r3, r1, r3
    354e:	d203      	bcs.n	3558 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3550:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3554:	f141 0100 	adc.w	r1, r1, #0
}
    3558:	4770      	bx	lr
    355a:	bf00      	nop
    355c:	200008e0 	.word	0x200008e0
    3560:	40011000 	.word	0x40011000
    3564:	200001f0 	.word	0x200001f0

00003568 <compare_set>:
{
    3568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    356c:	4616      	mov	r6, r2
    356e:	461f      	mov	r7, r3
    3570:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3572:	f7ff ff61 	bl	3438 <compare_int_lock>
    3576:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3578:	f7ff ffd4 	bl	3524 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    357c:	42b0      	cmp	r0, r6
    357e:	eb71 0307 	sbcs.w	r3, r1, r7
    3582:	d251      	bcs.n	3628 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3584:	4b3a      	ldr	r3, [pc, #232]	; (3670 <compare_set+0x108>)
    3586:	1a30      	subs	r0, r6, r0
    3588:	eb67 0101 	sbc.w	r1, r7, r1
    358c:	4298      	cmp	r0, r3
    358e:	f171 0100 	sbcs.w	r1, r1, #0
    3592:	d26a      	bcs.n	366a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    3594:	4b37      	ldr	r3, [pc, #220]	; (3674 <compare_set+0x10c>)
    3596:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    359a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    359e:	429f      	cmp	r7, r3
    35a0:	bf08      	it	eq
    35a2:	4296      	cmpeq	r6, r2
    35a4:	d04e      	beq.n	3644 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    35a6:	4934      	ldr	r1, [pc, #208]	; (3678 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35a8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    35ac:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35b0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    35b4:	00ad      	lsls	r5, r5, #2
    35b6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    35ba:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35bc:	b2ad      	uxth	r5, r5
    35be:	f003 fa16 	bl	69ee <event_clear>
	return absolute_time & COUNTER_MAX;
    35c2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    35c6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    35ca:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    35ce:	4a2b      	ldr	r2, [pc, #172]	; (367c <compare_set+0x114>)
    35d0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35d2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    35d6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    35d8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    35dc:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    35de:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    35e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    35e6:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    35ea:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    35ee:	f06f 0002 	mvn.w	r0, #2
    35f2:	eba0 0008 	sub.w	r0, r0, r8
    35f6:	4460      	add	r0, ip
    35f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    35fc:	4290      	cmp	r0, r2
    35fe:	d921      	bls.n	3644 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3600:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    3602:	b160      	cbz	r0, 361e <compare_set+0xb6>
     return p_reg->COUNTER;
    3604:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3608:	eba8 000b 	sub.w	r0, r8, fp
    360c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3610:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3614:	d916      	bls.n	3644 <compare_set+0xdc>
					event_clear(chan);
    3616:	4620      	mov	r0, r4
    3618:	f003 f9e9 	bl	69ee <event_clear>
    361c:	4a17      	ldr	r2, [pc, #92]	; (367c <compare_set+0x114>)
			cc_val = now + cc_inc;
    361e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    3622:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    3626:	e7d9      	b.n	35dc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3628:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    362a:	4a15      	ldr	r2, [pc, #84]	; (3680 <compare_set+0x118>)
    362c:	f3bf 8f5b 	dmb	ish
    3630:	40a3      	lsls	r3, r4
    3632:	e852 0f00 	ldrex	r0, [r2]
    3636:	4318      	orrs	r0, r3
    3638:	e842 0100 	strex	r1, r0, [r2]
    363c:	2900      	cmp	r1, #0
    363e:	d1f8      	bne.n	3632 <compare_set+0xca>
    3640:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3644:	490b      	ldr	r1, [pc, #44]	; (3674 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    3646:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3648:	0123      	lsls	r3, r4, #4
    364a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    364e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    3652:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3656:	6053      	str	r3, [r2, #4]
	return ret;
    3658:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    365a:	4620      	mov	r0, r4
    365c:	9900      	ldr	r1, [sp, #0]
    365e:	f7ff ff33 	bl	34c8 <compare_int_unlock>
}
    3662:	4628      	mov	r0, r5
    3664:	b003      	add	sp, #12
    3666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    366a:	f06f 0515 	mvn.w	r5, #21
    366e:	e7f4      	b.n	365a <compare_set+0xf2>
    3670:	00800001 	.word	0x00800001
    3674:	200001d8 	.word	0x200001d8
    3678:	40011000 	.word	0x40011000
    367c:	007ffffd 	.word	0x007ffffd
    3680:	200008d8 	.word	0x200008d8

00003684 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3684:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3686:	4b19      	ldr	r3, [pc, #100]	; (36ec <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3688:	4d19      	ldr	r5, [pc, #100]	; (36f0 <sys_clock_driver_init+0x6c>)
    368a:	2400      	movs	r4, #0
    368c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3694:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3698:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    369c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    36a0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36a4:	4b13      	ldr	r3, [pc, #76]	; (36f4 <sys_clock_driver_init+0x70>)
    36a6:	2602      	movs	r6, #2
    36a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    36ac:	2101      	movs	r1, #1
    36ae:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    36b2:	2011      	movs	r0, #17
    36b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    36b8:	4622      	mov	r2, r4
    36ba:	f7fe fda9 	bl	2210 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    36be:	2011      	movs	r0, #17
    36c0:	f7fe fd8a 	bl	21d8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    36c4:	4a0c      	ldr	r2, [pc, #48]	; (36f8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    36c6:	2301      	movs	r3, #1
    36c8:	60ab      	str	r3, [r5, #8]
    36ca:	602b      	str	r3, [r5, #0]
    36cc:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    36ce:	4b0b      	ldr	r3, [pc, #44]	; (36fc <sys_clock_driver_init+0x78>)
    36d0:	4a0b      	ldr	r2, [pc, #44]	; (3700 <sys_clock_driver_init+0x7c>)
    36d2:	9300      	str	r3, [sp, #0]
    36d4:	9401      	str	r4, [sp, #4]
    36d6:	2300      	movs	r3, #0
    36d8:	4620      	mov	r0, r4
    36da:	f7ff ff45 	bl	3568 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    36de:	4630      	mov	r0, r6
    36e0:	f7ff fa60 	bl	2ba4 <z_nrf_clock_control_lf_on>

	return 0;
}
    36e4:	4620      	mov	r0, r4
    36e6:	b002      	add	sp, #8
    36e8:	bd70      	pop	{r4, r5, r6, pc}
    36ea:	bf00      	nop
    36ec:	200001d8 	.word	0x200001d8
    36f0:	40011000 	.word	0x40011000
    36f4:	e000e100 	.word	0xe000e100
    36f8:	200008dc 	.word	0x200008dc
    36fc:	00003481 	.word	0x00003481
    3700:	007fffff 	.word	0x007fffff

00003704 <rtc_nrf_isr>:
{
    3704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3708:	4c2f      	ldr	r4, [pc, #188]	; (37c8 <rtc_nrf_isr+0xc4>)
    370a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    370e:	0799      	lsls	r1, r3, #30
    3710:	d50b      	bpl.n	372a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3712:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3716:	b143      	cbz	r3, 372a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3718:	4a2c      	ldr	r2, [pc, #176]	; (37cc <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    371a:	2300      	movs	r3, #0
    371c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3720:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3724:	6813      	ldr	r3, [r2, #0]
    3726:	3301      	adds	r3, #1
    3728:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    372a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    372e:	03da      	lsls	r2, r3, #15
    3730:	d52a      	bpl.n	3788 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3732:	f3bf 8f5b 	dmb	ish
    3736:	4b26      	ldr	r3, [pc, #152]	; (37d0 <rtc_nrf_isr+0xcc>)
    3738:	e853 2f00 	ldrex	r2, [r3]
    373c:	f022 0101 	bic.w	r1, r2, #1
    3740:	e843 1000 	strex	r0, r1, [r3]
    3744:	2800      	cmp	r0, #0
    3746:	d1f7      	bne.n	3738 <rtc_nrf_isr+0x34>
    3748:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    374c:	07d3      	lsls	r3, r2, #31
    374e:	d402      	bmi.n	3756 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3750:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3754:	b1c3      	cbz	r3, 3788 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3756:	2500      	movs	r5, #0
    3758:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    375c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3760:	f7ff fee0 	bl	3524 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3764:	f04f 0320 	mov.w	r3, #32
    3768:	f3ef 8211 	mrs	r2, BASEPRI
    376c:	f383 8812 	msr	BASEPRI_MAX, r3
    3770:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3774:	4b17      	ldr	r3, [pc, #92]	; (37d4 <rtc_nrf_isr+0xd0>)
    3776:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    377a:	42b0      	cmp	r0, r6
    377c:	41b9      	sbcs	r1, r7
    377e:	d206      	bcs.n	378e <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    3780:	f382 8811 	msr	BASEPRI, r2
    3784:	f3bf 8f6f 	isb	sy
}
    3788:	b003      	add	sp, #12
    378a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    378e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3792:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    3796:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    379a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    379e:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    37a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    37a4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    37a8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    37ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    37b0:	f382 8811 	msr	BASEPRI, r2
    37b4:	f3bf 8f6f 	isb	sy
		if (handler) {
    37b8:	2900      	cmp	r1, #0
    37ba:	d0e5      	beq.n	3788 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    37bc:	9000      	str	r0, [sp, #0]
    37be:	4632      	mov	r2, r6
    37c0:	463b      	mov	r3, r7
    37c2:	4628      	mov	r0, r5
    37c4:	4788      	blx	r1
    37c6:	e7df      	b.n	3788 <rtc_nrf_isr+0x84>
    37c8:	40011000 	.word	0x40011000
    37cc:	200008e0 	.word	0x200008e0
    37d0:	200008d8 	.word	0x200008d8
    37d4:	200001d8 	.word	0x200001d8

000037d8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    37d8:	1c43      	adds	r3, r0, #1
{
    37da:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    37dc:	d022      	beq.n	3824 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    37de:	2801      	cmp	r0, #1
    37e0:	dd22      	ble.n	3828 <sys_clock_set_timeout+0x50>
    37e2:	4a12      	ldr	r2, [pc, #72]	; (382c <sys_clock_set_timeout+0x54>)
    37e4:	4b12      	ldr	r3, [pc, #72]	; (3830 <sys_clock_set_timeout+0x58>)
    37e6:	4290      	cmp	r0, r2
    37e8:	bfd4      	ite	le
    37ea:	4604      	movle	r4, r0
    37ec:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    37ee:	f7ff fe99 	bl	3524 <z_nrf_rtc_timer_read>
    37f2:	4b10      	ldr	r3, [pc, #64]	; (3834 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    37f4:	490e      	ldr	r1, [pc, #56]	; (3830 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    37f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    37fa:	1a80      	subs	r0, r0, r2
		cyc = 0;
    37fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3800:	bf28      	it	cs
    3802:	2400      	movcs	r4, #0
	cyc += unannounced;
    3804:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    3806:	428c      	cmp	r4, r1
    3808:	bf28      	it	cs
    380a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    380c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    380e:	490a      	ldr	r1, [pc, #40]	; (3838 <sys_clock_set_timeout+0x60>)
    3810:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3812:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3816:	9001      	str	r0, [sp, #4]
    3818:	f143 0300 	adc.w	r3, r3, #0
    381c:	f7ff fea4 	bl	3568 <compare_set>
}
    3820:	b002      	add	sp, #8
    3822:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    3824:	4c02      	ldr	r4, [pc, #8]	; (3830 <sys_clock_set_timeout+0x58>)
    3826:	e7e2      	b.n	37ee <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3828:	2401      	movs	r4, #1
    382a:	e7e0      	b.n	37ee <sys_clock_set_timeout+0x16>
    382c:	007ffffe 	.word	0x007ffffe
    3830:	007fffff 	.word	0x007fffff
    3834:	200001e8 	.word	0x200001e8
    3838:	00003481 	.word	0x00003481

0000383c <sys_clock_elapsed>:
{
    383c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    383e:	f7ff fe71 	bl	3524 <z_nrf_rtc_timer_read>
    3842:	4b02      	ldr	r3, [pc, #8]	; (384c <sys_clock_elapsed+0x10>)
    3844:	681b      	ldr	r3, [r3, #0]
}
    3846:	1ac0      	subs	r0, r0, r3
    3848:	bd08      	pop	{r3, pc}
    384a:	bf00      	nop
    384c:	200001e8 	.word	0x200001e8

00003850 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    3854:	4e5a      	ldr	r6, [pc, #360]	; (39c0 <pinctrl_configure_pins+0x170>)
    3856:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    385a:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    385c:	4281      	cmp	r1, r0
    385e:	d102      	bne.n	3866 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    3860:	2000      	movs	r0, #0
}
    3862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3866:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    3868:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    386c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    3870:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    3872:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    3876:	bf08      	it	eq
    3878:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    387c:	2c22      	cmp	r4, #34	; 0x22
    387e:	f200 809b 	bhi.w	39b8 <pinctrl_configure_pins+0x168>
    3882:	e8df f004 	tbb	[pc, r4]
    3886:	2412      	.short	0x2412
    3888:	402c4429 	.word	0x402c4429
    388c:	99999944 	.word	0x99999944
    3890:	99704799 	.word	0x99704799
    3894:	99999999 	.word	0x99999999
    3898:	99999999 	.word	0x99999999
    389c:	817e7b73 	.word	0x817e7b73
    38a0:	84999999 	.word	0x84999999
    38a4:	93908d8a 	.word	0x93908d8a
    38a8:	96          	.byte	0x96
    38a9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    38aa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    38ae:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    38b2:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    38b6:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    38ba:	bf14      	ite	ne
    38bc:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    38c0:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    38c2:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    38c6:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    38ca:	2401      	movs	r4, #1
    38cc:	e002      	b.n	38d4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    38ce:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    38d2:	2400      	movs	r4, #0
    38d4:	46a6      	mov	lr, r4
    38d6:	e024      	b.n	3922 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    38d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    38dc:	e7e7      	b.n	38ae <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    38de:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    38e2:	2400      	movs	r4, #0
    return pin_number >> 5;
    38e4:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    38e8:	f1be 0f01 	cmp.w	lr, #1
    38ec:	bf14      	ite	ne
    38ee:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    38f2:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    38f4:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    38f8:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    38fc:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    3900:	f04f 0e01 	mov.w	lr, #1
    3904:	e00d      	b.n	3922 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    3906:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    390a:	2401      	movs	r4, #1
    390c:	e7ea      	b.n	38e4 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    390e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    3912:	e7de      	b.n	38d2 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    3914:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    3918:	2d00      	cmp	r5, #0
    391a:	d1da      	bne.n	38d2 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    391c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    391e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    3920:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    3922:	f850 cb04 	ldr.w	ip, [r0], #4
    3926:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    392a:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    392e:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    3932:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    3936:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    393a:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    393e:	bf1c      	itt	ne
    3940:	2401      	movne	r4, #1
    3942:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3946:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    394a:	2b01      	cmp	r3, #1
    394c:	bf0c      	ite	eq
    394e:	4633      	moveq	r3, r6
    3950:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3954:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    3958:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    395c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3960:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3964:	e77a      	b.n	385c <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    3966:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    396a:	e7d5      	b.n	3918 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    396c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    3970:	6804      	ldr	r4, [r0, #0]
    3972:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    3976:	2c00      	cmp	r4, #0
    3978:	d0c7      	beq.n	390a <pinctrl_configure_pins+0xba>
    397a:	e798      	b.n	38ae <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    397c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    3980:	e7f6      	b.n	3970 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    3982:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    3986:	e7f3      	b.n	3970 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    3988:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    398c:	e7f0      	b.n	3970 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    398e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3992:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    3994:	f04f 0e00 	mov.w	lr, #0
    3998:	e7c3      	b.n	3922 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    399a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    399e:	e786      	b.n	38ae <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    39a0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    39a4:	e7f5      	b.n	3992 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    39a6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    39aa:	e7f2      	b.n	3992 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    39ac:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    39b0:	e7ef      	b.n	3992 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    39b2:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    39b6:	e7ec      	b.n	3992 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    39b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    39bc:	e751      	b.n	3862 <pinctrl_configure_pins+0x12>
    39be:	bf00      	nop
    39c0:	50000300 	.word	0x50000300

000039c4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    39c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    39c8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    39cc:	2a08      	cmp	r2, #8
    39ce:	d106      	bne.n	39de <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    39d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    39d4:	2b05      	cmp	r3, #5
    39d6:	d802      	bhi.n	39de <nrf52_errata_103+0x1a>
    39d8:	4a02      	ldr	r2, [pc, #8]	; (39e4 <nrf52_errata_103+0x20>)
    39da:	5cd0      	ldrb	r0, [r2, r3]
    39dc:	4770      	bx	lr
                        return false;
    39de:	2000      	movs	r0, #0
}
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	000076fc 	.word	0x000076fc

000039e8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    39e8:	4a02      	ldr	r2, [pc, #8]	; (39f4 <nvmc_wait+0xc>)
    39ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    39ee:	2b00      	cmp	r3, #0
    39f0:	d0fb      	beq.n	39ea <nvmc_wait+0x2>
}
    39f2:	4770      	bx	lr
    39f4:	4001e000 	.word	0x4001e000

000039f8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    39f8:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    39fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    39fe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3a02:	2a08      	cmp	r2, #8
    3a04:	d14e      	bne.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    3a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a0a:	2100      	movs	r1, #0
    3a0c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3a10:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3a14:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3a18:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    3a1c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    3a20:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3a24:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    3a28:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3a2c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    3a30:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3a34:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    3a38:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3a3c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    3a40:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3a44:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3a48:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3a4c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    3a50:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3a54:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    3a58:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3a5c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    3a60:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3a64:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    3a68:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3a6c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    3a70:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3a74:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    3a78:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3a7c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    3a80:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3a84:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    3a88:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3a8c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    3a90:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3a94:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    3a98:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3a9c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    3aa0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3aa4:	f7ff ff8e 	bl	39c4 <nrf52_errata_103>
    3aa8:	b118      	cbz	r0, 3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3aaa:	4b3b      	ldr	r3, [pc, #236]	; (3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>)
    3aac:	4a3b      	ldr	r2, [pc, #236]	; (3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>)
    3aae:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3ab2:	f7ff ff87 	bl	39c4 <nrf52_errata_103>
    3ab6:	b118      	cbz	r0, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3ab8:	4b39      	ldr	r3, [pc, #228]	; (3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>)
    3aba:	22fb      	movs	r2, #251	; 0xfb
    3abc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3ac0:	f7ff ff80 	bl	39c4 <nrf52_errata_103>
    3ac4:	b170      	cbz	r0, 3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3ac6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3aca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3ace:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3ad2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3ad6:	f022 020f 	bic.w	r2, r2, #15
    3ada:	f003 030f 	and.w	r3, r3, #15
    3ade:	4313      	orrs	r3, r2
    3ae0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3ae4:	f7ff ff6e 	bl	39c4 <nrf52_errata_103>
    3ae8:	b120      	cbz	r0, 3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3aea:	4b2e      	ldr	r3, [pc, #184]	; (3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>)
    3aec:	f44f 7200 	mov.w	r2, #512	; 0x200
    3af0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3af8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3afc:	2b08      	cmp	r3, #8
    3afe:	d11a      	bne.n	3b36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b04:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3b08:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3b0a:	bf44      	itt	mi
    3b0c:	f06f 0201 	mvnmi.w	r2, #1
    3b10:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3b18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    3b1c:	2b05      	cmp	r3, #5
    3b1e:	d802      	bhi.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3b20:	4a21      	ldr	r2, [pc, #132]	; (3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>)
    3b22:	5cd3      	ldrb	r3, [r2, r3]
    3b24:	b13b      	cbz	r3, 3b36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3b26:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3b2a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b32:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3b36:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3b3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b3e:	2a00      	cmp	r2, #0
    3b40:	db03      	blt.n	3b4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3b42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3b46:	2b00      	cmp	r3, #0
    3b48:	da22      	bge.n	3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3b4a:	4918      	ldr	r1, [pc, #96]	; (3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>)
    3b4c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3b4e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3b52:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3b56:	2412      	movs	r4, #18
    nvmc_wait();
    3b58:	f7ff ff46 	bl	39e8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3b5c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3b60:	f7ff ff42 	bl	39e8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3b64:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3b68:	f7ff ff3e 	bl	39e8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3b6c:	2300      	movs	r3, #0
    3b6e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3b72:	f7ff ff39 	bl	39e8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3b76:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3b7a:	490d      	ldr	r1, [pc, #52]	; (3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>)
    3b7c:	4b0d      	ldr	r3, [pc, #52]	; (3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>)
    3b7e:	68ca      	ldr	r2, [r1, #12]
    3b80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3b84:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3b86:	60cb      	str	r3, [r1, #12]
    3b88:	f3bf 8f4f 	dsb	sy
    __NOP();
    3b8c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3b8e:	e7fd      	b.n	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3b90:	4b09      	ldr	r3, [pc, #36]	; (3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>)
    3b92:	4a0a      	ldr	r2, [pc, #40]	; (3bbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x124>)
    3b94:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3b96:	bd10      	pop	{r4, pc}
    3b98:	40005000 	.word	0x40005000
    3b9c:	00038148 	.word	0x00038148
    3ba0:	4000f000 	.word	0x4000f000
    3ba4:	40029000 	.word	0x40029000
    3ba8:	000076f6 	.word	0x000076f6
    3bac:	4001e000 	.word	0x4001e000
    3bb0:	e000ed00 	.word	0xe000ed00
    3bb4:	05fa0004 	.word	0x05fa0004
    3bb8:	2000008c 	.word	0x2000008c
    3bbc:	03d09000 	.word	0x03d09000

00003bc0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3bc0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3bc2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3bc4:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3bc6:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    3bca:	fab2 f382 	clz	r3, r2
    3bce:	f1c3 031f 	rsb	r3, r3, #31
    3bd2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3bd4:	fa05 f403 	lsl.w	r4, r5, r3
    3bd8:	ea22 0404 	bic.w	r4, r2, r4
    3bdc:	e850 6f00 	ldrex	r6, [r0]
    3be0:	4296      	cmp	r6, r2
    3be2:	d104      	bne.n	3bee <nrfx_flag32_alloc+0x2e>
    3be4:	e840 4c00 	strex	ip, r4, [r0]
    3be8:	f1bc 0f00 	cmp.w	ip, #0
    3bec:	d1f6      	bne.n	3bdc <nrfx_flag32_alloc+0x1c>
    3bee:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3bf2:	d1e7      	bne.n	3bc4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    3bf4:	4801      	ldr	r0, [pc, #4]	; (3bfc <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    3bf6:	700b      	strb	r3, [r1, #0]
}
    3bf8:	bd70      	pop	{r4, r5, r6, pc}
    3bfa:	bf00      	nop
    3bfc:	0bad0000 	.word	0x0bad0000

00003c00 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    3c00:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3c02:	6803      	ldr	r3, [r0, #0]
    3c04:	40cb      	lsrs	r3, r1
    3c06:	07db      	lsls	r3, r3, #31
    3c08:	d414      	bmi.n	3c34 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3c0a:	2301      	movs	r3, #1
    3c0c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    3c0e:	6802      	ldr	r2, [r0, #0]
    3c10:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3c14:	ea43 0102 	orr.w	r1, r3, r2
    3c18:	e850 4f00 	ldrex	r4, [r0]
    3c1c:	4294      	cmp	r4, r2
    3c1e:	d104      	bne.n	3c2a <nrfx_flag32_free+0x2a>
    3c20:	e840 1c00 	strex	ip, r1, [r0]
    3c24:	f1bc 0f00 	cmp.w	ip, #0
    3c28:	d1f6      	bne.n	3c18 <nrfx_flag32_free+0x18>
    3c2a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3c2e:	d1ee      	bne.n	3c0e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    3c30:	4801      	ldr	r0, [pc, #4]	; (3c38 <nrfx_flag32_free+0x38>)
}
    3c32:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3c34:	4801      	ldr	r0, [pc, #4]	; (3c3c <nrfx_flag32_free+0x3c>)
    3c36:	e7fc      	b.n	3c32 <nrfx_flag32_free+0x32>
    3c38:	0bad0000 	.word	0x0bad0000
    3c3c:	0bad0004 	.word	0x0bad0004

00003c40 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    3c42:	4604      	mov	r4, r0
    3c44:	b118      	cbz	r0, 3c4e <clock_stop+0xe>
    3c46:	2801      	cmp	r0, #1
    3c48:	d022      	beq.n	3c90 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3c4a:	b003      	add	sp, #12
    3c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    3c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c52:	2202      	movs	r2, #2
    3c54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c58:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    3c5c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c60:	2201      	movs	r2, #1
    3c62:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3c64:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3c66:	2301      	movs	r3, #1
    3c68:	f88d 3007 	strb.w	r3, [sp, #7]
    3c6c:	f242 7510 	movw	r5, #10000	; 0x2710
    3c70:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3c74:	b1cc      	cbz	r4, 3caa <clock_stop+0x6a>
    3c76:	2c01      	cmp	r4, #1
    3c78:	d1e7      	bne.n	3c4a <clock_stop+0xa>
            if (p_clk_src != NULL)
    3c7a:	b3c7      	cbz	r7, 3cee <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3c7c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3c80:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3c84:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3c86:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3c8a:	03da      	lsls	r2, r3, #15
    3c8c:	d521      	bpl.n	3cd2 <clock_stop+0x92>
    3c8e:	e016      	b.n	3cbe <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    3c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c94:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3c96:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3c9e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ca2:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3ca4:	f10d 0707 	add.w	r7, sp, #7
    3ca8:	e7dd      	b.n	3c66 <clock_stop+0x26>
            if (p_clk_src != NULL)
    3caa:	b1b7      	cbz	r7, 3cda <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3cac:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3cb0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3cb4:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3cb6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3cba:	03d8      	lsls	r0, r3, #15
    3cbc:	d5c5      	bpl.n	3c4a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3cbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3cc2:	2801      	cmp	r0, #1
    3cc4:	d103      	bne.n	3cce <clock_stop+0x8e>
    3cc6:	f002 fec1 	bl	6a4c <nrfx_busy_wait>
    3cca:	3d01      	subs	r5, #1
    3ccc:	d1d2      	bne.n	3c74 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3cce:	2c01      	cmp	r4, #1
    3cd0:	d1bb      	bne.n	3c4a <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    3cd2:	4b0c      	ldr	r3, [pc, #48]	; (3d04 <clock_stop+0xc4>)
    3cd4:	2200      	movs	r2, #0
    3cd6:	715a      	strb	r2, [r3, #5]
    3cd8:	e7b7      	b.n	3c4a <clock_stop+0xa>
    3cda:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3cde:	03d9      	lsls	r1, r3, #15
    3ce0:	d5b3      	bpl.n	3c4a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3ce2:	2001      	movs	r0, #1
    3ce4:	f002 feb2 	bl	6a4c <nrfx_busy_wait>
    3ce8:	3d01      	subs	r5, #1
    3cea:	d1f6      	bne.n	3cda <clock_stop+0x9a>
    3cec:	e7ad      	b.n	3c4a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3cee:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3cf2:	03db      	lsls	r3, r3, #15
    3cf4:	d5ed      	bpl.n	3cd2 <clock_stop+0x92>
    3cf6:	2001      	movs	r0, #1
    3cf8:	f002 fea8 	bl	6a4c <nrfx_busy_wait>
    3cfc:	3d01      	subs	r5, #1
    3cfe:	d1f6      	bne.n	3cee <clock_stop+0xae>
    3d00:	e7e7      	b.n	3cd2 <clock_stop+0x92>
    3d02:	bf00      	nop
    3d04:	200008e4 	.word	0x200008e4

00003d08 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3d08:	4b04      	ldr	r3, [pc, #16]	; (3d1c <nrfx_clock_init+0x14>)
    3d0a:	791a      	ldrb	r2, [r3, #4]
    3d0c:	b922      	cbnz	r2, 3d18 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3d0e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3d10:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3d12:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3d14:	4802      	ldr	r0, [pc, #8]	; (3d20 <nrfx_clock_init+0x18>)
    3d16:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3d18:	4802      	ldr	r0, [pc, #8]	; (3d24 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3d1a:	4770      	bx	lr
    3d1c:	200008e4 	.word	0x200008e4
    3d20:	0bad0000 	.word	0x0bad0000
    3d24:	0bad000c 	.word	0x0bad000c

00003d28 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3d28:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d2e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3d32:	b16a      	cbz	r2, 3d50 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d34:	2200      	movs	r2, #0
    3d36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3d3a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3d3e:	2201      	movs	r2, #1
    3d40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3d44:	4b11      	ldr	r3, [pc, #68]	; (3d8c <nrfx_power_clock_irq_handler+0x64>)
    3d46:	7958      	ldrb	r0, [r3, #5]
    3d48:	b910      	cbnz	r0, 3d50 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3d4a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3d4c:	681b      	ldr	r3, [r3, #0]
    3d4e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3d58:	b172      	cbz	r2, 3d78 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d5a:	2200      	movs	r2, #0
    3d5c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3d60:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3d64:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3d68:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3d6c:	0792      	lsls	r2, r2, #30
    3d6e:	d104      	bne.n	3d7a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3d70:	2201      	movs	r2, #1
    3d72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d76:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3d78:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3d7a:	2202      	movs	r2, #2
    3d7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3d80:	4b02      	ldr	r3, [pc, #8]	; (3d8c <nrfx_power_clock_irq_handler+0x64>)
}
    3d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	2001      	movs	r0, #1
    3d8a:	4718      	bx	r3
    3d8c:	200008e4 	.word	0x200008e4

00003d90 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3d90:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3d92:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3d96:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    3d98:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3d9a:	6002      	str	r2, [r0, #0]
}
    3d9c:	4802      	ldr	r0, [pc, #8]	; (3da8 <nrf_gpio_pin_port_decode+0x18>)
    3d9e:	bf18      	it	ne
    3da0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3da4:	4770      	bx	lr
    3da6:	bf00      	nop
    3da8:	50000300 	.word	0x50000300

00003dac <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3dac:	4b03      	ldr	r3, [pc, #12]	; (3dbc <pin_in_use_by_te+0x10>)
    3dae:	3008      	adds	r0, #8
    3db0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3db4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3db8:	4770      	bx	lr
    3dba:	bf00      	nop
    3dbc:	20000090 	.word	0x20000090

00003dc0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3dc0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3dc2:	f100 0308 	add.w	r3, r0, #8
    3dc6:	4c0c      	ldr	r4, [pc, #48]	; (3df8 <call_handler+0x38>)
    3dc8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3dcc:	05da      	lsls	r2, r3, #23
{
    3dce:	4605      	mov	r5, r0
    3dd0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3dd2:	d507      	bpl.n	3de4 <call_handler+0x24>
    3dd4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3dd8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3ddc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3de0:	6852      	ldr	r2, [r2, #4]
    3de2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3de4:	68a3      	ldr	r3, [r4, #8]
    3de6:	b12b      	cbz	r3, 3df4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3de8:	68e2      	ldr	r2, [r4, #12]
    3dea:	4631      	mov	r1, r6
    3dec:	4628      	mov	r0, r5
    }
}
    3dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3df2:	4718      	bx	r3
}
    3df4:	bd70      	pop	{r4, r5, r6, pc}
    3df6:	bf00      	nop
    3df8:	20000090 	.word	0x20000090

00003dfc <release_handler>:
{
    3dfc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3dfe:	4a12      	ldr	r2, [pc, #72]	; (3e48 <release_handler+0x4c>)
    3e00:	3008      	adds	r0, #8
    3e02:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3e06:	05d9      	lsls	r1, r3, #23
    3e08:	d51b      	bpl.n	3e42 <release_handler+0x46>
    3e0a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3e0e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3e12:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3e16:	f102 040e 	add.w	r4, r2, #14
    3e1a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3e1c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3e20:	f413 7f80 	tst.w	r3, #256	; 0x100
    3e24:	d003      	beq.n	3e2e <release_handler+0x32>
    3e26:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3e2a:	4299      	cmp	r1, r3
    3e2c:	d009      	beq.n	3e42 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3e2e:	3001      	adds	r0, #1
    3e30:	2830      	cmp	r0, #48	; 0x30
    3e32:	d1f3      	bne.n	3e1c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3e34:	2300      	movs	r3, #0
    3e36:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3e3a:	4804      	ldr	r0, [pc, #16]	; (3e4c <release_handler+0x50>)
}
    3e3c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3e3e:	f7ff bedf 	b.w	3c00 <nrfx_flag32_free>
}
    3e42:	bc10      	pop	{r4}
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop
    3e48:	20000090 	.word	0x20000090
    3e4c:	20000104 	.word	0x20000104

00003e50 <pin_handler_trigger_uninit>:
{
    3e50:	b538      	push	{r3, r4, r5, lr}
    3e52:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3e54:	f7ff ffaa 	bl	3dac <pin_in_use_by_te>
    3e58:	4c09      	ldr	r4, [pc, #36]	; (3e80 <pin_handler_trigger_uninit+0x30>)
    3e5a:	f102 0508 	add.w	r5, r2, #8
    3e5e:	b140      	cbz	r0, 3e72 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e60:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3e64:	4907      	ldr	r1, [pc, #28]	; (3e84 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3e66:	0b5b      	lsrs	r3, r3, #13
    3e68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3e6c:	2000      	movs	r0, #0
    3e6e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    3e72:	4610      	mov	r0, r2
    3e74:	f7ff ffc2 	bl	3dfc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3e78:	2300      	movs	r3, #0
    3e7a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3e7e:	bd38      	pop	{r3, r4, r5, pc}
    3e80:	20000090 	.word	0x20000090
    3e84:	40006000 	.word	0x40006000

00003e88 <nrfx_gpiote_input_configure>:
{
    3e88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3e8c:	4604      	mov	r4, r0
    3e8e:	4616      	mov	r6, r2
    3e90:	461d      	mov	r5, r3
    if (p_input_config)
    3e92:	b301      	cbz	r1, 3ed6 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e94:	4f4e      	ldr	r7, [pc, #312]	; (3fd0 <nrfx_gpiote_input_configure+0x148>)
    3e96:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3e9a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    3e9e:	079b      	lsls	r3, r3, #30
    3ea0:	d502      	bpl.n	3ea8 <nrfx_gpiote_input_configure+0x20>
    3ea2:	f7ff ff83 	bl	3dac <pin_in_use_by_te>
    3ea6:	bb10      	cbnz	r0, 3eee <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3ea8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3eaa:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3eae:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3eb2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3eb6:	f10d 020f 	add.w	r2, sp, #15
    3eba:	460b      	mov	r3, r1
    3ebc:	4620      	mov	r0, r4
    3ebe:	f10d 010e 	add.w	r1, sp, #14
    3ec2:	f002 fe10 	bl	6ae6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3ec6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    3eca:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3ece:	f043 0301 	orr.w	r3, r3, #1
    3ed2:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    3ed6:	b346      	cbz	r6, 3f2a <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ed8:	4b3d      	ldr	r3, [pc, #244]	; (3fd0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3eda:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3ede:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ee0:	f104 0708 	add.w	r7, r4, #8
    3ee4:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    3ee8:	0788      	lsls	r0, r1, #30
    3eea:	d502      	bpl.n	3ef2 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    3eec:	b1aa      	cbz	r2, 3f1a <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    3eee:	4839      	ldr	r0, [pc, #228]	; (3fd4 <nrfx_gpiote_input_configure+0x14c>)
    3ef0:	e01d      	b.n	3f2e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3ef2:	f021 0120 	bic.w	r1, r1, #32
    3ef6:	04c9      	lsls	r1, r1, #19
    3ef8:	0cc9      	lsrs	r1, r1, #19
    3efa:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    3efe:	b162      	cbz	r2, 3f1a <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    3f00:	f1bc 0f03 	cmp.w	ip, #3
    3f04:	d8f3      	bhi.n	3eee <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3f06:	6872      	ldr	r2, [r6, #4]
    3f08:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3f0a:	f1bc 0f00 	cmp.w	ip, #0
    3f0e:	d111      	bne.n	3f34 <nrfx_gpiote_input_configure+0xac>
    3f10:	4a31      	ldr	r2, [pc, #196]	; (3fd8 <nrfx_gpiote_input_configure+0x150>)
    3f12:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    3f16:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3f1a:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    3f1e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3f22:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    3f26:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    3f2a:	bb45      	cbnz	r5, 3f7e <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    3f2c:	482b      	ldr	r0, [pc, #172]	; (3fdc <nrfx_gpiote_input_configure+0x154>)
}
    3f2e:	b004      	add	sp, #16
    3f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3f34:	00b2      	lsls	r2, r6, #2
    3f36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3f3a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3f3e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    3f42:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3f46:	f020 0003 	bic.w	r0, r0, #3
    3f4a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3f4e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3f52:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    3f56:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3f5a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3f5e:	0220      	lsls	r0, r4, #8
    3f60:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3f64:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    3f68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    3f6c:	ea40 000e 	orr.w	r0, r0, lr
    3f70:	f041 0120 	orr.w	r1, r1, #32
    3f74:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    3f78:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3f7c:	e7cd      	b.n	3f1a <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3f7e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3f82:	4620      	mov	r0, r4
    3f84:	f7ff ff3a 	bl	3dfc <release_handler>
    if (!handler)
    3f88:	2e00      	cmp	r6, #0
    3f8a:	d0cf      	beq.n	3f2c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3f8c:	4d10      	ldr	r5, [pc, #64]	; (3fd0 <nrfx_gpiote_input_configure+0x148>)
    3f8e:	e9d5 2300 	ldrd	r2, r3, [r5]
    3f92:	4296      	cmp	r6, r2
    3f94:	d101      	bne.n	3f9a <nrfx_gpiote_input_configure+0x112>
    3f96:	429f      	cmp	r7, r3
    3f98:	d018      	beq.n	3fcc <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3f9a:	4811      	ldr	r0, [pc, #68]	; (3fe0 <nrfx_gpiote_input_configure+0x158>)
    3f9c:	f10d 010f 	add.w	r1, sp, #15
    3fa0:	f7ff fe0e 	bl	3bc0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3fa4:	4b0d      	ldr	r3, [pc, #52]	; (3fdc <nrfx_gpiote_input_configure+0x154>)
    3fa6:	4298      	cmp	r0, r3
    3fa8:	d1c1      	bne.n	3f2e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    3faa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3fae:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3fb2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3fb6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3fb8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3fba:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3fbe:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3fc6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3fca:	e7af      	b.n	3f2c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3fcc:	2200      	movs	r2, #0
    3fce:	e7ee      	b.n	3fae <nrfx_gpiote_input_configure+0x126>
    3fd0:	20000090 	.word	0x20000090
    3fd4:	0bad0004 	.word	0x0bad0004
    3fd8:	40006000 	.word	0x40006000
    3fdc:	0bad0000 	.word	0x0bad0000
    3fe0:	20000104 	.word	0x20000104

00003fe4 <nrfx_gpiote_output_configure>:
{
    3fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fe6:	4604      	mov	r4, r0
    3fe8:	b085      	sub	sp, #20
    3fea:	4615      	mov	r5, r2
    if (p_config)
    3fec:	b319      	cbz	r1, 4036 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3fee:	4e33      	ldr	r6, [pc, #204]	; (40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>)
    3ff0:	f100 0708 	add.w	r7, r0, #8
    3ff4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3ff8:	0793      	lsls	r3, r2, #30
    3ffa:	d403      	bmi.n	4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>
    3ffc:	f7ff fed6 	bl	3dac <pin_in_use_by_te>
    4000:	2800      	cmp	r0, #0
    4002:	d158      	bne.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4004:	f012 0f1c 	tst.w	r2, #28
    4008:	d002      	beq.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400a:	784b      	ldrb	r3, [r1, #1]
    400c:	2b01      	cmp	r3, #1
    400e:	d052      	beq.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4010:	2301      	movs	r3, #1
    4012:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4016:	2300      	movs	r3, #0
    4018:	e9cd 1300 	strd	r1, r3, [sp]
    401c:	1c4a      	adds	r2, r1, #1
    401e:	1c8b      	adds	r3, r1, #2
    4020:	4620      	mov	r0, r4
    4022:	f10d 010f 	add.w	r1, sp, #15
    4026:	f002 fd5e 	bl	6ae6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    402a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    402e:	f043 0303 	orr.w	r3, r3, #3
    4032:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4036:	b915      	cbnz	r5, 403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>
    return NRFX_SUCCESS;
    4038:	4821      	ldr	r0, [pc, #132]	; (40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>)
}
    403a:	b005      	add	sp, #20
    403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    403e:	4e1f      	ldr	r6, [pc, #124]	; (40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>)
    4040:	f104 0708 	add.w	r7, r4, #8
    4044:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4048:	0783      	lsls	r3, r0, #30
    404a:	d534      	bpl.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
        uint32_t ch = p_task_config->task_ch;
    404c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4050:	4661      	mov	r1, ip
    4052:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4054:	f020 0020 	bic.w	r0, r0, #32
    4058:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    405c:	04c0      	lsls	r0, r0, #19
    405e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4062:	0cc0      	lsrs	r0, r0, #19
    4064:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4068:	2300      	movs	r3, #0
    406a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    406e:	786a      	ldrb	r2, [r5, #1]
    4070:	2a00      	cmp	r2, #0
    4072:	d0e1      	beq.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4074:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4078:	78ad      	ldrb	r5, [r5, #2]
    407a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    407e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4082:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4086:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    408a:	0223      	lsls	r3, r4, #8
    408c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4090:	0412      	lsls	r2, r2, #16
    4092:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4096:	ea43 030e 	orr.w	r3, r3, lr
    409a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    409c:	052a      	lsls	r2, r5, #20
    409e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    40a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    40a6:	4313      	orrs	r3, r2
    40a8:	f040 0020 	orr.w	r0, r0, #32
    40ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    40b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    40b4:	e7c0      	b.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
{
    40b6:	4803      	ldr	r0, [pc, #12]	; (40c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc4>)
    40b8:	e7bf      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    40ba:	bf00      	nop
    40bc:	20000090 	.word	0x20000090
    40c0:	0bad0000 	.word	0x0bad0000
    40c4:	0bad0004 	.word	0x0bad0004

000040c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    40c8:	4b01      	ldr	r3, [pc, #4]	; (40d0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    40ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    40ce:	4770      	bx	lr
    40d0:	20000090 	.word	0x20000090

000040d4 <nrfx_gpiote_channel_get>:
{
    40d4:	b508      	push	{r3, lr}
    40d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    40d8:	f7ff fe68 	bl	3dac <pin_in_use_by_te>
    40dc:	b138      	cbz	r0, 40ee <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    40de:	4b05      	ldr	r3, [pc, #20]	; (40f4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    40e0:	4805      	ldr	r0, [pc, #20]	; (40f8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    40e2:	3208      	adds	r2, #8
    40e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    40e8:	0b5b      	lsrs	r3, r3, #13
    40ea:	700b      	strb	r3, [r1, #0]
}
    40ec:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    40ee:	4803      	ldr	r0, [pc, #12]	; (40fc <nrfx_gpiote_channel_get+0x28>)
    40f0:	e7fc      	b.n	40ec <nrfx_gpiote_channel_get+0x18>
    40f2:	bf00      	nop
    40f4:	20000090 	.word	0x20000090
    40f8:	0bad0000 	.word	0x0bad0000
    40fc:	0bad0004 	.word	0x0bad0004

00004100 <nrfx_gpiote_init>:
{
    4100:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4102:	4c0f      	ldr	r4, [pc, #60]	; (4140 <nrfx_gpiote_init+0x40>)
    4104:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4108:	b9bd      	cbnz	r5, 413a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    410a:	2260      	movs	r2, #96	; 0x60
    410c:	4629      	mov	r1, r5
    410e:	f104 0010 	add.w	r0, r4, #16
    4112:	f002 fac2 	bl	669a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4116:	2006      	movs	r0, #6
    4118:	f7fe f85e 	bl	21d8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    411c:	4b09      	ldr	r3, [pc, #36]	; (4144 <nrfx_gpiote_init+0x44>)
    return err_code;
    411e:	480a      	ldr	r0, [pc, #40]	; (4148 <nrfx_gpiote_init+0x48>)
    4120:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4124:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4128:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    412c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4130:	2301      	movs	r3, #1
    4132:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4136:	6763      	str	r3, [r4, #116]	; 0x74
}
    4138:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    413a:	4804      	ldr	r0, [pc, #16]	; (414c <nrfx_gpiote_init+0x4c>)
    413c:	e7fc      	b.n	4138 <nrfx_gpiote_init+0x38>
    413e:	bf00      	nop
    4140:	20000090 	.word	0x20000090
    4144:	40006000 	.word	0x40006000
    4148:	0bad0000 	.word	0x0bad0000
    414c:	0bad0005 	.word	0x0bad0005

00004150 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4150:	4b03      	ldr	r3, [pc, #12]	; (4160 <nrfx_gpiote_is_init+0x10>)
    4152:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4156:	3800      	subs	r0, #0
    4158:	bf18      	it	ne
    415a:	2001      	movne	r0, #1
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	20000090 	.word	0x20000090

00004164 <nrfx_gpiote_channel_free>:
{
    4164:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4166:	4801      	ldr	r0, [pc, #4]	; (416c <nrfx_gpiote_channel_free+0x8>)
    4168:	f7ff bd4a 	b.w	3c00 <nrfx_flag32_free>
    416c:	20000100 	.word	0x20000100

00004170 <nrfx_gpiote_channel_alloc>:
{
    4170:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4172:	4801      	ldr	r0, [pc, #4]	; (4178 <nrfx_gpiote_channel_alloc+0x8>)
    4174:	f7ff bd24 	b.w	3bc0 <nrfx_flag32_alloc>
    4178:	20000100 	.word	0x20000100

0000417c <nrfx_gpiote_trigger_enable>:
{
    417c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    417e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4180:	f7ff fe14 	bl	3dac <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4184:	f104 0208 	add.w	r2, r4, #8
    4188:	4b1e      	ldr	r3, [pc, #120]	; (4204 <nrfx_gpiote_trigger_enable+0x88>)
    418a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    418e:	b1e8      	cbz	r0, 41cc <nrfx_gpiote_trigger_enable+0x50>
    4190:	f013 0502 	ands.w	r5, r3, #2
    4194:	d11a      	bne.n	41cc <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4196:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4198:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    419a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    419e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    41a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    41a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    41aa:	6005      	str	r5, [r0, #0]
    41ac:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    41ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    41b2:	f040 0001 	orr.w	r0, r0, #1
    41b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    41ba:	b129      	cbz	r1, 41c8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    41bc:	2201      	movs	r2, #1
    41be:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    41c2:	4a11      	ldr	r2, [pc, #68]	; (4208 <nrfx_gpiote_trigger_enable+0x8c>)
    41c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    41c8:	b003      	add	sp, #12
    41ca:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    41cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    41d0:	2b04      	cmp	r3, #4
    41d2:	d012      	beq.n	41fa <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    41d4:	2b05      	cmp	r3, #5
    41d6:	d012      	beq.n	41fe <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41d8:	a801      	add	r0, sp, #4
    41da:	9401      	str	r4, [sp, #4]
    41dc:	f7ff fdd8 	bl	3d90 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    41e0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    41e2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    41e6:	40d9      	lsrs	r1, r3
    41e8:	f001 0101 	and.w	r1, r1, #1
    41ec:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    41ee:	4620      	mov	r0, r4
}
    41f0:	b003      	add	sp, #12
    41f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    41f6:	f002 bcbf 	b.w	6b78 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    41fa:	2103      	movs	r1, #3
    41fc:	e7f7      	b.n	41ee <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    41fe:	2102      	movs	r1, #2
    4200:	e7f5      	b.n	41ee <nrfx_gpiote_trigger_enable+0x72>
    4202:	bf00      	nop
    4204:	20000090 	.word	0x20000090
    4208:	40006000 	.word	0x40006000

0000420c <nrfx_gpiote_trigger_disable>:
{
    420c:	b508      	push	{r3, lr}
    420e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4210:	f7ff fdcc 	bl	3dac <pin_in_use_by_te>
    4214:	b1c0      	cbz	r0, 4248 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4216:	f102 0108 	add.w	r1, r2, #8
    421a:	4b0e      	ldr	r3, [pc, #56]	; (4254 <nrfx_gpiote_trigger_disable+0x48>)
    421c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4220:	0799      	lsls	r1, r3, #30
    4222:	d411      	bmi.n	4248 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4224:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4226:	2201      	movs	r2, #1
    4228:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    422a:	009b      	lsls	r3, r3, #2
    422c:	490a      	ldr	r1, [pc, #40]	; (4258 <nrfx_gpiote_trigger_disable+0x4c>)
    422e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4232:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4236:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    423a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    423e:	f022 0203 	bic.w	r2, r2, #3
    4242:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4246:	bd08      	pop	{r3, pc}
    4248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    424c:	2100      	movs	r1, #0
    424e:	4610      	mov	r0, r2
    4250:	f002 bc92 	b.w	6b78 <nrf_gpio_cfg_sense_set>
    4254:	20000090 	.word	0x20000090
    4258:	40006000 	.word	0x40006000

0000425c <nrfx_gpiote_pin_uninit>:
{
    425c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    425e:	4b0e      	ldr	r3, [pc, #56]	; (4298 <nrfx_gpiote_pin_uninit+0x3c>)
    4260:	f100 0208 	add.w	r2, r0, #8
{
    4264:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4266:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    426a:	07db      	lsls	r3, r3, #31
    426c:	d511      	bpl.n	4292 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    426e:	f7ff ffcd 	bl	420c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4272:	4620      	mov	r0, r4
    4274:	f7ff fdec 	bl	3e50 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4278:	a801      	add	r0, sp, #4
    427a:	9401      	str	r4, [sp, #4]
    427c:	f7ff fd88 	bl	3d90 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4280:	9b01      	ldr	r3, [sp, #4]
    4282:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4286:	2202      	movs	r2, #2
    4288:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    428c:	4803      	ldr	r0, [pc, #12]	; (429c <nrfx_gpiote_pin_uninit+0x40>)
}
    428e:	b002      	add	sp, #8
    4290:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4292:	4803      	ldr	r0, [pc, #12]	; (42a0 <nrfx_gpiote_pin_uninit+0x44>)
    4294:	e7fb      	b.n	428e <nrfx_gpiote_pin_uninit+0x32>
    4296:	bf00      	nop
    4298:	20000090 	.word	0x20000090
    429c:	0bad0000 	.word	0x0bad0000
    42a0:	0bad0004 	.word	0x0bad0004

000042a4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    42a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42a8:	4b68      	ldr	r3, [pc, #416]	; (444c <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    42aa:	4869      	ldr	r0, [pc, #420]	; (4450 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    42ac:	4969      	ldr	r1, [pc, #420]	; (4454 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    42ae:	2600      	movs	r6, #0
{
    42b0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    42b2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    42b4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42b6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    42b8:	b135      	cbz	r5, 42c8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    42ba:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    42be:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    42c0:	bf1e      	ittt	ne
    42c2:	601c      	strne	r4, [r3, #0]
    42c4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    42c6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    42c8:	3304      	adds	r3, #4
    42ca:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    42cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    42d0:	d1f1      	bne.n	42b6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42d2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4450 <nrfx_gpiote_irq_handler+0x1ac>
    42d6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    42da:	2b00      	cmp	r3, #0
    42dc:	f000 8099 	beq.w	4412 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    42e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    42e4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    42e8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    42ea:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    42ee:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    42f2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    42f4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    42f8:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    42fc:	f10d 0a10 	add.w	sl, sp, #16
    4300:	ea4f 1348 	mov.w	r3, r8, lsl #5
    4304:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4306:	f04f 0b01 	mov.w	fp, #1
    430a:	e049      	b.n	43a0 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    430c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    430e:	4a52      	ldr	r2, [pc, #328]	; (4458 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4310:	fa94 f4a4 	rbit	r4, r4
    4314:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4318:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    431a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    431c:	f104 0308 	add.w	r3, r4, #8
    4320:	9403      	str	r4, [sp, #12]
    4322:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    4326:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    432a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    432e:	fa0b f202 	lsl.w	r2, fp, r2
    4332:	ea23 0302 	bic.w	r3, r3, r2
    4336:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    433a:	a803      	add	r0, sp, #12
    433c:	f7ff fd28 	bl	3d90 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4340:	9b03      	ldr	r3, [sp, #12]
    4342:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4346:	08b9      	lsrs	r1, r7, #2
    4348:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    434c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    4350:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4352:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4354:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    4358:	d52c      	bpl.n	43b4 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    435a:	4620      	mov	r0, r4
    435c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    435e:	b2dd      	uxtb	r5, r3
    4360:	f7ff fd2e 	bl	3dc0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4364:	a803      	add	r0, sp, #12
    4366:	9403      	str	r4, [sp, #12]
    4368:	f7ff fd12 	bl	3d90 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    436c:	9b03      	ldr	r3, [sp, #12]
    436e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4372:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4376:	f3c3 4301 	ubfx	r3, r3, #16, #2
    437a:	429d      	cmp	r5, r3
    437c:	d107      	bne.n	438e <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    437e:	2100      	movs	r1, #0
    4380:	4620      	mov	r0, r4
    4382:	f002 fbf9 	bl	6b78 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4386:	4629      	mov	r1, r5
    4388:	4620      	mov	r0, r4
    438a:	f002 fbf5 	bl	6b78 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    438e:	a803      	add	r0, sp, #12
    4390:	9403      	str	r4, [sp, #12]
    4392:	f7ff fcfd 	bl	3d90 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4396:	9b03      	ldr	r3, [sp, #12]
    4398:	fa0b f303 	lsl.w	r3, fp, r3
    439c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    43a0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    43a4:	2c00      	cmp	r4, #0
    43a6:	d1b1      	bne.n	430c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    43a8:	f1b8 0f00 	cmp.w	r8, #0
    43ac:	d11d      	bne.n	43ea <nrfx_gpiote_irq_handler+0x146>
    43ae:	f04f 0801 	mov.w	r8, #1
    43b2:	e7a5      	b.n	4300 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    43b4:	2b02      	cmp	r3, #2
    43b6:	d10c      	bne.n	43d2 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    43b8:	2103      	movs	r1, #3
    43ba:	4620      	mov	r0, r4
    43bc:	f002 fbdc 	bl	6b78 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    43c0:	f005 0305 	and.w	r3, r5, #5
    43c4:	2b01      	cmp	r3, #1
    43c6:	d1e2      	bne.n	438e <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    43c8:	4639      	mov	r1, r7
    43ca:	4620      	mov	r0, r4
    43cc:	f7ff fcf8 	bl	3dc0 <call_handler>
    43d0:	e7dd      	b.n	438e <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    43d2:	2102      	movs	r1, #2
    43d4:	4620      	mov	r0, r4
    43d6:	9301      	str	r3, [sp, #4]
    43d8:	f002 fbce 	bl	6b78 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    43dc:	2d03      	cmp	r5, #3
    43de:	d0f3      	beq.n	43c8 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    43e0:	9b01      	ldr	r3, [sp, #4]
    43e2:	2b03      	cmp	r3, #3
    43e4:	d1d3      	bne.n	438e <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    43e6:	2d02      	cmp	r5, #2
    43e8:	e7ed      	b.n	43c6 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    43ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    43ee:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    43f2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    43f6:	4919      	ldr	r1, [pc, #100]	; (445c <nrfx_gpiote_irq_handler+0x1b8>)
    43f8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    43fc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    43fe:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4402:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    4406:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    4408:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    440a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    440e:	f47f af73 	bne.w	42f8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    4412:	2401      	movs	r4, #1
    while (mask)
    4414:	b916      	cbnz	r6, 441c <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4416:	b007      	add	sp, #28
    4418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    441c:	fa96 f3a6 	rbit	r3, r6
    4420:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4424:	fa04 f203 	lsl.w	r2, r4, r3
    4428:	009b      	lsls	r3, r3, #2
    442a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    442e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4432:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4436:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    443a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    443e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4442:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4446:	f7ff fcbb 	bl	3dc0 <call_handler>
    444a:	e7e3      	b.n	4414 <nrfx_gpiote_irq_handler+0x170>
    444c:	40006100 	.word	0x40006100
    4450:	40006000 	.word	0x40006000
    4454:	40006120 	.word	0x40006120
    4458:	20000090 	.word	0x20000090
    445c:	50000300 	.word	0x50000300

00004460 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4460:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4462:	4801      	ldr	r0, [pc, #4]	; (4468 <nrfx_ppi_channel_alloc+0x8>)
    4464:	f7ff bbac 	b.w	3bc0 <nrfx_flag32_alloc>
    4468:	2000010c 	.word	0x2000010c

0000446c <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    446c:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    446e:	4b3b      	ldr	r3, [pc, #236]	; (455c <twi_tx_start_transfer+0xf0>)
    4470:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4472:	2300      	movs	r3, #0
    4474:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4478:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    447c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    4480:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    4484:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4488:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    448c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4490:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    4494:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    4498:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    449a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    449e:	2301      	movs	r3, #1
    44a0:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    44a2:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    44a6:	429a      	cmp	r2, r3
    44a8:	bf18      	it	ne
    44aa:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    44ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    44ae:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    44b0:	4293      	cmp	r3, r2
{
    44b2:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    44b4:	d20e      	bcs.n	44d4 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    44b6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    44b8:	5cd3      	ldrb	r3, [r2, r3]
    44ba:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    44be:	680b      	ldr	r3, [r1, #0]
    44c0:	b303      	cbz	r3, 4504 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    44c2:	f240 2386 	movw	r3, #646	; 0x286
    44c6:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    44c8:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    44ca:	4825      	ldr	r0, [pc, #148]	; (4560 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    44cc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    44d0:	b002      	add	sp, #8
    44d2:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    44d4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    44d8:	b113      	cbz	r3, 44e0 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44da:	2301      	movs	r3, #1
    44dc:	61c3      	str	r3, [r0, #28]
            return false;
    44de:	e7ee      	b.n	44be <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    44e0:	6a0b      	ldr	r3, [r1, #32]
    44e2:	f013 0f40 	tst.w	r3, #64	; 0x40
    44e6:	f04f 0301 	mov.w	r3, #1
    44ea:	bf16      	itet	ne
    44ec:	61c3      	strne	r3, [r0, #28]
    44ee:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    44f0:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    44f4:	e7e3      	b.n	44be <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    44f6:	4620      	mov	r0, r4
    44f8:	f002 fb4d 	bl	6b96 <twi_transfer>
        while ((hw_timeout > 0) &&
    44fc:	b128      	cbz	r0, 450a <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    44fe:	9b01      	ldr	r3, [sp, #4]
    4500:	3b01      	subs	r3, #1
    4502:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4504:	9b01      	ldr	r3, [sp, #4]
    4506:	2b00      	cmp	r3, #0
    4508:	dcf5      	bgt.n	44f6 <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    450a:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    450e:	b95b      	cbnz	r3, 4528 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4510:	4813      	ldr	r0, [pc, #76]	; (4560 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    4512:	9b01      	ldr	r3, [sp, #4]
    4514:	2b00      	cmp	r3, #0
    4516:	dcdb      	bgt.n	44d0 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4518:	2300      	movs	r3, #0
    451a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    451e:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4520:	4810      	ldr	r0, [pc, #64]	; (4564 <twi_tx_start_transfer+0xf8>)
    4522:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4526:	e7d3      	b.n	44d0 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    4528:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    452c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4530:	b18b      	cbz	r3, 4556 <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4532:	4a0d      	ldr	r2, [pc, #52]	; (4568 <twi_tx_start_transfer+0xfc>)
    4534:	480b      	ldr	r0, [pc, #44]	; (4564 <twi_tx_start_transfer+0xf8>)
    4536:	f013 0f01 	tst.w	r3, #1
    453a:	bf18      	it	ne
    453c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    453e:	f013 0f02 	tst.w	r3, #2
    4542:	f102 0201 	add.w	r2, r2, #1
    4546:	bf18      	it	ne
    4548:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    454a:	f013 0f04 	tst.w	r3, #4
    454e:	4b07      	ldr	r3, [pc, #28]	; (456c <twi_tx_start_transfer+0x100>)
    4550:	bf18      	it	ne
    4552:	4618      	movne	r0, r3
    4554:	e7dd      	b.n	4512 <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    4556:	4803      	ldr	r0, [pc, #12]	; (4564 <twi_tx_start_transfer+0xf8>)
    4558:	e7db      	b.n	4512 <twi_tx_start_transfer+0xa6>
    455a:	bf00      	nop
    455c:	000186a0 	.word	0x000186a0
    4560:	0bad0000 	.word	0x0bad0000
    4564:	0bad0001 	.word	0x0bad0001
    4568:	0bae0000 	.word	0x0bae0000
    456c:	0bae0002 	.word	0x0bae0002

00004570 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    4570:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    4572:	4b33      	ldr	r3, [pc, #204]	; (4640 <twi_rx_start_transfer+0xd0>)
    4574:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4576:	2300      	movs	r3, #0
    4578:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    457c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    4580:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    4584:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    4588:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    458c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    4590:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4594:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    4598:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    459a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    459e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    45a0:	2b01      	cmp	r3, #1
{
    45a2:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    45a4:	d117      	bne.n	45d6 <twi_rx_start_transfer+0x66>
    45a6:	6a0b      	ldr	r3, [r1, #32]
    45a8:	065b      	lsls	r3, r3, #25
    45aa:	d414      	bmi.n	45d6 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    45ac:	2302      	movs	r3, #2
    45ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45b2:	2301      	movs	r3, #1
    45b4:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    45b6:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    45ba:	2a02      	cmp	r2, #2
    45bc:	bf18      	it	ne
    45be:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    45c0:	680b      	ldr	r3, [r1, #0]
    45c2:	b18b      	cbz	r3, 45e8 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    45c4:	f240 2386 	movw	r3, #646	; 0x286
    45c8:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    45ca:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    45cc:	481d      	ldr	r0, [pc, #116]	; (4644 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    45ce:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    45d2:	b002      	add	sp, #8
    45d4:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    45d6:	2301      	movs	r3, #1
    45d8:	e7e9      	b.n	45ae <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    45da:	4620      	mov	r0, r4
    45dc:	f002 fadb 	bl	6b96 <twi_transfer>
        while ((hw_timeout > 0) &&
    45e0:	b128      	cbz	r0, 45ee <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    45e2:	9b01      	ldr	r3, [sp, #4]
    45e4:	3b01      	subs	r3, #1
    45e6:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    45e8:	9b01      	ldr	r3, [sp, #4]
    45ea:	2b00      	cmp	r3, #0
    45ec:	dcf5      	bgt.n	45da <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    45ee:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    45f2:	b95b      	cbnz	r3, 460c <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    45f4:	4813      	ldr	r0, [pc, #76]	; (4644 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    45f6:	9b01      	ldr	r3, [sp, #4]
    45f8:	2b00      	cmp	r3, #0
    45fa:	dcea      	bgt.n	45d2 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    45fc:	2300      	movs	r3, #0
    45fe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4602:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4604:	4810      	ldr	r0, [pc, #64]	; (4648 <twi_rx_start_transfer+0xd8>)
    4606:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    460a:	e7e2      	b.n	45d2 <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    460c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4610:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4614:	b18b      	cbz	r3, 463a <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4616:	4a0d      	ldr	r2, [pc, #52]	; (464c <twi_rx_start_transfer+0xdc>)
    4618:	480b      	ldr	r0, [pc, #44]	; (4648 <twi_rx_start_transfer+0xd8>)
    461a:	f013 0f01 	tst.w	r3, #1
    461e:	bf18      	it	ne
    4620:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4622:	f013 0f02 	tst.w	r3, #2
    4626:	f102 0201 	add.w	r2, r2, #1
    462a:	bf18      	it	ne
    462c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    462e:	f013 0f04 	tst.w	r3, #4
    4632:	4b07      	ldr	r3, [pc, #28]	; (4650 <twi_rx_start_transfer+0xe0>)
    4634:	bf18      	it	ne
    4636:	4618      	movne	r0, r3
    4638:	e7dd      	b.n	45f6 <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    463a:	4803      	ldr	r0, [pc, #12]	; (4648 <twi_rx_start_transfer+0xd8>)
    463c:	e7db      	b.n	45f6 <twi_rx_start_transfer+0x86>
    463e:	bf00      	nop
    4640:	000186a0 	.word	0x000186a0
    4644:	0bad0000 	.word	0x0bad0000
    4648:	0bad0001 	.word	0x0bad0001
    464c:	0bae0000 	.word	0x0bae0000
    4650:	0bae0002 	.word	0x0bae0002

00004654 <nrfx_twi_init>:
{
    4654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4658:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    465a:	4d2b      	ldr	r5, [pc, #172]	; (4708 <nrfx_twi_init+0xb4>)
    465c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    4660:	fb0e fe07 	mul.w	lr, lr, r7
    4664:	eb05 040e 	add.w	r4, r5, lr
    4668:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    466c:	2e00      	cmp	r6, #0
    466e:	d149      	bne.n	4704 <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4670:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    4674:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    4678:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
    467a:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    467c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    4680:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    4684:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4688:	7b4b      	ldrb	r3, [r1, #13]
    468a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    468e:	7b8b      	ldrb	r3, [r1, #14]
    4690:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    4694:	b9e3      	cbnz	r3, 46d0 <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
    4696:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    4698:	4b1c      	ldr	r3, [pc, #112]	; (470c <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
    469a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    469e:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    46a0:	2c01      	cmp	r4, #1
    46a2:	bf08      	it	eq
    46a4:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    46a6:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
    46aa:	bf18      	it	ne
    46ac:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    46b0:	f240 6e0c 	movw	lr, #1548	; 0x60c
    46b4:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    46b8:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    46ba:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    46be:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    46c0:	2c01      	cmp	r4, #1
    46c2:	bf18      	it	ne
    46c4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    46c8:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    46cc:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    46d0:	7bcb      	ldrb	r3, [r1, #15]
    46d2:	b92b      	cbnz	r3, 46e0 <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    46d4:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    46d8:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    46dc:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    46e0:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    46e2:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    46e6:	b122      	cbz	r2, 46f2 <nrfx_twi_init+0x9e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    46e8:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    46ea:	f340 3007 	sbfx	r0, r0, #12, #8
    46ee:	f7fd fd73 	bl	21d8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    46f2:	233c      	movs	r3, #60	; 0x3c
    46f4:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    46f8:	4805      	ldr	r0, [pc, #20]	; (4710 <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    46fa:	2301      	movs	r3, #1
    46fc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    4700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    4704:	4803      	ldr	r0, [pc, #12]	; (4714 <nrfx_twi_init+0xc0>)
    4706:	e7fb      	b.n	4700 <nrfx_twi_init+0xac>
    4708:	200008ec 	.word	0x200008ec
    470c:	50000300 	.word	0x50000300
    4710:	0bad0000 	.word	0x0bad0000
    4714:	0bad0005 	.word	0x0bad0005

00004718 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4718:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    471a:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    471c:	2105      	movs	r1, #5
    471e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4722:	4b04      	ldr	r3, [pc, #16]	; (4734 <nrfx_twi_enable+0x1c>)
    4724:	213c      	movs	r1, #60	; 0x3c
    4726:	fb01 3302 	mla	r3, r1, r2, r3
    472a:	2202      	movs	r2, #2
    472c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	200008ec 	.word	0x200008ec

00004738 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4738:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    473a:	4a0b      	ldr	r2, [pc, #44]	; (4768 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    473c:	7901      	ldrb	r1, [r0, #4]
    473e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4742:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4746:	f022 0203 	bic.w	r2, r2, #3
    474a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    474e:	2200      	movs	r2, #0
    4750:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4754:	4b05      	ldr	r3, [pc, #20]	; (476c <nrfx_twi_disable+0x34>)
    4756:	203c      	movs	r0, #60	; 0x3c
    4758:	fb00 3301 	mla	r3, r0, r1, r3
    475c:	2101      	movs	r1, #1
    475e:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    4762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    4766:	4770      	bx	lr
    4768:	00044286 	.word	0x00044286
    476c:	200008ec 	.word	0x200008ec

00004770 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4774:	4f31      	ldr	r7, [pc, #196]	; (483c <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4776:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    4778:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    477c:	233c      	movs	r3, #60	; 0x3c
    477e:	fb03 7304 	mla	r3, r3, r4, r7
{
    4782:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4784:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    4788:	2b01      	cmp	r3, #1
{
    478a:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    478c:	d104      	bne.n	4798 <nrfx_twi_xfer+0x28>
    478e:	780b      	ldrb	r3, [r1, #0]
    4790:	2b01      	cmp	r3, #1
    4792:	d106      	bne.n	47a2 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    4794:	482a      	ldr	r0, [pc, #168]	; (4840 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4796:	e011      	b.n	47bc <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    4798:	2b02      	cmp	r3, #2
    479a:	d102      	bne.n	47a2 <nrfx_twi_xfer+0x32>
    479c:	780b      	ldrb	r3, [r1, #0]
    479e:	2b01      	cmp	r3, #1
    47a0:	d1f8      	bne.n	4794 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    47a2:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    47a4:	4b27      	ldr	r3, [pc, #156]	; (4844 <nrfx_twi_xfer+0xd4>)
    47a6:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    47aa:	fb06 7604 	mla	r6, r6, r4, r7
    47ae:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    47b2:	b12b      	cbz	r3, 47c0 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    47b4:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    47b6:	4824      	ldr	r0, [pc, #144]	; (4848 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    47b8:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    47bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    47c0:	f08c 0304 	eor.w	r3, ip, #4
    47c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    47c8:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    47cc:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    47d0:	46a8      	mov	r8, r5
    47d2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    47d6:	f106 0e0c 	add.w	lr, r6, #12
    47da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    47de:	f8d8 3000 	ldr.w	r3, [r8]
    47e2:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    47e6:	686b      	ldr	r3, [r5, #4]
    47e8:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    47ea:	68eb      	ldr	r3, [r5, #12]
    47ec:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    47ee:	786b      	ldrb	r3, [r5, #1]
    47f0:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    47f4:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    47f6:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    47fa:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    47fc:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4800:	d017      	beq.n	4832 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4802:	b99b      	cbnz	r3, 482c <nrfx_twi_xfer+0xbc>
    4804:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    4808:	233c      	movs	r3, #60	; 0x3c
    480a:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    480e:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4810:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    4814:	4648      	mov	r0, r9
    4816:	f7ff fe29 	bl	446c <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    481a:	233c      	movs	r3, #60	; 0x3c
    481c:	435c      	muls	r4, r3
    481e:	193a      	adds	r2, r7, r4
    4820:	593b      	ldr	r3, [r7, r4]
    4822:	2b00      	cmp	r3, #0
    4824:	d1ca      	bne.n	47bc <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    4826:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    482a:	e7c7      	b.n	47bc <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    482c:	f04f 0c01 	mov.w	ip, #1
    4830:	e7ea      	b.n	4808 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    4832:	4651      	mov	r1, sl
    4834:	4648      	mov	r0, r9
    4836:	f7ff fe9b 	bl	4570 <twi_rx_start_transfer>
    483a:	e7ee      	b.n	481a <nrfx_twi_xfer+0xaa>
    483c:	200008ec 	.word	0x200008ec
    4840:	0bad0005 	.word	0x0bad0005
    4844:	00044286 	.word	0x00044286
    4848:	0bad000b 	.word	0x0bad000b

0000484c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    484c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    484e:	4c32      	ldr	r4, [pc, #200]	; (4918 <nrfx_twi_0_irq_handler+0xcc>)
    4850:	4832      	ldr	r0, [pc, #200]	; (491c <nrfx_twi_0_irq_handler+0xd0>)
{
    4852:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    4854:	4621      	mov	r1, r4
    4856:	f002 f99e 	bl	6b96 <twi_transfer>
    485a:	2800      	cmp	r0, #0
    485c:	d159      	bne.n	4912 <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
    485e:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    4862:	b9ff      	cbnz	r7, 48a4 <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    4864:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    4866:	1e93      	subs	r3, r2, #2
    4868:	2b01      	cmp	r3, #1
    486a:	d81b      	bhi.n	48a4 <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    486c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    486e:	69a3      	ldr	r3, [r4, #24]
    4870:	4298      	cmp	r0, r3
    4872:	d117      	bne.n	48a4 <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    4874:	69e3      	ldr	r3, [r4, #28]
    4876:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    4878:	6963      	ldr	r3, [r4, #20]
    487a:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    487c:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    487e:	4827      	ldr	r0, [pc, #156]	; (491c <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    4880:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4884:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    4888:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    488a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    488e:	d104      	bne.n	489a <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    4890:	b007      	add	sp, #28
    4892:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4896:	f7ff bde9 	b.w	446c <twi_tx_start_transfer>
}
    489a:	b007      	add	sp, #28
    489c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    48a0:	f7ff be66 	b.w	4570 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    48a4:	4e1e      	ldr	r6, [pc, #120]	; (4920 <nrfx_twi_0_irq_handler+0xd4>)
    48a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    48a8:	ad01      	add	r5, sp, #4
    48aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    48ac:	6833      	ldr	r3, [r6, #0]
    48ae:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    48b0:	b347      	cbz	r7, 4904 <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
    48b2:	4a1a      	ldr	r2, [pc, #104]	; (491c <nrfx_twi_0_irq_handler+0xd0>)
    48b4:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    48b8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    48bc:	f013 0102 	ands.w	r1, r3, #2
    48c0:	d006      	beq.n	48d0 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    48c2:	2301      	movs	r3, #1
    48c4:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    48c8:	2300      	movs	r3, #0
    48ca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    48ce:	e007      	b.n	48e0 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    48d0:	f013 0204 	ands.w	r2, r3, #4
    48d4:	d009      	beq.n	48ea <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    48d6:	2302      	movs	r3, #2
    48d8:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    48dc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    48e0:	e9d4 3100 	ldrd	r3, r1, [r4]
    48e4:	4668      	mov	r0, sp
    48e6:	4798      	blx	r3
}
    48e8:	e013      	b.n	4912 <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    48ea:	f013 0301 	ands.w	r3, r3, #1
    48ee:	d005      	beq.n	48fc <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
    48f0:	2303      	movs	r3, #3
    48f2:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    48f6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    48fa:	e7f1      	b.n	48e0 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    48fc:	2204      	movs	r2, #4
    48fe:	f88d 2000 	strb.w	r2, [sp]
    4902:	e7e2      	b.n	48ca <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4904:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    4906:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    490a:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    490c:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4910:	d5e6      	bpl.n	48e0 <nrfx_twi_0_irq_handler+0x94>
}
    4912:	b007      	add	sp, #28
    4914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4916:	bf00      	nop
    4918:	200008ec 	.word	0x200008ec
    491c:	40003000 	.word	0x40003000
    4920:	200008f8 	.word	0x200008f8

00004924 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4924:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4926:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    492a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    492c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    492e:	6002      	str	r2, [r0, #0]
}
    4930:	4802      	ldr	r0, [pc, #8]	; (493c <nrf_gpio_pin_port_decode+0x18>)
    4932:	bf18      	it	ne
    4934:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	50000300 	.word	0x50000300

00004940 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4942:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4944:	f002 f9bf 	bl	6cc6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    4948:	4608      	mov	r0, r1
    494a:	f002 f9bc 	bl	6cc6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    494e:	a801      	add	r0, sp, #4
    4950:	9601      	str	r6, [sp, #4]
    4952:	f7ff ffe7 	bl	4924 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4956:	9b01      	ldr	r3, [sp, #4]
    4958:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    495c:	460c      	mov	r4, r1
    495e:	f240 610d 	movw	r1, #1549	; 0x60d
    4962:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4966:	a801      	add	r0, sp, #4
    4968:	9401      	str	r4, [sp, #4]
    496a:	f7ff ffdb 	bl	4924 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    496e:	9b01      	ldr	r3, [sp, #4]
    4970:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4974:	2509      	movs	r5, #9
    4976:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    497a:	2004      	movs	r0, #4
    497c:	f002 f866 	bl	6a4c <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4980:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4982:	a801      	add	r0, sp, #4
    4984:	9401      	str	r4, [sp, #4]
    4986:	f7ff ffcd 	bl	4924 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    498a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    498c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4990:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    4992:	07db      	lsls	r3, r3, #31
    4994:	d415      	bmi.n	49c2 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4996:	a801      	add	r0, sp, #4
    4998:	9601      	str	r6, [sp, #4]
    499a:	f7ff ffc3 	bl	4924 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    499e:	9b01      	ldr	r3, [sp, #4]
    49a0:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    49a4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    49a8:	2004      	movs	r0, #4
    49aa:	f002 f84f 	bl	6a4c <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    49ae:	4630      	mov	r0, r6
    49b0:	f002 f989 	bl	6cc6 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    49b4:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    49b6:	2004      	movs	r0, #4
    49b8:	f002 f848 	bl	6a4c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    49bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    49c0:	d1df      	bne.n	4982 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49c2:	a801      	add	r0, sp, #4
    49c4:	9401      	str	r4, [sp, #4]
    49c6:	f7ff ffad 	bl	4924 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    49ca:	9a01      	ldr	r2, [sp, #4]
    49cc:	2301      	movs	r3, #1
    49ce:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    49d0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    49d4:	2004      	movs	r0, #4
    49d6:	f002 f839 	bl	6a4c <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    49da:	4620      	mov	r0, r4
    49dc:	f002 f973 	bl	6cc6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    49e0:	2004      	movs	r0, #4
    49e2:	f002 f833 	bl	6a4c <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49e6:	a801      	add	r0, sp, #4
    49e8:	9401      	str	r4, [sp, #4]
    49ea:	f7ff ff9b 	bl	4924 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    49ee:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    49f0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    49f4:	4803      	ldr	r0, [pc, #12]	; (4a04 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    49f6:	40d3      	lsrs	r3, r2
    49f8:	f003 0301 	and.w	r3, r3, #1
    49fc:	1ac0      	subs	r0, r0, r3
    49fe:	b003      	add	sp, #12
    4a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a02:	bf00      	nop
    4a04:	0bad0001 	.word	0x0bad0001

00004a08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4a08:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a0a:	4c14      	ldr	r4, [pc, #80]	; (4a5c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4a0c:	4a14      	ldr	r2, [pc, #80]	; (4a60 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4a0e:	4915      	ldr	r1, [pc, #84]	; (4a64 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a10:	2303      	movs	r3, #3
    4a12:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4a14:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a16:	4b14      	ldr	r3, [pc, #80]	; (4a68 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4a18:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a1a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4a20:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4a22:	2300      	movs	r3, #0
    4a24:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4a26:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a28:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4a2a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4a2c:	4a0f      	ldr	r2, [pc, #60]	; (4a6c <_DoInit+0x64>)
    4a2e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4a30:	2210      	movs	r2, #16
    4a32:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    4a34:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    4a36:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4a38:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a3a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4a3c:	f001 fe08 	bl	6650 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4a40:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4a44:	490a      	ldr	r1, [pc, #40]	; (4a70 <_DoInit+0x68>)
    4a46:	4620      	mov	r0, r4
    4a48:	f001 fe02 	bl	6650 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4a4c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4a50:	2320      	movs	r3, #32
    4a52:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4a54:	f3bf 8f5f 	dmb	sy
}
    4a58:	bd10      	pop	{r4, pc}
    4a5a:	bf00      	nop
    4a5c:	20000928 	.word	0x20000928
    4a60:	0000772b 	.word	0x0000772b
    4a64:	00007734 	.word	0x00007734
    4a68:	20000bfd 	.word	0x20000bfd
    4a6c:	20000bed 	.word	0x20000bed
    4a70:	00007738 	.word	0x00007738

00004a74 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a74:	4b0f      	ldr	r3, [pc, #60]	; (4ab4 <z_sys_init_run_level+0x40>)
{
    4a76:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4a7c:	3001      	adds	r0, #1
    4a7e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4a82:	42a6      	cmp	r6, r4
    4a84:	d800      	bhi.n	4a88 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4a86:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4a88:	e9d4 3500 	ldrd	r3, r5, [r4]
    4a8c:	4628      	mov	r0, r5
    4a8e:	4798      	blx	r3
		if (dev != NULL) {
    4a90:	b16d      	cbz	r5, 4aae <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    4a92:	b138      	cbz	r0, 4aa4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4a94:	2800      	cmp	r0, #0
    4a96:	bfb8      	it	lt
    4a98:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4a9a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    4a9c:	28ff      	cmp	r0, #255	; 0xff
    4a9e:	bfa8      	it	ge
    4aa0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4aa2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4aa4:	68ea      	ldr	r2, [r5, #12]
    4aa6:	7853      	ldrb	r3, [r2, #1]
    4aa8:	f043 0301 	orr.w	r3, r3, #1
    4aac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4aae:	3408      	adds	r4, #8
    4ab0:	e7e7      	b.n	4a82 <z_sys_init_run_level+0xe>
    4ab2:	bf00      	nop
    4ab4:	000074a4 	.word	0x000074a4

00004ab8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4ab8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4aba:	4b0a      	ldr	r3, [pc, #40]	; (4ae4 <bg_thread_main+0x2c>)
    4abc:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4abe:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    4ac0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4ac2:	f7ff ffd7 	bl	4a74 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4ac6:	f000 ff4d 	bl	5964 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    4aca:	2004      	movs	r0, #4
    4acc:	f7ff ffd2 	bl	4a74 <z_sys_init_run_level>

	z_init_static_threads();
    4ad0:	f000 f930 	bl	4d34 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    4ad4:	f7fc f8d8 	bl	c88 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4ad8:	4a03      	ldr	r2, [pc, #12]	; (4ae8 <bg_thread_main+0x30>)
    4ada:	7b13      	ldrb	r3, [r2, #12]
    4adc:	f023 0301 	bic.w	r3, r3, #1
    4ae0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4ae2:	bd08      	pop	{r3, pc}
    4ae4:	20000ffd 	.word	0x20000ffd
    4ae8:	20000278 	.word	0x20000278

00004aec <z_bss_zero>:
{
    4aec:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4aee:	4803      	ldr	r0, [pc, #12]	; (4afc <z_bss_zero+0x10>)
    4af0:	4a03      	ldr	r2, [pc, #12]	; (4b00 <z_bss_zero+0x14>)
    4af2:	2100      	movs	r1, #0
    4af4:	1a12      	subs	r2, r2, r0
    4af6:	f002 f921 	bl	6d3c <z_early_memset>
}
    4afa:	bd08      	pop	{r3, pc}
    4afc:	200001d8 	.word	0x200001d8
    4b00:	20001000 	.word	0x20001000

00004b04 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4b04:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4b06:	2300      	movs	r3, #0
{
    4b08:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4b0a:	2201      	movs	r2, #1
    4b0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4b10:	4e13      	ldr	r6, [pc, #76]	; (4b60 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b12:	4d14      	ldr	r5, [pc, #80]	; (4b64 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4b14:	9301      	str	r3, [sp, #4]
    4b16:	220f      	movs	r2, #15
    4b18:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4b1c:	4912      	ldr	r1, [pc, #72]	; (4b68 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b1e:	2318      	movs	r3, #24
    4b20:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4b24:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4b28:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4b2a:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4b2e:	fb00 1104 	mla	r1, r0, r4, r1
    4b32:	4b0e      	ldr	r3, [pc, #56]	; (4b6c <z_init_cpu+0x68>)
    4b34:	9500      	str	r5, [sp, #0]
    4b36:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4b3a:	4630      	mov	r0, r6
    4b3c:	f000 f8c8 	bl	4cd0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b40:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4b42:	4a0b      	ldr	r2, [pc, #44]	; (4b70 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4b44:	60ee      	str	r6, [r5, #12]
    4b46:	f023 0304 	bic.w	r3, r3, #4
    4b4a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4b4c:	f44f 6304 	mov.w	r3, #2112	; 0x840
    4b50:	fb04 3303 	mla	r3, r4, r3, r3
    4b54:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    4b56:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    4b58:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4b5a:	b006      	add	sp, #24
    4b5c:	bd70      	pop	{r4, r5, r6, pc}
    4b5e:	bf00      	nop
    4b60:	200001f8 	.word	0x200001f8
    4b64:	200009d0 	.word	0x200009d0
    4b68:	20001840 	.word	0x20001840
    4b6c:	00004ded 	.word	0x00004ded
    4b70:	20001000 	.word	0x20001000

00004b74 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4b74:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4b76:	2000      	movs	r0, #0
{
    4b78:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4b7a:	f7ff ff7b 	bl	4a74 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4b7e:	4b2d      	ldr	r3, [pc, #180]	; (4c34 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4b80:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4b84:	4d2c      	ldr	r5, [pc, #176]	; (4c38 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    4b86:	4e2d      	ldr	r6, [pc, #180]	; (4c3c <z_cstart+0xc8>)
    4b88:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4b8a:	4f2d      	ldr	r7, [pc, #180]	; (4c40 <z_cstart+0xcc>)
    4b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4b90:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4b92:	2400      	movs	r4, #0
    4b94:	23e0      	movs	r3, #224	; 0xe0
    4b96:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4b9a:	77ec      	strb	r4, [r5, #31]
    4b9c:	762c      	strb	r4, [r5, #24]
    4b9e:	766c      	strb	r4, [r5, #25]
    4ba0:	76ac      	strb	r4, [r5, #26]
    4ba2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4ba8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4bac:	626b      	str	r3, [r5, #36]	; 0x24
    4bae:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4bb2:	f7fd fd23 	bl	25fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4bb6:	f7fd faef 	bl	2198 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bbe:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4bc0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4bc2:	f7fd fe55 	bl	2870 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4bc6:	f7fd fdbb 	bl	2740 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4bca:	f240 1301 	movw	r3, #257	; 0x101
    4bce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4bd2:	ab06      	add	r3, sp, #24
    4bd4:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4bd6:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4bda:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4bdc:	f002 f887 	bl	6cee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4be0:	2001      	movs	r0, #1
    4be2:	f7ff ff47 	bl	4a74 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4be6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    4be8:	4d16      	ldr	r5, [pc, #88]	; (4c44 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4bea:	f7ff ff43 	bl	4a74 <z_sys_init_run_level>
	z_sched_init();
    4bee:	f000 fc51 	bl	5494 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4bf2:	4b15      	ldr	r3, [pc, #84]	; (4c48 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    4bf4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4bf6:	9305      	str	r3, [sp, #20]
    4bf8:	2301      	movs	r3, #1
    4bfa:	4914      	ldr	r1, [pc, #80]	; (4c4c <z_cstart+0xd8>)
    4bfc:	9400      	str	r4, [sp, #0]
    4bfe:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4c06:	463b      	mov	r3, r7
    4c08:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4c0c:	4628      	mov	r0, r5
    4c0e:	f000 f85f 	bl	4cd0 <z_setup_new_thread>
    4c12:	7b6a      	ldrb	r2, [r5, #13]
    4c14:	4606      	mov	r6, r0
    4c16:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4c1a:	4628      	mov	r0, r5
    4c1c:	736a      	strb	r2, [r5, #13]
    4c1e:	f002 f956 	bl	6ece <z_ready_thread>
	z_init_cpu(0);
    4c22:	4620      	mov	r0, r4
    4c24:	f7ff ff6e 	bl	4b04 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c28:	463a      	mov	r2, r7
    4c2a:	4631      	mov	r1, r6
    4c2c:	4628      	mov	r0, r5
    4c2e:	f7fd fbad 	bl	238c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4c32:	bf00      	nop
    4c34:	20001840 	.word	0x20001840
    4c38:	e000ed00 	.word	0xe000ed00
    4c3c:	200009d0 	.word	0x200009d0
    4c40:	00004ab9 	.word	0x00004ab9
    4c44:	20000278 	.word	0x20000278
    4c48:	0000773f 	.word	0x0000773f
    4c4c:	200019c0 	.word	0x200019c0

00004c50 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4c50:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c52:	4c06      	ldr	r4, [pc, #24]	; (4c6c <init_mem_slab_module+0x1c>)
    4c54:	4d06      	ldr	r5, [pc, #24]	; (4c70 <init_mem_slab_module+0x20>)
	int rc = 0;
    4c56:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c58:	42ac      	cmp	r4, r5
    4c5a:	d300      	bcc.n	4c5e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    4c5c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    4c5e:	4620      	mov	r0, r4
    4c60:	f002 f870 	bl	6d44 <create_free_list>
		if (rc < 0) {
    4c64:	2800      	cmp	r0, #0
    4c66:	dbf9      	blt.n	4c5c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c68:	341c      	adds	r4, #28
    4c6a:	e7f5      	b.n	4c58 <init_mem_slab_module+0x8>
    4c6c:	20000184 	.word	0x20000184
    4c70:	20000184 	.word	0x20000184

00004c74 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4c76:	460c      	mov	r4, r1
	__asm__ volatile(
    4c78:	f04f 0520 	mov.w	r5, #32
    4c7c:	f3ef 8111 	mrs	r1, BASEPRI
    4c80:	f385 8812 	msr	BASEPRI_MAX, r5
    4c84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4c88:	6945      	ldr	r5, [r0, #20]
    4c8a:	b15d      	cbz	r5, 4ca4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4c8c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4c8e:	682b      	ldr	r3, [r5, #0]
    4c90:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4c92:	6983      	ldr	r3, [r0, #24]
    4c94:	3301      	adds	r3, #1
    4c96:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4c98:	2000      	movs	r0, #0
	__asm__ volatile(
    4c9a:	f381 8811 	msr	BASEPRI, r1
    4c9e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4ca2:	e011      	b.n	4cc8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4ca4:	ea52 0603 	orrs.w	r6, r2, r3
    4ca8:	d103      	bne.n	4cb2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4caa:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4cac:	f06f 000b 	mvn.w	r0, #11
    4cb0:	e7f3      	b.n	4c9a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4cb2:	e9cd 2300 	strd	r2, r3, [sp]
    4cb6:	4602      	mov	r2, r0
    4cb8:	3008      	adds	r0, #8
    4cba:	f000 faf5 	bl	52a8 <z_pend_curr>
		if (result == 0) {
    4cbe:	b918      	cbnz	r0, 4cc8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4cc0:	4b02      	ldr	r3, [pc, #8]	; (4ccc <k_mem_slab_alloc+0x58>)
    4cc2:	689b      	ldr	r3, [r3, #8]
    4cc4:	695b      	ldr	r3, [r3, #20]
    4cc6:	6023      	str	r3, [r4, #0]
}
    4cc8:	b002      	add	sp, #8
    4cca:	bd70      	pop	{r4, r5, r6, pc}
    4ccc:	200009d0 	.word	0x200009d0

00004cd0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4cd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4cd4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4cd6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4cd8:	2604      	movs	r6, #4
    4cda:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4cdc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4cde:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4ce0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4ce4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4ce6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4ce8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4cee:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4cf0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4cf4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4cf6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4cfa:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4cfe:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4d00:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4d02:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4d04:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d08:	9202      	str	r2, [sp, #8]
    4d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d0c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4d0e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d12:	9200      	str	r2, [sp, #0]
    4d14:	4642      	mov	r2, r8
{
    4d16:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d18:	f7fd fb06 	bl	2328 <arch_new_thread>
	if (!_current) {
    4d1c:	4b04      	ldr	r3, [pc, #16]	; (4d30 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4d1e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4d20:	689b      	ldr	r3, [r3, #8]
    4d22:	b103      	cbz	r3, 4d26 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4d26:	6723      	str	r3, [r4, #112]	; 0x70
}
    4d28:	4640      	mov	r0, r8
    4d2a:	b004      	add	sp, #16
    4d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d30:	200009d0 	.word	0x200009d0

00004d34 <z_init_static_threads>:
{
    4d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d38:	4c29      	ldr	r4, [pc, #164]	; (4de0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4d3a:	4d2a      	ldr	r5, [pc, #168]	; (4de4 <z_init_static_threads+0xb0>)
{
    4d3c:	b087      	sub	sp, #28
    4d3e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4d40:	42ae      	cmp	r6, r5
    4d42:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4d46:	d30f      	bcc.n	4d68 <z_init_static_threads+0x34>
	k_sched_lock();
    4d48:	f000 fb74 	bl	5434 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4d4c:	4c24      	ldr	r4, [pc, #144]	; (4de0 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4d4e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4de8 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4d52:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4d56:	f240 37e7 	movw	r7, #999	; 0x3e7
    4d5a:	42ac      	cmp	r4, r5
    4d5c:	d320      	bcc.n	4da0 <z_init_static_threads+0x6c>
}
    4d5e:	b007      	add	sp, #28
    4d60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4d64:	f000 bb7a 	b.w	545c <k_sched_unlock>
		z_setup_new_thread(
    4d68:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4d6c:	9305      	str	r3, [sp, #20]
    4d6e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4d72:	9304      	str	r3, [sp, #16]
    4d74:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4d78:	9303      	str	r3, [sp, #12]
    4d7a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4d7e:	9302      	str	r3, [sp, #8]
    4d80:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4d84:	9301      	str	r3, [sp, #4]
    4d86:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4d8a:	9300      	str	r3, [sp, #0]
    4d8c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4d90:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4d94:	f7ff ff9c 	bl	4cd0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4d98:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4d9c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4d9e:	e7ce      	b.n	4d3e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4da2:	1c5a      	adds	r2, r3, #1
    4da4:	d00d      	beq.n	4dc2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    4da6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4daa:	2100      	movs	r1, #0
    4dac:	4638      	mov	r0, r7
    4dae:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4db2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4db6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4dba:	d104      	bne.n	4dc6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    4dbc:	4640      	mov	r0, r8
    4dbe:	f000 fae9 	bl	5394 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4dc2:	3430      	adds	r4, #48	; 0x30
    4dc4:	e7c9      	b.n	4d5a <z_init_static_threads+0x26>
    4dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4dca:	2300      	movs	r3, #0
    4dcc:	f7fb fdb2 	bl	934 <__aeabi_uldivmod>
    4dd0:	4602      	mov	r2, r0
    4dd2:	460b      	mov	r3, r1
    4dd4:	f108 0018 	add.w	r0, r8, #24
    4dd8:	4649      	mov	r1, r9
    4dda:	f000 fcd1 	bl	5780 <z_add_timeout>
    4dde:	e7f0      	b.n	4dc2 <z_init_static_threads+0x8e>
    4de0:	00007268 	.word	0x00007268
    4de4:	00007268 	.word	0x00007268
    4de8:	00006e3b 	.word	0x00006e3b

00004dec <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4dec:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4dee:	4c0b      	ldr	r4, [pc, #44]	; (4e1c <idle+0x30>)
	return !z_sys_post_kernel;
    4df0:	4d0b      	ldr	r5, [pc, #44]	; (4e20 <idle+0x34>)
	__asm__ volatile(
    4df2:	f04f 0220 	mov.w	r2, #32
    4df6:	f3ef 8311 	mrs	r3, BASEPRI
    4dfa:	f382 8812 	msr	BASEPRI_MAX, r2
    4dfe:	f3bf 8f6f 	isb	sy
    4e02:	f002 f8bc 	bl	6f7e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4e06:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4e08:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4e0a:	b913      	cbnz	r3, 4e12 <idle+0x26>
	arch_cpu_idle();
    4e0c:	f7fd f9ca 	bl	21a4 <arch_cpu_idle>
}
    4e10:	e7ef      	b.n	4df2 <idle+0x6>
    4e12:	f7fd f807 	bl	1e24 <pm_system_suspend>
    4e16:	2800      	cmp	r0, #0
    4e18:	d1eb      	bne.n	4df2 <idle+0x6>
    4e1a:	e7f7      	b.n	4e0c <idle+0x20>
    4e1c:	200009d0 	.word	0x200009d0
    4e20:	20000ffd 	.word	0x20000ffd

00004e24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4e24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4e28:	4604      	mov	r4, r0
    4e2a:	4617      	mov	r7, r2
    4e2c:	461e      	mov	r6, r3
    4e2e:	f04f 0320 	mov.w	r3, #32
    4e32:	f3ef 8811 	mrs	r8, BASEPRI
    4e36:	f383 8812 	msr	BASEPRI_MAX, r3
    4e3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4e3e:	68c3      	ldr	r3, [r0, #12]
    4e40:	4a33      	ldr	r2, [pc, #204]	; (4f10 <z_impl_k_mutex_lock+0xec>)
    4e42:	b17b      	cbz	r3, 4e64 <z_impl_k_mutex_lock+0x40>
    4e44:	6880      	ldr	r0, [r0, #8]
    4e46:	6891      	ldr	r1, [r2, #8]
    4e48:	4288      	cmp	r0, r1
    4e4a:	d019      	beq.n	4e80 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4e4c:	ea57 0306 	orrs.w	r3, r7, r6
    4e50:	d118      	bne.n	4e84 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4e52:	f388 8811 	msr	BASEPRI, r8
    4e56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4e5a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4e5e:	b002      	add	sp, #8
    4e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4e64:	6891      	ldr	r1, [r2, #8]
    4e66:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4e6a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4e6c:	3301      	adds	r3, #1
    4e6e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4e70:	6893      	ldr	r3, [r2, #8]
    4e72:	60a3      	str	r3, [r4, #8]
    4e74:	f388 8811 	msr	BASEPRI, r8
    4e78:	f3bf 8f6f 	isb	sy
		return 0;
    4e7c:	2000      	movs	r0, #0
    4e7e:	e7ee      	b.n	4e5e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    4e80:	6921      	ldr	r1, [r4, #16]
    4e82:	e7f2      	b.n	4e6a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4e84:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4e88:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    4e8c:	4299      	cmp	r1, r3
    4e8e:	bfa8      	it	ge
    4e90:	4619      	movge	r1, r3
    4e92:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4e96:	4291      	cmp	r1, r2
    4e98:	bfb8      	it	lt
    4e9a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4e9c:	428b      	cmp	r3, r1
    4e9e:	dd2e      	ble.n	4efe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4ea0:	f001 ffaa 	bl	6df8 <adjust_owner_prio.isra.0>
    4ea4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4ea6:	e9cd 7600 	strd	r7, r6, [sp]
    4eaa:	481a      	ldr	r0, [pc, #104]	; (4f14 <z_impl_k_mutex_lock+0xf0>)
    4eac:	4622      	mov	r2, r4
    4eae:	4641      	mov	r1, r8
    4eb0:	f000 f9fa 	bl	52a8 <z_pend_curr>
	if (got_mutex == 0) {
    4eb4:	2800      	cmp	r0, #0
    4eb6:	d0e1      	beq.n	4e7c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    4eb8:	f04f 0320 	mov.w	r3, #32
    4ebc:	f3ef 8611 	mrs	r6, BASEPRI
    4ec0:	f383 8812 	msr	BASEPRI_MAX, r3
    4ec4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    4ec8:	68a0      	ldr	r0, [r4, #8]
    4eca:	b1d0      	cbz	r0, 4f02 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4ecc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4ece:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ed0:	429c      	cmp	r4, r3
    4ed2:	d00a      	beq.n	4eea <z_impl_k_mutex_lock+0xc6>
    4ed4:	b14b      	cbz	r3, 4eea <z_impl_k_mutex_lock+0xc6>
    4ed6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4eda:	4299      	cmp	r1, r3
    4edc:	bfa8      	it	ge
    4ede:	4619      	movge	r1, r3
    4ee0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4ee4:	4299      	cmp	r1, r3
    4ee6:	bfb8      	it	lt
    4ee8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    4eea:	f001 ff85 	bl	6df8 <adjust_owner_prio.isra.0>
    4eee:	b140      	cbz	r0, 4f02 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4ef0:	4808      	ldr	r0, [pc, #32]	; (4f14 <z_impl_k_mutex_lock+0xf0>)
    4ef2:	4631      	mov	r1, r6
    4ef4:	f000 fa3c 	bl	5370 <z_reschedule>
	return -EAGAIN;
    4ef8:	f06f 000a 	mvn.w	r0, #10
    4efc:	e7af      	b.n	4e5e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    4efe:	2500      	movs	r5, #0
    4f00:	e7d1      	b.n	4ea6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    4f02:	2d00      	cmp	r5, #0
    4f04:	d1f4      	bne.n	4ef0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    4f06:	f386 8811 	msr	BASEPRI, r6
    4f0a:	f3bf 8f6f 	isb	sy
    4f0e:	e7f3      	b.n	4ef8 <z_impl_k_mutex_lock+0xd4>
    4f10:	200009d0 	.word	0x200009d0
    4f14:	20000ffe 	.word	0x20000ffe

00004f18 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4f18:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4f1a:	6883      	ldr	r3, [r0, #8]
{
    4f1c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4f1e:	b36b      	cbz	r3, 4f7c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4f20:	4a19      	ldr	r2, [pc, #100]	; (4f88 <z_impl_k_mutex_unlock+0x70>)
    4f22:	6892      	ldr	r2, [r2, #8]
    4f24:	4293      	cmp	r3, r2
    4f26:	d12c      	bne.n	4f82 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4f28:	68c3      	ldr	r3, [r0, #12]
    4f2a:	2b01      	cmp	r3, #1
    4f2c:	d903      	bls.n	4f36 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    4f2e:	3b01      	subs	r3, #1
    4f30:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    4f32:	2000      	movs	r0, #0
}
    4f34:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4f36:	f04f 0320 	mov.w	r3, #32
    4f3a:	f3ef 8511 	mrs	r5, BASEPRI
    4f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f42:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4f46:	6901      	ldr	r1, [r0, #16]
    4f48:	6880      	ldr	r0, [r0, #8]
    4f4a:	f001 ff55 	bl	6df8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4f4e:	4620      	mov	r0, r4
    4f50:	f001 ffcd 	bl	6eee <z_unpend_first_thread>
	mutex->owner = new_owner;
    4f54:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4f56:	b158      	cbz	r0, 4f70 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    4f58:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4f5c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4f5e:	2200      	movs	r2, #0
    4f60:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4f62:	f001 ffb4 	bl	6ece <z_ready_thread>
		z_reschedule(&lock, key);
    4f66:	4809      	ldr	r0, [pc, #36]	; (4f8c <z_impl_k_mutex_unlock+0x74>)
    4f68:	4629      	mov	r1, r5
    4f6a:	f000 fa01 	bl	5370 <z_reschedule>
    4f6e:	e7e0      	b.n	4f32 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    4f70:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4f72:	f385 8811 	msr	BASEPRI, r5
    4f76:	f3bf 8f6f 	isb	sy
    4f7a:	e7da      	b.n	4f32 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    4f7c:	f06f 0015 	mvn.w	r0, #21
    4f80:	e7d8      	b.n	4f34 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    4f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f86:	e7d5      	b.n	4f34 <z_impl_k_mutex_unlock+0x1c>
    4f88:	200009d0 	.word	0x200009d0
    4f8c:	20000ffe 	.word	0x20000ffe

00004f90 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4f90:	b538      	push	{r3, r4, r5, lr}
    4f92:	4604      	mov	r4, r0
	__asm__ volatile(
    4f94:	f04f 0320 	mov.w	r3, #32
    4f98:	f3ef 8511 	mrs	r5, BASEPRI
    4f9c:	f383 8812 	msr	BASEPRI_MAX, r3
    4fa0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4fa4:	f001 ffa3 	bl	6eee <z_unpend_first_thread>

	if (thread != NULL) {
    4fa8:	b148      	cbz	r0, 4fbe <z_impl_k_sem_give+0x2e>
    4faa:	2200      	movs	r2, #0
    4fac:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4fae:	f001 ff8e 	bl	6ece <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4fb2:	4629      	mov	r1, r5
    4fb4:	4805      	ldr	r0, [pc, #20]	; (4fcc <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4fba:	f000 b9d9 	b.w	5370 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4fbe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4fc2:	429a      	cmp	r2, r3
    4fc4:	bf18      	it	ne
    4fc6:	3301      	addne	r3, #1
    4fc8:	60a3      	str	r3, [r4, #8]
}
    4fca:	e7f2      	b.n	4fb2 <z_impl_k_sem_give+0x22>
    4fcc:	20000ffe 	.word	0x20000ffe

00004fd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4fd0:	b513      	push	{r0, r1, r4, lr}
    4fd2:	f04f 0420 	mov.w	r4, #32
    4fd6:	f3ef 8111 	mrs	r1, BASEPRI
    4fda:	f384 8812 	msr	BASEPRI_MAX, r4
    4fde:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4fe2:	6884      	ldr	r4, [r0, #8]
    4fe4:	b144      	cbz	r4, 4ff8 <z_impl_k_sem_take+0x28>
		sem->count--;
    4fe6:	3c01      	subs	r4, #1
    4fe8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4fea:	f381 8811 	msr	BASEPRI, r1
    4fee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4ff2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4ff4:	b002      	add	sp, #8
    4ff6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4ff8:	ea52 0403 	orrs.w	r4, r2, r3
    4ffc:	d106      	bne.n	500c <z_impl_k_sem_take+0x3c>
    4ffe:	f381 8811 	msr	BASEPRI, r1
    5002:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5006:	f06f 000f 	mvn.w	r0, #15
    500a:	e7f3      	b.n	4ff4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    500c:	e9cd 2300 	strd	r2, r3, [sp]
    5010:	4602      	mov	r2, r0
    5012:	4802      	ldr	r0, [pc, #8]	; (501c <z_impl_k_sem_take+0x4c>)
    5014:	f000 f948 	bl	52a8 <z_pend_curr>
	return ret;
    5018:	e7ec      	b.n	4ff4 <z_impl_k_sem_take+0x24>
    501a:	bf00      	nop
    501c:	20000ffe 	.word	0x20000ffe

00005020 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5020:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5022:	4d07      	ldr	r5, [pc, #28]	; (5040 <z_reset_time_slice+0x20>)
    5024:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5026:	b154      	cbz	r4, 503e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5028:	f7fe fc08 	bl	383c <sys_clock_elapsed>
    502c:	4b05      	ldr	r3, [pc, #20]	; (5044 <z_reset_time_slice+0x24>)
    502e:	4404      	add	r4, r0
    5030:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5032:	6828      	ldr	r0, [r5, #0]
    5034:	2100      	movs	r1, #0
	}
}
    5036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    503a:	f001 bfb0 	b.w	6f9e <z_set_timeout_expiry>
}
    503e:	bd38      	pop	{r3, r4, r5, pc}
    5040:	20000a00 	.word	0x20000a00
    5044:	200009d0 	.word	0x200009d0

00005048 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5048:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    504a:	4d0d      	ldr	r5, [pc, #52]	; (5080 <update_cache+0x38>)
    504c:	462b      	mov	r3, r5
    504e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5052:	429c      	cmp	r4, r3
    5054:	d000      	beq.n	5058 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5056:	b904      	cbnz	r4, 505a <update_cache+0x12>
    5058:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    505a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    505c:	b938      	cbnz	r0, 506e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    505e:	7b5a      	ldrb	r2, [r3, #13]
    5060:	06d2      	lsls	r2, r2, #27
    5062:	d104      	bne.n	506e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5064:	69a2      	ldr	r2, [r4, #24]
    5066:	b912      	cbnz	r2, 506e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5068:	89da      	ldrh	r2, [r3, #14]
    506a:	2a7f      	cmp	r2, #127	; 0x7f
    506c:	d805      	bhi.n	507a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    506e:	429c      	cmp	r4, r3
    5070:	d002      	beq.n	5078 <update_cache+0x30>
			z_reset_time_slice(thread);
    5072:	4620      	mov	r0, r4
    5074:	f7ff ffd4 	bl	5020 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5078:	4623      	mov	r3, r4
    507a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    507c:	bd38      	pop	{r3, r4, r5, pc}
    507e:	bf00      	nop
    5080:	200009d0 	.word	0x200009d0

00005084 <move_thread_to_end_of_prio_q>:
{
    5084:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5086:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    508a:	7b43      	ldrb	r3, [r0, #13]
    508c:	2a00      	cmp	r2, #0
{
    508e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5090:	da04      	bge.n	509c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5096:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5098:	f001 febd 	bl	6e16 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    509c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    509e:	4a15      	ldr	r2, [pc, #84]	; (50f4 <move_thread_to_end_of_prio_q+0x70>)
    50a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    50a4:	4610      	mov	r0, r2
    50a6:	734b      	strb	r3, [r1, #13]
    50a8:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    50ac:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50ae:	4283      	cmp	r3, r0
    50b0:	bf08      	it	eq
    50b2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    50b4:	b923      	cbnz	r3, 50c0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    50b6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    50ba:	6021      	str	r1, [r4, #0]
	list->tail = node;
    50bc:	6251      	str	r1, [r2, #36]	; 0x24
}
    50be:	e00c      	b.n	50da <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    50c0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    50c4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    50c8:	42b5      	cmp	r5, r6
    50ca:	d00e      	beq.n	50ea <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    50cc:	42ae      	cmp	r6, r5
    50ce:	dd0c      	ble.n	50ea <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    50d0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    50d2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    50d6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    50d8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    50da:	6890      	ldr	r0, [r2, #8]
    50dc:	1a43      	subs	r3, r0, r1
    50de:	4258      	negs	r0, r3
}
    50e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    50e4:	4158      	adcs	r0, r3
    50e6:	f7ff bfaf 	b.w	5048 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    50ea:	429c      	cmp	r4, r3
    50ec:	d0e3      	beq.n	50b6 <move_thread_to_end_of_prio_q+0x32>
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	e7e0      	b.n	50b4 <move_thread_to_end_of_prio_q+0x30>
    50f2:	bf00      	nop
    50f4:	200009d0 	.word	0x200009d0

000050f8 <ready_thread>:
{
    50f8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    50fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
    50fe:	7b42      	ldrb	r2, [r0, #13]
    5100:	2b00      	cmp	r3, #0
    5102:	db29      	blt.n	5158 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5104:	06d3      	lsls	r3, r2, #27
    5106:	d127      	bne.n	5158 <ready_thread+0x60>
	return node->next != NULL;
    5108:	6983      	ldr	r3, [r0, #24]
    510a:	bb2b      	cbnz	r3, 5158 <ready_thread+0x60>
	return list->head == list;
    510c:	4913      	ldr	r1, [pc, #76]	; (515c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    510e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5112:	7342      	strb	r2, [r0, #13]
    5114:	460a      	mov	r2, r1
    5116:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    511a:	4294      	cmp	r4, r2
    511c:	bf18      	it	ne
    511e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5120:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5122:	b923      	cbnz	r3, 512e <ready_thread+0x36>
	node->prev = tail;
    5124:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5128:	6020      	str	r0, [r4, #0]
	list->tail = node;
    512a:	6248      	str	r0, [r1, #36]	; 0x24
}
    512c:	e00c      	b.n	5148 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    512e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5132:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5136:	42b5      	cmp	r5, r6
    5138:	d00a      	beq.n	5150 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    513a:	42ae      	cmp	r6, r5
    513c:	dd08      	ble.n	5150 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    513e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5140:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5144:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5146:	6058      	str	r0, [r3, #4]
}
    5148:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    514a:	2000      	movs	r0, #0
    514c:	f7ff bf7c 	b.w	5048 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5150:	42a3      	cmp	r3, r4
    5152:	d0e7      	beq.n	5124 <ready_thread+0x2c>
    5154:	681b      	ldr	r3, [r3, #0]
    5156:	e7e4      	b.n	5122 <ready_thread+0x2a>
}
    5158:	bc70      	pop	{r4, r5, r6}
    515a:	4770      	bx	lr
    515c:	200009d0 	.word	0x200009d0

00005160 <unready_thread>:
{
    5160:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5162:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5166:	7b43      	ldrb	r3, [r0, #13]
    5168:	2a00      	cmp	r2, #0
{
    516a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    516c:	da04      	bge.n	5178 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    516e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5172:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5174:	f001 fe4f 	bl	6e16 <sys_dlist_remove>
	update_cache(thread == _current);
    5178:	4b04      	ldr	r3, [pc, #16]	; (518c <unready_thread+0x2c>)
    517a:	6898      	ldr	r0, [r3, #8]
    517c:	1a43      	subs	r3, r0, r1
    517e:	4258      	negs	r0, r3
    5180:	4158      	adcs	r0, r3
}
    5182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5186:	f7ff bf5f 	b.w	5048 <update_cache>
    518a:	bf00      	nop
    518c:	200009d0 	.word	0x200009d0

00005190 <pend_locked>:
{
    5190:	b570      	push	{r4, r5, r6, lr}
    5192:	4615      	mov	r5, r2
    5194:	461c      	mov	r4, r3
    5196:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5198:	f001 fe71 	bl	6e7e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    519c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    51a0:	bf08      	it	eq
    51a2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    51a6:	d008      	beq.n	51ba <pend_locked+0x2a>
    51a8:	462a      	mov	r2, r5
    51aa:	4623      	mov	r3, r4
    51ac:	f106 0018 	add.w	r0, r6, #24
    51b0:	4902      	ldr	r1, [pc, #8]	; (51bc <pend_locked+0x2c>)
}
    51b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    51b6:	f000 bae3 	b.w	5780 <z_add_timeout>
    51ba:	bd70      	pop	{r4, r5, r6, pc}
    51bc:	00006e3b 	.word	0x00006e3b

000051c0 <k_sched_time_slice_set>:
{
    51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51c2:	4604      	mov	r4, r0
    51c4:	460d      	mov	r5, r1
	__asm__ volatile(
    51c6:	f04f 0320 	mov.w	r3, #32
    51ca:	f3ef 8711 	mrs	r7, BASEPRI
    51ce:	f383 8812 	msr	BASEPRI_MAX, r3
    51d2:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    51d6:	2600      	movs	r6, #0
    51d8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    51dc:	f240 30e7 	movw	r0, #999	; 0x3e7
    51e0:	4631      	mov	r1, r6
    51e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    51e6:	2300      	movs	r3, #0
    51e8:	fbe4 010c 	umlal	r0, r1, r4, ip
    51ec:	f7fb fba2 	bl	934 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    51f0:	42b4      	cmp	r4, r6
    51f2:	dd02      	ble.n	51fa <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    51f4:	2802      	cmp	r0, #2
    51f6:	bfb8      	it	lt
    51f8:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    51fa:	4a07      	ldr	r2, [pc, #28]	; (5218 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    51fc:	4b07      	ldr	r3, [pc, #28]	; (521c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    51fe:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    5200:	4a07      	ldr	r2, [pc, #28]	; (5220 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5202:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    5204:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    5206:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    5208:	f7ff ff0a 	bl	5020 <z_reset_time_slice>
	__asm__ volatile(
    520c:	f387 8811 	msr	BASEPRI, r7
    5210:	f3bf 8f6f 	isb	sy
}
    5214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5216:	bf00      	nop
    5218:	20000a00 	.word	0x20000a00
    521c:	200009d0 	.word	0x200009d0
    5220:	200009fc 	.word	0x200009fc

00005224 <z_time_slice>:
{
    5224:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5226:	f04f 0320 	mov.w	r3, #32
    522a:	f3ef 8511 	mrs	r5, BASEPRI
    522e:	f383 8812 	msr	BASEPRI_MAX, r3
    5232:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5236:	4b17      	ldr	r3, [pc, #92]	; (5294 <z_time_slice+0x70>)
    5238:	4a17      	ldr	r2, [pc, #92]	; (5298 <z_time_slice+0x74>)
    523a:	689c      	ldr	r4, [r3, #8]
    523c:	6811      	ldr	r1, [r2, #0]
    523e:	428c      	cmp	r4, r1
    5240:	d107      	bne.n	5252 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5242:	4620      	mov	r0, r4
    5244:	f7ff feec 	bl	5020 <z_reset_time_slice>
	__asm__ volatile(
    5248:	f385 8811 	msr	BASEPRI, r5
    524c:	f3bf 8f6f 	isb	sy
}
    5250:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5252:	2100      	movs	r1, #0
    5254:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5256:	4a11      	ldr	r2, [pc, #68]	; (529c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5258:	6812      	ldr	r2, [r2, #0]
    525a:	b1c2      	cbz	r2, 528e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    525c:	89e2      	ldrh	r2, [r4, #14]
    525e:	2a7f      	cmp	r2, #127	; 0x7f
    5260:	d815      	bhi.n	528e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5262:	7b62      	ldrb	r2, [r4, #13]
    5264:	06d2      	lsls	r2, r2, #27
    5266:	d112      	bne.n	528e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5268:	4a0d      	ldr	r2, [pc, #52]	; (52a0 <z_time_slice+0x7c>)
    526a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    526e:	6812      	ldr	r2, [r2, #0]
    5270:	4291      	cmp	r1, r2
    5272:	db0c      	blt.n	528e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5274:	4a0b      	ldr	r2, [pc, #44]	; (52a4 <z_time_slice+0x80>)
    5276:	4294      	cmp	r4, r2
    5278:	d009      	beq.n	528e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    527a:	691a      	ldr	r2, [r3, #16]
    527c:	4282      	cmp	r2, r0
    527e:	dc03      	bgt.n	5288 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5280:	4620      	mov	r0, r4
    5282:	f7ff feff 	bl	5084 <move_thread_to_end_of_prio_q>
    5286:	e7dc      	b.n	5242 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5288:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    528a:	611a      	str	r2, [r3, #16]
    528c:	e7dc      	b.n	5248 <z_time_slice+0x24>
    528e:	2200      	movs	r2, #0
    5290:	e7fb      	b.n	528a <z_time_slice+0x66>
    5292:	bf00      	nop
    5294:	200009d0 	.word	0x200009d0
    5298:	200009f8 	.word	0x200009f8
    529c:	20000a00 	.word	0x20000a00
    52a0:	200009fc 	.word	0x200009fc
    52a4:	200001f8 	.word	0x200001f8

000052a8 <z_pend_curr>:
{
    52a8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    52aa:	480c      	ldr	r0, [pc, #48]	; (52dc <z_pend_curr+0x34>)
    52ac:	4d0c      	ldr	r5, [pc, #48]	; (52e0 <z_pend_curr+0x38>)
    52ae:	6886      	ldr	r6, [r0, #8]
    52b0:	602e      	str	r6, [r5, #0]
{
    52b2:	460c      	mov	r4, r1
    52b4:	4611      	mov	r1, r2
    52b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    52ba:	f04f 0620 	mov.w	r6, #32
    52be:	f3ef 8511 	mrs	r5, BASEPRI
    52c2:	f386 8812 	msr	BASEPRI_MAX, r6
    52c6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    52ca:	6880      	ldr	r0, [r0, #8]
    52cc:	f7ff ff60 	bl	5190 <pend_locked>
	ret = arch_swap(key);
    52d0:	4620      	mov	r0, r4
}
    52d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52d6:	f7fc bfd3 	b.w	2280 <arch_swap>
    52da:	bf00      	nop
    52dc:	200009d0 	.word	0x200009d0
    52e0:	200009f8 	.word	0x200009f8

000052e4 <z_set_prio>:
{
    52e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52e6:	4604      	mov	r4, r0
    52e8:	f04f 0320 	mov.w	r3, #32
    52ec:	f3ef 8611 	mrs	r6, BASEPRI
    52f0:	f383 8812 	msr	BASEPRI_MAX, r3
    52f4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    52f8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    52fa:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    52fc:	b249      	sxtb	r1, r1
    52fe:	d119      	bne.n	5334 <z_set_prio+0x50>
	return node->next != NULL;
    5300:	6985      	ldr	r5, [r0, #24]
    5302:	b9bd      	cbnz	r5, 5334 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5308:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    530a:	f001 fd84 	bl	6e16 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    530e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5310:	4a16      	ldr	r2, [pc, #88]	; (536c <z_set_prio+0x88>)
				thread->base.prio = prio;
    5312:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5314:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5318:	7343      	strb	r3, [r0, #13]
    531a:	4613      	mov	r3, r2
    531c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5320:	4298      	cmp	r0, r3
    5322:	bf18      	it	ne
    5324:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    5326:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5328:	b95d      	cbnz	r5, 5342 <z_set_prio+0x5e>
	node->prev = tail;
    532a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    532e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5330:	6254      	str	r4, [r2, #36]	; 0x24
}
    5332:	e011      	b.n	5358 <z_set_prio+0x74>
			thread->base.prio = prio;
    5334:	73a1      	strb	r1, [r4, #14]
    5336:	2000      	movs	r0, #0
	__asm__ volatile(
    5338:	f386 8811 	msr	BASEPRI, r6
    533c:	f3bf 8f6f 	isb	sy
}
    5340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    5342:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    5346:	42b9      	cmp	r1, r7
    5348:	d00b      	beq.n	5362 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    534a:	428f      	cmp	r7, r1
    534c:	dd09      	ble.n	5362 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    534e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5350:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    5354:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5356:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5358:	2001      	movs	r0, #1
    535a:	f7ff fe75 	bl	5048 <update_cache>
    535e:	2001      	movs	r0, #1
    5360:	e7ea      	b.n	5338 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    5362:	42a8      	cmp	r0, r5
    5364:	d0e1      	beq.n	532a <z_set_prio+0x46>
    5366:	682d      	ldr	r5, [r5, #0]
    5368:	e7de      	b.n	5328 <z_set_prio+0x44>
    536a:	bf00      	nop
    536c:	200009d0 	.word	0x200009d0

00005370 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5370:	b949      	cbnz	r1, 5386 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5372:	f3ef 8005 	mrs	r0, IPSR
    5376:	b930      	cbnz	r0, 5386 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5378:	4b05      	ldr	r3, [pc, #20]	; (5390 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    537a:	69da      	ldr	r2, [r3, #28]
    537c:	689b      	ldr	r3, [r3, #8]
    537e:	429a      	cmp	r2, r3
    5380:	d001      	beq.n	5386 <z_reschedule+0x16>
    5382:	f7fc bf7d 	b.w	2280 <arch_swap>
    5386:	f381 8811 	msr	BASEPRI, r1
    538a:	f3bf 8f6f 	isb	sy
}
    538e:	4770      	bx	lr
    5390:	200009d0 	.word	0x200009d0

00005394 <z_sched_start>:
{
    5394:	b510      	push	{r4, lr}
	__asm__ volatile(
    5396:	f04f 0220 	mov.w	r2, #32
    539a:	f3ef 8411 	mrs	r4, BASEPRI
    539e:	f382 8812 	msr	BASEPRI_MAX, r2
    53a2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    53a6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    53a8:	0751      	lsls	r1, r2, #29
    53aa:	d404      	bmi.n	53b6 <z_sched_start+0x22>
	__asm__ volatile(
    53ac:	f384 8811 	msr	BASEPRI, r4
    53b0:	f3bf 8f6f 	isb	sy
}
    53b4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    53b6:	f022 0204 	bic.w	r2, r2, #4
    53ba:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    53bc:	f7ff fe9c 	bl	50f8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    53c0:	4621      	mov	r1, r4
    53c2:	4802      	ldr	r0, [pc, #8]	; (53cc <z_sched_start+0x38>)
}
    53c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    53c8:	f7ff bfd2 	b.w	5370 <z_reschedule>
    53cc:	20000ffe 	.word	0x20000ffe

000053d0 <z_impl_k_thread_suspend>:
{
    53d0:	b570      	push	{r4, r5, r6, lr}
    53d2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    53d4:	3018      	adds	r0, #24
    53d6:	f001 fdbc 	bl	6f52 <z_abort_timeout>
	__asm__ volatile(
    53da:	f04f 0320 	mov.w	r3, #32
    53de:	f3ef 8611 	mrs	r6, BASEPRI
    53e2:	f383 8812 	msr	BASEPRI_MAX, r3
    53e6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    53ea:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    53ee:	7b63      	ldrb	r3, [r4, #13]
    53f0:	2a00      	cmp	r2, #0
    53f2:	da05      	bge.n	5400 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    53f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53f8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    53fa:	4620      	mov	r0, r4
    53fc:	f001 fd0b 	bl	6e16 <sys_dlist_remove>
		update_cache(thread == _current);
    5400:	4d0b      	ldr	r5, [pc, #44]	; (5430 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5402:	7b63      	ldrb	r3, [r4, #13]
    5404:	68a8      	ldr	r0, [r5, #8]
    5406:	f043 0310 	orr.w	r3, r3, #16
    540a:	7363      	strb	r3, [r4, #13]
    540c:	1b03      	subs	r3, r0, r4
    540e:	4258      	negs	r0, r3
    5410:	4158      	adcs	r0, r3
    5412:	f7ff fe19 	bl	5048 <update_cache>
	__asm__ volatile(
    5416:	f386 8811 	msr	BASEPRI, r6
    541a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    541e:	68ab      	ldr	r3, [r5, #8]
    5420:	42a3      	cmp	r3, r4
    5422:	d103      	bne.n	542c <z_impl_k_thread_suspend+0x5c>
}
    5424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5428:	f001 bd89 	b.w	6f3e <z_reschedule_unlocked>
}
    542c:	bd70      	pop	{r4, r5, r6, pc}
    542e:	bf00      	nop
    5430:	200009d0 	.word	0x200009d0

00005434 <k_sched_lock>:
	__asm__ volatile(
    5434:	f04f 0320 	mov.w	r3, #32
    5438:	f3ef 8111 	mrs	r1, BASEPRI
    543c:	f383 8812 	msr	BASEPRI_MAX, r3
    5440:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5444:	4b04      	ldr	r3, [pc, #16]	; (5458 <k_sched_lock+0x24>)
    5446:	689a      	ldr	r2, [r3, #8]
    5448:	7bd3      	ldrb	r3, [r2, #15]
    544a:	3b01      	subs	r3, #1
    544c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    544e:	f381 8811 	msr	BASEPRI, r1
    5452:	f3bf 8f6f 	isb	sy
}
    5456:	4770      	bx	lr
    5458:	200009d0 	.word	0x200009d0

0000545c <k_sched_unlock>:
{
    545c:	b510      	push	{r4, lr}
	__asm__ volatile(
    545e:	f04f 0320 	mov.w	r3, #32
    5462:	f3ef 8411 	mrs	r4, BASEPRI
    5466:	f383 8812 	msr	BASEPRI_MAX, r3
    546a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    546e:	4b08      	ldr	r3, [pc, #32]	; (5490 <k_sched_unlock+0x34>)
    5470:	689a      	ldr	r2, [r3, #8]
    5472:	7bd3      	ldrb	r3, [r2, #15]
    5474:	3301      	adds	r3, #1
    5476:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5478:	2000      	movs	r0, #0
    547a:	f7ff fde5 	bl	5048 <update_cache>
	__asm__ volatile(
    547e:	f384 8811 	msr	BASEPRI, r4
    5482:	f3bf 8f6f 	isb	sy
}
    5486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    548a:	f001 bd58 	b.w	6f3e <z_reschedule_unlocked>
    548e:	bf00      	nop
    5490:	200009d0 	.word	0x200009d0

00005494 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5494:	4b04      	ldr	r3, [pc, #16]	; (54a8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5496:	2100      	movs	r1, #0
    5498:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    549c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    54a0:	4608      	mov	r0, r1
    54a2:	f7ff be8d 	b.w	51c0 <k_sched_time_slice_set>
    54a6:	bf00      	nop
    54a8:	200009d0 	.word	0x200009d0

000054ac <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    54ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    54ae:	f04f 0320 	mov.w	r3, #32
    54b2:	f3ef 8511 	mrs	r5, BASEPRI
    54b6:	f383 8812 	msr	BASEPRI_MAX, r3
    54ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    54be:	4919      	ldr	r1, [pc, #100]	; (5524 <z_impl_k_yield+0x78>)
    54c0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    54c2:	7b43      	ldrb	r3, [r0, #13]
    54c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    54c8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    54ca:	f001 fca4 	bl	6e16 <sys_dlist_remove>
	}
	queue_thread(_current);
    54ce:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    54d0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    54d2:	4608      	mov	r0, r1
    54d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    54d8:	735a      	strb	r2, [r3, #13]
    54da:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    54de:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54e0:	4282      	cmp	r2, r0
    54e2:	bf08      	it	eq
    54e4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    54e6:	b922      	cbnz	r2, 54f2 <z_impl_k_yield+0x46>
	node->prev = tail;
    54e8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    54ec:	6023      	str	r3, [r4, #0]
	list->tail = node;
    54ee:	624b      	str	r3, [r1, #36]	; 0x24
}
    54f0:	e00c      	b.n	550c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    54f2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    54f6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    54fa:	42be      	cmp	r6, r7
    54fc:	d00e      	beq.n	551c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    54fe:	42b7      	cmp	r7, r6
    5500:	dd0c      	ble.n	551c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    5502:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5504:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5508:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    550a:	6053      	str	r3, [r2, #4]
	update_cache(1);
    550c:	2001      	movs	r0, #1
    550e:	f7ff fd9b 	bl	5048 <update_cache>
    5512:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5518:	f7fc beb2 	b.w	2280 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    551c:	42a2      	cmp	r2, r4
    551e:	d0e3      	beq.n	54e8 <z_impl_k_yield+0x3c>
    5520:	6812      	ldr	r2, [r2, #0]
    5522:	e7e0      	b.n	54e6 <z_impl_k_yield+0x3a>
    5524:	200009d0 	.word	0x200009d0

00005528 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5528:	ea50 0301 	orrs.w	r3, r0, r1
{
    552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5530:	4605      	mov	r5, r0
    5532:	460e      	mov	r6, r1
	if (ticks == 0) {
    5534:	d103      	bne.n	553e <z_tick_sleep+0x16>
	z_impl_k_yield();
    5536:	f7ff ffb9 	bl	54ac <z_impl_k_yield>
		k_yield();
		return 0;
    553a:	2000      	movs	r0, #0
    553c:	e02c      	b.n	5598 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    553e:	1c83      	adds	r3, r0, #2
    5540:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    5544:	db2a      	blt.n	559c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5546:	f001 fd46 	bl	6fd6 <sys_clock_tick_get_32>
    554a:	182c      	adds	r4, r5, r0
    554c:	f04f 0320 	mov.w	r3, #32
    5550:	f3ef 8811 	mrs	r8, BASEPRI
    5554:	f383 8812 	msr	BASEPRI_MAX, r3
    5558:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    555c:	4f11      	ldr	r7, [pc, #68]	; (55a4 <z_tick_sleep+0x7c>)
    555e:	4b12      	ldr	r3, [pc, #72]	; (55a8 <z_tick_sleep+0x80>)
    5560:	68b8      	ldr	r0, [r7, #8]
    5562:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    5564:	f7ff fdfc 	bl	5160 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5568:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    556a:	4910      	ldr	r1, [pc, #64]	; (55ac <z_tick_sleep+0x84>)
    556c:	462a      	mov	r2, r5
    556e:	4633      	mov	r3, r6
    5570:	3018      	adds	r0, #24
    5572:	f000 f905 	bl	5780 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5576:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5578:	7b53      	ldrb	r3, [r2, #13]
    557a:	f043 0310 	orr.w	r3, r3, #16
    557e:	7353      	strb	r3, [r2, #13]
    5580:	4640      	mov	r0, r8
    5582:	f7fc fe7d 	bl	2280 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5586:	f001 fd26 	bl	6fd6 <sys_clock_tick_get_32>
    558a:	1a20      	subs	r0, r4, r0
    558c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5590:	2801      	cmp	r0, #1
    5592:	f173 0300 	sbcs.w	r3, r3, #0
    5596:	dbd0      	blt.n	553a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    5598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    559c:	f06f 0401 	mvn.w	r4, #1
    55a0:	1a24      	subs	r4, r4, r0
    55a2:	e7d3      	b.n	554c <z_tick_sleep+0x24>
    55a4:	200009d0 	.word	0x200009d0
    55a8:	200009f8 	.word	0x200009f8
    55ac:	00006e3b 	.word	0x00006e3b

000055b0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55b0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    55b4:	bf08      	it	eq
    55b6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    55ba:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55bc:	d106      	bne.n	55cc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    55be:	4b08      	ldr	r3, [pc, #32]	; (55e0 <z_impl_k_sleep+0x30>)
    55c0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    55c2:	f7ff ff05 	bl	53d0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    55c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    55ca:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    55cc:	f7ff ffac 	bl	5528 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    55d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    55d4:	fb80 0303 	smull	r0, r3, r0, r3
    55d8:	0bc0      	lsrs	r0, r0, #15
    55da:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    55de:	e7f4      	b.n	55ca <z_impl_k_sleep+0x1a>
    55e0:	200009d0 	.word	0x200009d0

000055e4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    55e4:	4b01      	ldr	r3, [pc, #4]	; (55ec <z_impl_z_current_get+0x8>)
    55e6:	6898      	ldr	r0, [r3, #8]
    55e8:	4770      	bx	lr
    55ea:	bf00      	nop
    55ec:	200009d0 	.word	0x200009d0

000055f0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    55f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55f4:	4604      	mov	r4, r0
    55f6:	f04f 0320 	mov.w	r3, #32
    55fa:	f3ef 8611 	mrs	r6, BASEPRI
    55fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5602:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5606:	7b03      	ldrb	r3, [r0, #12]
    5608:	07d9      	lsls	r1, r3, #31
    560a:	d50b      	bpl.n	5624 <z_thread_abort+0x34>
	__asm__ volatile(
    560c:	f386 8811 	msr	BASEPRI, r6
    5610:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5614:	4040      	eors	r0, r0
    5616:	f380 8811 	msr	BASEPRI, r0
    561a:	f04f 0004 	mov.w	r0, #4
    561e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5624:	7b43      	ldrb	r3, [r0, #13]
    5626:	071a      	lsls	r2, r3, #28
    5628:	d504      	bpl.n	5634 <z_thread_abort+0x44>
    562a:	f386 8811 	msr	BASEPRI, r6
    562e:	f3bf 8f6f 	isb	sy
    5632:	e7f5      	b.n	5620 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5634:	f023 0220 	bic.w	r2, r3, #32
    5638:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    563c:	09d2      	lsrs	r2, r2, #7
    563e:	d120      	bne.n	5682 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5640:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5642:	68a3      	ldr	r3, [r4, #8]
    5644:	b113      	cbz	r3, 564c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5646:	4620      	mov	r0, r4
    5648:	f001 fbed 	bl	6e26 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    564c:	f104 0018 	add.w	r0, r4, #24
    5650:	f001 fc7f 	bl	6f52 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5654:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5658:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    565c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    565e:	42bd      	cmp	r5, r7
    5660:	d000      	beq.n	5664 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5662:	b9b5      	cbnz	r5, 5692 <z_thread_abort+0xa2>
		update_cache(1);
    5664:	2001      	movs	r0, #1
    5666:	f7ff fcef 	bl	5048 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    566a:	4b10      	ldr	r3, [pc, #64]	; (56ac <z_thread_abort+0xbc>)
    566c:	689b      	ldr	r3, [r3, #8]
    566e:	42a3      	cmp	r3, r4
    5670:	d1db      	bne.n	562a <z_thread_abort+0x3a>
    5672:	f3ef 8305 	mrs	r3, IPSR
    5676:	2b00      	cmp	r3, #0
    5678:	d1d7      	bne.n	562a <z_thread_abort+0x3a>
    567a:	4630      	mov	r0, r6
    567c:	f7fc fe00 	bl	2280 <arch_swap>
	return ret;
    5680:	e7d3      	b.n	562a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5682:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5686:	f043 0308 	orr.w	r3, r3, #8
    568a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    568c:	f001 fbc3 	bl	6e16 <sys_dlist_remove>
}
    5690:	e7d7      	b.n	5642 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    5692:	4628      	mov	r0, r5
    5694:	f001 fbc7 	bl	6e26 <unpend_thread_no_timeout>
    5698:	f105 0018 	add.w	r0, r5, #24
    569c:	f001 fc59 	bl	6f52 <z_abort_timeout>
    56a0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    56a4:	4628      	mov	r0, r5
    56a6:	f7ff fd27 	bl	50f8 <ready_thread>
    56aa:	e7d7      	b.n	565c <z_thread_abort+0x6c>
    56ac:	200009d0 	.word	0x200009d0

000056b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    56b0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    56b2:	4806      	ldr	r0, [pc, #24]	; (56cc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    56b4:	4a06      	ldr	r2, [pc, #24]	; (56d0 <z_data_copy+0x20>)
    56b6:	4907      	ldr	r1, [pc, #28]	; (56d4 <z_data_copy+0x24>)
    56b8:	1a12      	subs	r2, r2, r0
    56ba:	f001 fb41 	bl	6d40 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    56be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    56c2:	4a05      	ldr	r2, [pc, #20]	; (56d8 <z_data_copy+0x28>)
    56c4:	4905      	ldr	r1, [pc, #20]	; (56dc <z_data_copy+0x2c>)
    56c6:	4806      	ldr	r0, [pc, #24]	; (56e0 <z_data_copy+0x30>)
    56c8:	f001 bb3a 	b.w	6d40 <z_early_memcpy>
    56cc:	20000000 	.word	0x20000000
    56d0:	200001d4 	.word	0x200001d4
    56d4:	00007778 	.word	0x00007778
    56d8:	00000000 	.word	0x00000000
    56dc:	00007778 	.word	0x00007778
    56e0:	20000000 	.word	0x20000000

000056e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    56e4:	4b03      	ldr	r3, [pc, #12]	; (56f4 <elapsed+0x10>)
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	b90b      	cbnz	r3, 56ee <elapsed+0xa>
    56ea:	f7fe b8a7 	b.w	383c <sys_clock_elapsed>
}
    56ee:	2000      	movs	r0, #0
    56f0:	4770      	bx	lr
    56f2:	bf00      	nop
    56f4:	20000a04 	.word	0x20000a04

000056f8 <next_timeout>:

static int32_t next_timeout(void)
{
    56f8:	b510      	push	{r4, lr}
	return list->head == list;
    56fa:	4b11      	ldr	r3, [pc, #68]	; (5740 <next_timeout+0x48>)
    56fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56fe:	429c      	cmp	r4, r3
    5700:	d10a      	bne.n	5718 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5702:	f7ff ffef 	bl	56e4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    5706:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    570a:	4b0e      	ldr	r3, [pc, #56]	; (5744 <next_timeout+0x4c>)
    570c:	691b      	ldr	r3, [r3, #16]
    570e:	b113      	cbz	r3, 5716 <next_timeout+0x1e>
    5710:	4298      	cmp	r0, r3
    5712:	bfa8      	it	ge
    5714:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5716:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    5718:	f7ff ffe4 	bl	56e4 <elapsed>
	if ((to == NULL) ||
    571c:	2c00      	cmp	r4, #0
    571e:	d0f2      	beq.n	5706 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5720:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5724:	1a1b      	subs	r3, r3, r0
    5726:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    572a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    572e:	f172 0100 	sbcs.w	r1, r2, #0
    5732:	dae8      	bge.n	5706 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    5734:	2a00      	cmp	r2, #0
    5736:	bfac      	ite	ge
    5738:	4618      	movge	r0, r3
    573a:	2000      	movlt	r0, #0
    573c:	e7e5      	b.n	570a <next_timeout+0x12>
    573e:	bf00      	nop
    5740:	20000110 	.word	0x20000110
    5744:	200009d0 	.word	0x200009d0

00005748 <remove_timeout>:
{
    5748:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    574a:	b170      	cbz	r0, 576a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    574c:	4b0b      	ldr	r3, [pc, #44]	; (577c <remove_timeout+0x34>)
    574e:	685b      	ldr	r3, [r3, #4]
    5750:	4298      	cmp	r0, r3
    5752:	d00a      	beq.n	576a <remove_timeout+0x22>
    5754:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    5756:	b143      	cbz	r3, 576a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5758:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    575c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5760:	1912      	adds	r2, r2, r4
    5762:	eb41 0105 	adc.w	r1, r1, r5
    5766:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    576a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    576e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5770:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5772:	2300      	movs	r3, #0
	node->prev = NULL;
    5774:	e9c0 3300 	strd	r3, r3, [r0]
}
    5778:	bd30      	pop	{r4, r5, pc}
    577a:	bf00      	nop
    577c:	20000110 	.word	0x20000110

00005780 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5784:	bf08      	it	eq
    5786:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    578a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    578c:	4604      	mov	r4, r0
    578e:	461d      	mov	r5, r3
    5790:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5792:	d061      	beq.n	5858 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5794:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5796:	f04f 0320 	mov.w	r3, #32
    579a:	f3ef 8711 	mrs	r7, BASEPRI
    579e:	f383 8812 	msr	BASEPRI_MAX, r3
    57a2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    57a6:	3201      	adds	r2, #1
    57a8:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    57ac:	da24      	bge.n	57f8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    57ae:	4930      	ldr	r1, [pc, #192]	; (5870 <z_add_timeout+0xf0>)
    57b0:	e9d1 2000 	ldrd	r2, r0, [r1]
    57b4:	f06f 0301 	mvn.w	r3, #1
    57b8:	1a9b      	subs	r3, r3, r2
    57ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57be:	eb62 0000 	sbc.w	r0, r2, r0
    57c2:	1b9e      	subs	r6, r3, r6
    57c4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    57c8:	2e01      	cmp	r6, #1
    57ca:	f170 0300 	sbcs.w	r3, r0, #0
    57ce:	da01      	bge.n	57d4 <z_add_timeout+0x54>
    57d0:	2601      	movs	r6, #1
    57d2:	2000      	movs	r0, #0
    57d4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    57d8:	4e26      	ldr	r6, [pc, #152]	; (5874 <z_add_timeout+0xf4>)
    57da:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    57de:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57e0:	45b4      	cmp	ip, r6
    57e2:	bf08      	it	eq
    57e4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    57e8:	f1bc 0f00 	cmp.w	ip, #0
    57ec:	d10d      	bne.n	580a <z_add_timeout+0x8a>
	node->prev = tail;
    57ee:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    57f2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    57f4:	6074      	str	r4, [r6, #4]
}
    57f6:	e01c      	b.n	5832 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    57f8:	f7ff ff74 	bl	56e4 <elapsed>
    57fc:	3601      	adds	r6, #1
    57fe:	f145 0500 	adc.w	r5, r5, #0
    5802:	1836      	adds	r6, r6, r0
    5804:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    5808:	e7e4      	b.n	57d4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    580a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    580e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    5812:	4293      	cmp	r3, r2
    5814:	eb71 0e00 	sbcs.w	lr, r1, r0
    5818:	da1f      	bge.n	585a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    581a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    581c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5820:	eb60 0001 	sbc.w	r0, r0, r1
    5824:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    5828:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    582c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    582e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    5832:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5834:	42b3      	cmp	r3, r6
    5836:	d00b      	beq.n	5850 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5838:	429c      	cmp	r4, r3
    583a:	d109      	bne.n	5850 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    583c:	f7ff ff5c 	bl	56f8 <next_timeout>

			if (next_time == 0 ||
    5840:	b118      	cbz	r0, 584a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    5842:	4b0d      	ldr	r3, [pc, #52]	; (5878 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    5844:	691b      	ldr	r3, [r3, #16]
    5846:	4283      	cmp	r3, r0
    5848:	d002      	beq.n	5850 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    584a:	2100      	movs	r1, #0
    584c:	f7fd ffc4 	bl	37d8 <sys_clock_set_timeout>
	__asm__ volatile(
    5850:	f387 8811 	msr	BASEPRI, r7
    5854:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    585a:	1a9b      	subs	r3, r3, r2
    585c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    5860:	45ac      	cmp	ip, r5
    5862:	e9c4 3104 	strd	r3, r1, [r4, #16]
    5866:	d0c2      	beq.n	57ee <z_add_timeout+0x6e>
    5868:	f8dc c000 	ldr.w	ip, [ip]
    586c:	e7bc      	b.n	57e8 <z_add_timeout+0x68>
    586e:	bf00      	nop
    5870:	200002f8 	.word	0x200002f8
    5874:	20000110 	.word	0x20000110
    5878:	200009d0 	.word	0x200009d0

0000587c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    587c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5880:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5882:	f7ff fccf 	bl	5224 <z_time_slice>
	__asm__ volatile(
    5886:	f04f 0320 	mov.w	r3, #32
    588a:	f3ef 8611 	mrs	r6, BASEPRI
    588e:	f383 8812 	msr	BASEPRI_MAX, r3
    5892:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5896:	4f23      	ldr	r7, [pc, #140]	; (5924 <sys_clock_announce+0xa8>)
	return list->head == list;
    5898:	f8df 808c 	ldr.w	r8, [pc, #140]	; 5928 <sys_clock_announce+0xac>
    589c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    58a0:	4a22      	ldr	r2, [pc, #136]	; (592c <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    58a2:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58a4:	4540      	cmp	r0, r8
		curr_tick += dt;
    58a6:	e9d2 3e00 	ldrd	r3, lr, [r2]
    58aa:	ea4f 71e4 	mov.w	r1, r4, asr #31
    58ae:	d00b      	beq.n	58c8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    58b0:	b150      	cbz	r0, 58c8 <sys_clock_announce+0x4c>
    58b2:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    58b6:	42ac      	cmp	r4, r5
    58b8:	eb71 090c 	sbcs.w	r9, r1, ip
    58bc:	da16      	bge.n	58ec <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    58be:	1b2d      	subs	r5, r5, r4
    58c0:	eb6c 0c01 	sbc.w	ip, ip, r1
    58c4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    58c8:	18e3      	adds	r3, r4, r3
    58ca:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    58ce:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    58d0:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    58d4:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    58d6:	f7ff ff0f 	bl	56f8 <next_timeout>
    58da:	4621      	mov	r1, r4
    58dc:	f7fd ff7c 	bl	37d8 <sys_clock_set_timeout>
	__asm__ volatile(
    58e0:	f386 8811 	msr	BASEPRI, r6
    58e4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    58e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    58ec:	18eb      	adds	r3, r5, r3
    58ee:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    58f2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    58f6:	2200      	movs	r2, #0
    58f8:	2300      	movs	r3, #0
    58fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    58fe:	f7ff ff23 	bl	5748 <remove_timeout>
    5902:	f386 8811 	msr	BASEPRI, r6
    5906:	f3bf 8f6f 	isb	sy
		t->fn(t);
    590a:	6883      	ldr	r3, [r0, #8]
    590c:	4798      	blx	r3
	__asm__ volatile(
    590e:	f04f 0320 	mov.w	r3, #32
    5912:	f3ef 8611 	mrs	r6, BASEPRI
    5916:	f383 8812 	msr	BASEPRI_MAX, r3
    591a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    591e:	683c      	ldr	r4, [r7, #0]
    5920:	1b64      	subs	r4, r4, r5
    5922:	e7bb      	b.n	589c <sys_clock_announce+0x20>
    5924:	20000a04 	.word	0x20000a04
    5928:	20000110 	.word	0x20000110
    592c:	200002f8 	.word	0x200002f8

00005930 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5930:	b510      	push	{r4, lr}
    5932:	f04f 0320 	mov.w	r3, #32
    5936:	f3ef 8411 	mrs	r4, BASEPRI
    593a:	f383 8812 	msr	BASEPRI_MAX, r3
    593e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    5942:	f7ff fecf 	bl	56e4 <elapsed>
    5946:	4a06      	ldr	r2, [pc, #24]	; (5960 <sys_clock_tick_get+0x30>)
    5948:	4603      	mov	r3, r0
    594a:	e9d2 0100 	ldrd	r0, r1, [r2]
    594e:	1818      	adds	r0, r3, r0
    5950:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    5954:	f384 8811 	msr	BASEPRI, r4
    5958:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    595c:	bd10      	pop	{r4, pc}
    595e:	bf00      	nop
    5960:	200002f8 	.word	0x200002f8

00005964 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    5964:	4801      	ldr	r0, [pc, #4]	; (596c <boot_banner+0x8>)
    5966:	f000 bce1 	b.w	632c <printk>
    596a:	bf00      	nop
    596c:	00007747 	.word	0x00007747

00005970 <nrf_cc3xx_platform_init_no_rng>:
    5970:	b510      	push	{r4, lr}
    5972:	4c0a      	ldr	r4, [pc, #40]	; (599c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5974:	6823      	ldr	r3, [r4, #0]
    5976:	b11b      	cbz	r3, 5980 <nrf_cc3xx_platform_init_no_rng+0x10>
    5978:	2301      	movs	r3, #1
    597a:	6023      	str	r3, [r4, #0]
    597c:	2000      	movs	r0, #0
    597e:	bd10      	pop	{r4, pc}
    5980:	f000 f8e6 	bl	5b50 <CC_LibInitNoRng>
    5984:	2800      	cmp	r0, #0
    5986:	d0f7      	beq.n	5978 <nrf_cc3xx_platform_init_no_rng+0x8>
    5988:	3801      	subs	r0, #1
    598a:	2806      	cmp	r0, #6
    598c:	d803      	bhi.n	5996 <nrf_cc3xx_platform_init_no_rng+0x26>
    598e:	4b04      	ldr	r3, [pc, #16]	; (59a0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5990:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5994:	bd10      	pop	{r4, pc}
    5996:	4803      	ldr	r0, [pc, #12]	; (59a4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5998:	bd10      	pop	{r4, pc}
    599a:	bf00      	nop
    599c:	20000a08 	.word	0x20000a08
    59a0:	000074bc 	.word	0x000074bc
    59a4:	ffff8ffe 	.word	0xffff8ffe

000059a8 <nrf_cc3xx_platform_abort>:
    59a8:	f3bf 8f4f 	dsb	sy
    59ac:	4905      	ldr	r1, [pc, #20]	; (59c4 <nrf_cc3xx_platform_abort+0x1c>)
    59ae:	4b06      	ldr	r3, [pc, #24]	; (59c8 <nrf_cc3xx_platform_abort+0x20>)
    59b0:	68ca      	ldr	r2, [r1, #12]
    59b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    59b6:	4313      	orrs	r3, r2
    59b8:	60cb      	str	r3, [r1, #12]
    59ba:	f3bf 8f4f 	dsb	sy
    59be:	bf00      	nop
    59c0:	e7fd      	b.n	59be <nrf_cc3xx_platform_abort+0x16>
    59c2:	bf00      	nop
    59c4:	e000ed00 	.word	0xe000ed00
    59c8:	05fa0004 	.word	0x05fa0004

000059cc <CC_PalAbort>:
    59cc:	b410      	push	{r4}
    59ce:	4b09      	ldr	r3, [pc, #36]	; (59f4 <CC_PalAbort+0x28>)
    59d0:	4909      	ldr	r1, [pc, #36]	; (59f8 <CC_PalAbort+0x2c>)
    59d2:	4c0a      	ldr	r4, [pc, #40]	; (59fc <CC_PalAbort+0x30>)
    59d4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    59d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    59dc:	6849      	ldr	r1, [r1, #4]
    59de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    59e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    59e6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    59ea:	2300      	movs	r3, #0
    59ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    59f0:	bc10      	pop	{r4}
    59f2:	4708      	bx	r1
    59f4:	5002b000 	.word	0x5002b000
    59f8:	20000118 	.word	0x20000118
    59fc:	5002a000 	.word	0x5002a000

00005a00 <nrf_cc3xx_platform_set_abort>:
    5a00:	e9d0 1200 	ldrd	r1, r2, [r0]
    5a04:	4b01      	ldr	r3, [pc, #4]	; (5a0c <nrf_cc3xx_platform_set_abort+0xc>)
    5a06:	e9c3 1200 	strd	r1, r2, [r3]
    5a0a:	4770      	bx	lr
    5a0c:	20000118 	.word	0x20000118

00005a10 <mutex_free>:
    5a10:	b510      	push	{r4, lr}
    5a12:	4604      	mov	r4, r0
    5a14:	b150      	cbz	r0, 5a2c <mutex_free+0x1c>
    5a16:	6863      	ldr	r3, [r4, #4]
    5a18:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5a1c:	d005      	beq.n	5a2a <mutex_free+0x1a>
    5a1e:	4a06      	ldr	r2, [pc, #24]	; (5a38 <mutex_free+0x28>)
    5a20:	4293      	cmp	r3, r2
    5a22:	d002      	beq.n	5a2a <mutex_free+0x1a>
    5a24:	2300      	movs	r3, #0
    5a26:	6023      	str	r3, [r4, #0]
    5a28:	6062      	str	r2, [r4, #4]
    5a2a:	bd10      	pop	{r4, pc}
    5a2c:	4b03      	ldr	r3, [pc, #12]	; (5a3c <mutex_free+0x2c>)
    5a2e:	4804      	ldr	r0, [pc, #16]	; (5a40 <mutex_free+0x30>)
    5a30:	685b      	ldr	r3, [r3, #4]
    5a32:	4798      	blx	r3
    5a34:	e7ef      	b.n	5a16 <mutex_free+0x6>
    5a36:	bf00      	nop
    5a38:	a95c5f2c 	.word	0xa95c5f2c
    5a3c:	20000118 	.word	0x20000118
    5a40:	000074d8 	.word	0x000074d8

00005a44 <mutex_lock>:
    5a44:	b1c8      	cbz	r0, 5a7a <mutex_lock+0x36>
    5a46:	6843      	ldr	r3, [r0, #4]
    5a48:	4a0d      	ldr	r2, [pc, #52]	; (5a80 <mutex_lock+0x3c>)
    5a4a:	4293      	cmp	r3, r2
    5a4c:	d013      	beq.n	5a76 <mutex_lock+0x32>
    5a4e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5a52:	d00e      	beq.n	5a72 <mutex_lock+0x2e>
    5a54:	2301      	movs	r3, #1
    5a56:	e850 2f00 	ldrex	r2, [r0]
    5a5a:	4619      	mov	r1, r3
    5a5c:	e840 1c00 	strex	ip, r1, [r0]
    5a60:	f09c 0f00 	teq	ip, #0
    5a64:	d1f7      	bne.n	5a56 <mutex_lock+0x12>
    5a66:	2a01      	cmp	r2, #1
    5a68:	d0f5      	beq.n	5a56 <mutex_lock+0x12>
    5a6a:	f3bf 8f5f 	dmb	sy
    5a6e:	2000      	movs	r0, #0
    5a70:	4770      	bx	lr
    5a72:	4804      	ldr	r0, [pc, #16]	; (5a84 <mutex_lock+0x40>)
    5a74:	4770      	bx	lr
    5a76:	4804      	ldr	r0, [pc, #16]	; (5a88 <mutex_lock+0x44>)
    5a78:	4770      	bx	lr
    5a7a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5a7e:	4770      	bx	lr
    5a80:	a95c5f2c 	.word	0xa95c5f2c
    5a84:	ffff8fe9 	.word	0xffff8fe9
    5a88:	ffff8fea 	.word	0xffff8fea

00005a8c <mutex_unlock>:
    5a8c:	b180      	cbz	r0, 5ab0 <mutex_unlock+0x24>
    5a8e:	6843      	ldr	r3, [r0, #4]
    5a90:	4a09      	ldr	r2, [pc, #36]	; (5ab8 <mutex_unlock+0x2c>)
    5a92:	4293      	cmp	r3, r2
    5a94:	d00a      	beq.n	5aac <mutex_unlock+0x20>
    5a96:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5a9a:	d005      	beq.n	5aa8 <mutex_unlock+0x1c>
    5a9c:	f3bf 8f5f 	dmb	sy
    5aa0:	2300      	movs	r3, #0
    5aa2:	6003      	str	r3, [r0, #0]
    5aa4:	4618      	mov	r0, r3
    5aa6:	4770      	bx	lr
    5aa8:	4804      	ldr	r0, [pc, #16]	; (5abc <mutex_unlock+0x30>)
    5aaa:	4770      	bx	lr
    5aac:	4804      	ldr	r0, [pc, #16]	; (5ac0 <mutex_unlock+0x34>)
    5aae:	4770      	bx	lr
    5ab0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5ab4:	4770      	bx	lr
    5ab6:	bf00      	nop
    5ab8:	a95c5f2c 	.word	0xa95c5f2c
    5abc:	ffff8fe9 	.word	0xffff8fe9
    5ac0:	ffff8fea 	.word	0xffff8fea

00005ac4 <mutex_init>:
    5ac4:	b510      	push	{r4, lr}
    5ac6:	4604      	mov	r4, r0
    5ac8:	b120      	cbz	r0, 5ad4 <mutex_init+0x10>
    5aca:	4b04      	ldr	r3, [pc, #16]	; (5adc <mutex_init+0x18>)
    5acc:	6063      	str	r3, [r4, #4]
    5ace:	2200      	movs	r2, #0
    5ad0:	6022      	str	r2, [r4, #0]
    5ad2:	bd10      	pop	{r4, pc}
    5ad4:	4802      	ldr	r0, [pc, #8]	; (5ae0 <mutex_init+0x1c>)
    5ad6:	f7ff ff79 	bl	59cc <CC_PalAbort>
    5ada:	e7f6      	b.n	5aca <mutex_init+0x6>
    5adc:	3a00003a 	.word	0x3a00003a
    5ae0:	00007500 	.word	0x00007500

00005ae4 <nrf_cc3xx_platform_set_mutexes>:
    5ae4:	b570      	push	{r4, r5, r6, lr}
    5ae6:	e9d0 2300 	ldrd	r2, r3, [r0]
    5aea:	4c15      	ldr	r4, [pc, #84]	; (5b40 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5aec:	4d15      	ldr	r5, [pc, #84]	; (5b44 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5aee:	6063      	str	r3, [r4, #4]
    5af0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5af4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5af8:	6022      	str	r2, [r4, #0]
    5afa:	4b13      	ldr	r3, [pc, #76]	; (5b48 <nrf_cc3xx_platform_set_mutexes+0x64>)
    5afc:	6808      	ldr	r0, [r1, #0]
    5afe:	6018      	str	r0, [r3, #0]
    5b00:	6848      	ldr	r0, [r1, #4]
    5b02:	6058      	str	r0, [r3, #4]
    5b04:	6888      	ldr	r0, [r1, #8]
    5b06:	6098      	str	r0, [r3, #8]
    5b08:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5b0c:	60d8      	str	r0, [r3, #12]
    5b0e:	6119      	str	r1, [r3, #16]
    5b10:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5b14:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5b18:	d010      	beq.n	5b3c <nrf_cc3xx_platform_set_mutexes+0x58>
    5b1a:	490c      	ldr	r1, [pc, #48]	; (5b4c <nrf_cc3xx_platform_set_mutexes+0x68>)
    5b1c:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    5b20:	2300      	movs	r3, #0
    5b22:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    5b26:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5b2a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    5b2e:	4790      	blx	r2
    5b30:	6823      	ldr	r3, [r4, #0]
    5b32:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b3a:	4718      	bx	r3
    5b3c:	bd70      	pop	{r4, r5, r6, pc}
    5b3e:	bf00      	nop
    5b40:	20000128 	.word	0x20000128
    5b44:	20000a20 	.word	0x20000a20
    5b48:	20000138 	.word	0x20000138
    5b4c:	a95c5f2c 	.word	0xa95c5f2c

00005b50 <CC_LibInitNoRng>:
    5b50:	b538      	push	{r3, r4, r5, lr}
    5b52:	f000 f82f 	bl	5bb4 <CC_HalInit>
    5b56:	b120      	cbz	r0, 5b62 <CC_LibInitNoRng+0x12>
    5b58:	2403      	movs	r4, #3
    5b5a:	f000 f863 	bl	5c24 <CC_PalTerminate>
    5b5e:	4620      	mov	r0, r4
    5b60:	bd38      	pop	{r3, r4, r5, pc}
    5b62:	f000 f831 	bl	5bc8 <CC_PalInit>
    5b66:	b998      	cbnz	r0, 5b90 <CC_LibInitNoRng+0x40>
    5b68:	f000 f8ac 	bl	5cc4 <CC_PalPowerSaveModeSelect>
    5b6c:	b998      	cbnz	r0, 5b96 <CC_LibInitNoRng+0x46>
    5b6e:	4d0f      	ldr	r5, [pc, #60]	; (5bac <CC_LibInitNoRng+0x5c>)
    5b70:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5b74:	0e1b      	lsrs	r3, r3, #24
    5b76:	2bf0      	cmp	r3, #240	; 0xf0
    5b78:	d108      	bne.n	5b8c <CC_LibInitNoRng+0x3c>
    5b7a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5b7e:	4b0c      	ldr	r3, [pc, #48]	; (5bb0 <CC_LibInitNoRng+0x60>)
    5b80:	429a      	cmp	r2, r3
    5b82:	d00a      	beq.n	5b9a <CC_LibInitNoRng+0x4a>
    5b84:	2407      	movs	r4, #7
    5b86:	f000 f817 	bl	5bb8 <CC_HalTerminate>
    5b8a:	e7e6      	b.n	5b5a <CC_LibInitNoRng+0xa>
    5b8c:	2406      	movs	r4, #6
    5b8e:	e7fa      	b.n	5b86 <CC_LibInitNoRng+0x36>
    5b90:	2404      	movs	r4, #4
    5b92:	4620      	mov	r0, r4
    5b94:	bd38      	pop	{r3, r4, r5, pc}
    5b96:	2400      	movs	r4, #0
    5b98:	e7f5      	b.n	5b86 <CC_LibInitNoRng+0x36>
    5b9a:	2001      	movs	r0, #1
    5b9c:	f000 f892 	bl	5cc4 <CC_PalPowerSaveModeSelect>
    5ba0:	4604      	mov	r4, r0
    5ba2:	2800      	cmp	r0, #0
    5ba4:	d1f7      	bne.n	5b96 <CC_LibInitNoRng+0x46>
    5ba6:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5baa:	e7d8      	b.n	5b5e <CC_LibInitNoRng+0xe>
    5bac:	5002b000 	.word	0x5002b000
    5bb0:	20e00000 	.word	0x20e00000

00005bb4 <CC_HalInit>:
    5bb4:	2000      	movs	r0, #0
    5bb6:	4770      	bx	lr

00005bb8 <CC_HalTerminate>:
    5bb8:	2000      	movs	r0, #0
    5bba:	4770      	bx	lr

00005bbc <CC_HalMaskInterrupt>:
    5bbc:	4b01      	ldr	r3, [pc, #4]	; (5bc4 <CC_HalMaskInterrupt+0x8>)
    5bbe:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5bc2:	4770      	bx	lr
    5bc4:	5002b000 	.word	0x5002b000

00005bc8 <CC_PalInit>:
    5bc8:	b510      	push	{r4, lr}
    5bca:	4811      	ldr	r0, [pc, #68]	; (5c10 <CC_PalInit+0x48>)
    5bcc:	f000 f848 	bl	5c60 <CC_PalMutexCreate>
    5bd0:	b100      	cbz	r0, 5bd4 <CC_PalInit+0xc>
    5bd2:	bd10      	pop	{r4, pc}
    5bd4:	480f      	ldr	r0, [pc, #60]	; (5c14 <CC_PalInit+0x4c>)
    5bd6:	f000 f843 	bl	5c60 <CC_PalMutexCreate>
    5bda:	2800      	cmp	r0, #0
    5bdc:	d1f9      	bne.n	5bd2 <CC_PalInit+0xa>
    5bde:	4c0e      	ldr	r4, [pc, #56]	; (5c18 <CC_PalInit+0x50>)
    5be0:	4620      	mov	r0, r4
    5be2:	f000 f83d 	bl	5c60 <CC_PalMutexCreate>
    5be6:	2800      	cmp	r0, #0
    5be8:	d1f3      	bne.n	5bd2 <CC_PalInit+0xa>
    5bea:	4b0c      	ldr	r3, [pc, #48]	; (5c1c <CC_PalInit+0x54>)
    5bec:	480c      	ldr	r0, [pc, #48]	; (5c20 <CC_PalInit+0x58>)
    5bee:	601c      	str	r4, [r3, #0]
    5bf0:	f000 f836 	bl	5c60 <CC_PalMutexCreate>
    5bf4:	4601      	mov	r1, r0
    5bf6:	2800      	cmp	r0, #0
    5bf8:	d1eb      	bne.n	5bd2 <CC_PalInit+0xa>
    5bfa:	f000 f82d 	bl	5c58 <CC_PalDmaInit>
    5bfe:	4604      	mov	r4, r0
    5c00:	b108      	cbz	r0, 5c06 <CC_PalInit+0x3e>
    5c02:	4620      	mov	r0, r4
    5c04:	bd10      	pop	{r4, pc}
    5c06:	f000 f83f 	bl	5c88 <CC_PalPowerSaveModeInit>
    5c0a:	4620      	mov	r0, r4
    5c0c:	e7fa      	b.n	5c04 <CC_PalInit+0x3c>
    5c0e:	bf00      	nop
    5c10:	20000170 	.word	0x20000170
    5c14:	20000164 	.word	0x20000164
    5c18:	2000016c 	.word	0x2000016c
    5c1c:	20000174 	.word	0x20000174
    5c20:	20000168 	.word	0x20000168

00005c24 <CC_PalTerminate>:
    5c24:	b508      	push	{r3, lr}
    5c26:	4808      	ldr	r0, [pc, #32]	; (5c48 <CC_PalTerminate+0x24>)
    5c28:	f000 f824 	bl	5c74 <CC_PalMutexDestroy>
    5c2c:	4807      	ldr	r0, [pc, #28]	; (5c4c <CC_PalTerminate+0x28>)
    5c2e:	f000 f821 	bl	5c74 <CC_PalMutexDestroy>
    5c32:	4807      	ldr	r0, [pc, #28]	; (5c50 <CC_PalTerminate+0x2c>)
    5c34:	f000 f81e 	bl	5c74 <CC_PalMutexDestroy>
    5c38:	4806      	ldr	r0, [pc, #24]	; (5c54 <CC_PalTerminate+0x30>)
    5c3a:	f000 f81b 	bl	5c74 <CC_PalMutexDestroy>
    5c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5c42:	f000 b80b 	b.w	5c5c <CC_PalDmaTerminate>
    5c46:	bf00      	nop
    5c48:	20000170 	.word	0x20000170
    5c4c:	20000164 	.word	0x20000164
    5c50:	2000016c 	.word	0x2000016c
    5c54:	20000168 	.word	0x20000168

00005c58 <CC_PalDmaInit>:
    5c58:	2000      	movs	r0, #0
    5c5a:	4770      	bx	lr

00005c5c <CC_PalDmaTerminate>:
    5c5c:	4770      	bx	lr
    5c5e:	bf00      	nop

00005c60 <CC_PalMutexCreate>:
    5c60:	b508      	push	{r3, lr}
    5c62:	4b03      	ldr	r3, [pc, #12]	; (5c70 <CC_PalMutexCreate+0x10>)
    5c64:	6802      	ldr	r2, [r0, #0]
    5c66:	681b      	ldr	r3, [r3, #0]
    5c68:	6810      	ldr	r0, [r2, #0]
    5c6a:	4798      	blx	r3
    5c6c:	2000      	movs	r0, #0
    5c6e:	bd08      	pop	{r3, pc}
    5c70:	20000128 	.word	0x20000128

00005c74 <CC_PalMutexDestroy>:
    5c74:	b508      	push	{r3, lr}
    5c76:	4b03      	ldr	r3, [pc, #12]	; (5c84 <CC_PalMutexDestroy+0x10>)
    5c78:	6802      	ldr	r2, [r0, #0]
    5c7a:	685b      	ldr	r3, [r3, #4]
    5c7c:	6810      	ldr	r0, [r2, #0]
    5c7e:	4798      	blx	r3
    5c80:	2000      	movs	r0, #0
    5c82:	bd08      	pop	{r3, pc}
    5c84:	20000128 	.word	0x20000128

00005c88 <CC_PalPowerSaveModeInit>:
    5c88:	b570      	push	{r4, r5, r6, lr}
    5c8a:	4c09      	ldr	r4, [pc, #36]	; (5cb0 <CC_PalPowerSaveModeInit+0x28>)
    5c8c:	4d09      	ldr	r5, [pc, #36]	; (5cb4 <CC_PalPowerSaveModeInit+0x2c>)
    5c8e:	6920      	ldr	r0, [r4, #16]
    5c90:	68ab      	ldr	r3, [r5, #8]
    5c92:	4798      	blx	r3
    5c94:	b118      	cbz	r0, 5c9e <CC_PalPowerSaveModeInit+0x16>
    5c96:	4b08      	ldr	r3, [pc, #32]	; (5cb8 <CC_PalPowerSaveModeInit+0x30>)
    5c98:	4808      	ldr	r0, [pc, #32]	; (5cbc <CC_PalPowerSaveModeInit+0x34>)
    5c9a:	685b      	ldr	r3, [r3, #4]
    5c9c:	4798      	blx	r3
    5c9e:	4a08      	ldr	r2, [pc, #32]	; (5cc0 <CC_PalPowerSaveModeInit+0x38>)
    5ca0:	68eb      	ldr	r3, [r5, #12]
    5ca2:	6920      	ldr	r0, [r4, #16]
    5ca4:	2100      	movs	r1, #0
    5ca6:	6011      	str	r1, [r2, #0]
    5ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cac:	4718      	bx	r3
    5cae:	bf00      	nop
    5cb0:	20000138 	.word	0x20000138
    5cb4:	20000128 	.word	0x20000128
    5cb8:	20000118 	.word	0x20000118
    5cbc:	00007524 	.word	0x00007524
    5cc0:	20000a1c 	.word	0x20000a1c

00005cc4 <CC_PalPowerSaveModeSelect>:
    5cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cc6:	4d1a      	ldr	r5, [pc, #104]	; (5d30 <CC_PalPowerSaveModeSelect+0x6c>)
    5cc8:	4e1a      	ldr	r6, [pc, #104]	; (5d34 <CC_PalPowerSaveModeSelect+0x70>)
    5cca:	4604      	mov	r4, r0
    5ccc:	68b2      	ldr	r2, [r6, #8]
    5cce:	6928      	ldr	r0, [r5, #16]
    5cd0:	4790      	blx	r2
    5cd2:	b9e8      	cbnz	r0, 5d10 <CC_PalPowerSaveModeSelect+0x4c>
    5cd4:	4f18      	ldr	r7, [pc, #96]	; (5d38 <CC_PalPowerSaveModeSelect+0x74>)
    5cd6:	683b      	ldr	r3, [r7, #0]
    5cd8:	b14c      	cbz	r4, 5cee <CC_PalPowerSaveModeSelect+0x2a>
    5cda:	b1a3      	cbz	r3, 5d06 <CC_PalPowerSaveModeSelect+0x42>
    5cdc:	2b01      	cmp	r3, #1
    5cde:	d019      	beq.n	5d14 <CC_PalPowerSaveModeSelect+0x50>
    5ce0:	3b01      	subs	r3, #1
    5ce2:	603b      	str	r3, [r7, #0]
    5ce4:	6928      	ldr	r0, [r5, #16]
    5ce6:	68f3      	ldr	r3, [r6, #12]
    5ce8:	4798      	blx	r3
    5cea:	2000      	movs	r0, #0
    5cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cee:	b943      	cbnz	r3, 5d02 <CC_PalPowerSaveModeSelect+0x3e>
    5cf0:	4a12      	ldr	r2, [pc, #72]	; (5d3c <CC_PalPowerSaveModeSelect+0x78>)
    5cf2:	2101      	movs	r1, #1
    5cf4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5cf8:	4911      	ldr	r1, [pc, #68]	; (5d40 <CC_PalPowerSaveModeSelect+0x7c>)
    5cfa:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    5cfe:	2a00      	cmp	r2, #0
    5d00:	d1fb      	bne.n	5cfa <CC_PalPowerSaveModeSelect+0x36>
    5d02:	3301      	adds	r3, #1
    5d04:	603b      	str	r3, [r7, #0]
    5d06:	68f3      	ldr	r3, [r6, #12]
    5d08:	6928      	ldr	r0, [r5, #16]
    5d0a:	4798      	blx	r3
    5d0c:	2000      	movs	r0, #0
    5d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d10:	480c      	ldr	r0, [pc, #48]	; (5d44 <CC_PalPowerSaveModeSelect+0x80>)
    5d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d14:	4a0a      	ldr	r2, [pc, #40]	; (5d40 <CC_PalPowerSaveModeSelect+0x7c>)
    5d16:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d1fb      	bne.n	5d16 <CC_PalPowerSaveModeSelect+0x52>
    5d1e:	4a07      	ldr	r2, [pc, #28]	; (5d3c <CC_PalPowerSaveModeSelect+0x78>)
    5d20:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5d24:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5d28:	f7ff ff48 	bl	5bbc <CC_HalMaskInterrupt>
    5d2c:	683b      	ldr	r3, [r7, #0]
    5d2e:	e7d7      	b.n	5ce0 <CC_PalPowerSaveModeSelect+0x1c>
    5d30:	20000138 	.word	0x20000138
    5d34:	20000128 	.word	0x20000128
    5d38:	20000a1c 	.word	0x20000a1c
    5d3c:	5002a000 	.word	0x5002a000
    5d40:	5002b000 	.word	0x5002b000
    5d44:	ffff8fe9 	.word	0xffff8fe9

00005d48 <ism330dhcx_read_reg>:
{
    5d48:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    5d4a:	6844      	ldr	r4, [r0, #4]
    5d4c:	68c0      	ldr	r0, [r0, #12]
    5d4e:	46a4      	mov	ip, r4
}
    5d50:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    5d52:	4760      	bx	ip

00005d54 <ism330dhcx_write_reg>:
{
    5d54:	b410      	push	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    5d56:	6804      	ldr	r4, [r0, #0]
    5d58:	68c0      	ldr	r0, [r0, #12]
    5d5a:	46a4      	mov	ip, r4
}
    5d5c:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    5d5e:	4760      	bx	ip

00005d60 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
    5d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    5d62:	2301      	movs	r3, #1
{
    5d64:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    5d66:	aa01      	add	r2, sp, #4
    5d68:	2110      	movs	r1, #16
{
    5d6a:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    5d6c:	f7ff ffec 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
    5d70:	b958      	cbnz	r0, 5d8a <ism330dhcx_xl_full_scale_set+0x2a>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
    5d72:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5d76:	f365 0383 	bfi	r3, r5, #2, #2
    5d7a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
    5d7e:	aa01      	add	r2, sp, #4
    5d80:	2301      	movs	r3, #1
    5d82:	2110      	movs	r1, #16
    5d84:	4620      	mov	r0, r4
    5d86:	f7ff ffe5 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
    5d8a:	b003      	add	sp, #12
    5d8c:	bd30      	pop	{r4, r5, pc}

00005d8e <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
    5d8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
    5d90:	2301      	movs	r3, #1
{
    5d92:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
    5d94:	aa01      	add	r2, sp, #4
    5d96:	2111      	movs	r1, #17
{
    5d98:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
    5d9a:	f7ff ffd5 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
    5d9e:	b958      	cbnz	r0, 5db8 <ism330dhcx_gy_full_scale_set+0x2a>
  {
    ctrl2_g.fs_g = (uint8_t)val;
    5da0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5da4:	f365 0303 	bfi	r3, r5, #0, #4
    5da8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
    5dac:	aa01      	add	r2, sp, #4
    5dae:	2301      	movs	r3, #1
    5db0:	2111      	movs	r1, #17
    5db2:	4620      	mov	r0, r4
    5db4:	f7ff ffce 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
    5db8:	b003      	add	sp, #12
    5dba:	bd30      	pop	{r4, r5, pc}

00005dbc <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
    5dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5dbe:	2301      	movs	r3, #1
{
    5dc0:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5dc2:	aa01      	add	r2, sp, #4
    5dc4:	2112      	movs	r1, #18
{
    5dc6:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5dc8:	f7ff ffbe 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
    5dcc:	b958      	cbnz	r0, 5de6 <ism330dhcx_block_data_update_set+0x2a>
  {
    ctrl3_c.bdu = (uint8_t)val;
    5dce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5dd2:	f365 1386 	bfi	r3, r5, #6, #1
    5dd6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
    5dda:	aa01      	add	r2, sp, #4
    5ddc:	2301      	movs	r3, #1
    5dde:	2112      	movs	r1, #18
    5de0:	4620      	mov	r0, r4
    5de2:	f7ff ffb7 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
    5de6:	b003      	add	sp, #12
    5de8:	bd30      	pop	{r4, r5, pc}

00005dea <ism330dhcx_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
    5dea:	b513      	push	{r0, r1, r4, lr}
  ism330dhcx_status_reg_t status_reg;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_STATUS_REG,
    5dec:	2301      	movs	r3, #1
{
    5dee:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_STATUS_REG,
    5df0:	aa01      	add	r2, sp, #4
    5df2:	211e      	movs	r1, #30
    5df4:	f7ff ffa8 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
    5df8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5dfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
    5e00:	7023      	strb	r3, [r4, #0]

  return ret;
}
    5e02:	b002      	add	sp, #8
    5e04:	bd10      	pop	{r4, pc}

00005e06 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
    5e06:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
    5e08:	2306      	movs	r3, #6
{
    5e0a:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
    5e0c:	466a      	mov	r2, sp
    5e0e:	2128      	movs	r1, #40	; 0x28
    5e10:	f7ff ff9a 	bl	5d48 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    5e14:	f89d 2001 	ldrb.w	r2, [sp, #1]
    5e18:	f89d 3000 	ldrb.w	r3, [sp]
    5e1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5e20:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    5e22:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5e26:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5e2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5e2e:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    5e30:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5e34:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5e38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5e3c:	80a3      	strh	r3, [r4, #4]

  return ret;
}
    5e3e:	b002      	add	sp, #8
    5e40:	bd10      	pop	{r4, pc}

00005e42 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
    5e42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
    5e44:	2301      	movs	r3, #1
{
    5e46:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
    5e48:	aa01      	add	r2, sp, #4
    5e4a:	2118      	movs	r1, #24
{
    5e4c:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
    5e4e:	f7ff ff7b 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
    5e52:	b958      	cbnz	r0, 5e6c <ism330dhcx_device_conf_set+0x2a>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
    5e54:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5e58:	f365 0341 	bfi	r3, r5, #1, #1
    5e5c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
    5e60:	aa01      	add	r2, sp, #4
    5e62:	2301      	movs	r3, #1
    5e64:	2118      	movs	r1, #24
    5e66:	4620      	mov	r0, r4
    5e68:	f7ff ff74 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
}
    5e6c:	b003      	add	sp, #12
    5e6e:	bd30      	pop	{r4, r5, pc}

00005e70 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
    5e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
    5e72:	2301      	movs	r3, #1
{
    5e74:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
    5e76:	aa01      	add	r2, sp, #4
    5e78:	4619      	mov	r1, r3
{
    5e7a:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
    5e7c:	f7ff ff64 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
    5e80:	b958      	cbnz	r0, 5e9a <ism330dhcx_mem_bank_set+0x2a>
  {
    func_cfg_access.reg_access = (uint8_t)val;
    5e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5e86:	f365 1387 	bfi	r3, r5, #6, #2
    5e8a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
    5e8e:	2301      	movs	r3, #1
    5e90:	aa01      	add	r2, sp, #4
    5e92:	4619      	mov	r1, r3
    5e94:	4620      	mov	r0, r4
    5e96:	f7ff ff5d 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
    5e9a:	b003      	add	sp, #12
    5e9c:	bd30      	pop	{r4, r5, pc}

00005e9e <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    5e9e:	b508      	push	{r3, lr}
    5ea0:	460a      	mov	r2, r1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
    5ea2:	2301      	movs	r3, #1
    5ea4:	210f      	movs	r1, #15
    5ea6:	f7ff ff4f 	bl	5d48 <ism330dhcx_read_reg>

  return ret;
}
    5eaa:	bd08      	pop	{r3, pc}

00005eac <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
    5eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5eae:	2301      	movs	r3, #1
{
    5eb0:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5eb2:	aa01      	add	r2, sp, #4
    5eb4:	2112      	movs	r1, #18
{
    5eb6:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5eb8:	f7ff ff46 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
    5ebc:	b958      	cbnz	r0, 5ed6 <ism330dhcx_reset_set+0x2a>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
    5ebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5ec2:	f365 0300 	bfi	r3, r5, #0, #1
    5ec6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
    5eca:	aa01      	add	r2, sp, #4
    5ecc:	2301      	movs	r3, #1
    5ece:	2112      	movs	r1, #18
    5ed0:	4620      	mov	r0, r4
    5ed2:	f7ff ff3f 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
    5ed6:	b003      	add	sp, #12
    5ed8:	bd30      	pop	{r4, r5, pc}

00005eda <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
    5eda:	b513      	push	{r0, r1, r4, lr}
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5edc:	2301      	movs	r3, #1
{
    5ede:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
    5ee0:	aa01      	add	r2, sp, #4
    5ee2:	2112      	movs	r1, #18
    5ee4:	f7ff ff30 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
    5ee8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5eec:	f3c3 0300 	ubfx	r3, r3, #0, #1
    5ef0:	7023      	strb	r3, [r4, #0]

  return ret;
}
    5ef2:	b002      	add	sp, #8
    5ef4:	bd10      	pop	{r4, pc}

00005ef6 <ism330dhcx_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
    5ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    5ef8:	2301      	movs	r3, #1
{
    5efa:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    5efc:	aa01      	add	r2, sp, #4
    5efe:	2110      	movs	r1, #16
{
    5f00:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    5f02:	f7ff ff21 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
    5f06:	b958      	cbnz	r0, 5f20 <ism330dhcx_xl_filter_lp2_set+0x2a>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
    5f08:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5f0c:	f365 0341 	bfi	r3, r5, #1, #1
    5f10:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
    5f14:	aa01      	add	r2, sp, #4
    5f16:	2301      	movs	r3, #1
    5f18:	2110      	movs	r1, #16
    5f1a:	4620      	mov	r0, r4
    5f1c:	f7ff ff1a 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
    5f20:	b003      	add	sp, #12
    5f22:	bd30      	pop	{r4, r5, pc}

00005f24 <ism330dhcx_gy_filter_lp1_set>:
  * @param  val    Change the values of lpf1_sel_g in reg CTRL4_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_filter_lp1_set(stmdev_ctx_t *ctx, uint8_t val)
{
    5f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL4_C,
    5f26:	2301      	movs	r3, #1
{
    5f28:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL4_C,
    5f2a:	aa01      	add	r2, sp, #4
    5f2c:	2113      	movs	r1, #19
{
    5f2e:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL4_C,
    5f30:	f7ff ff0a 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
    5f34:	b958      	cbnz	r0, 5f4e <ism330dhcx_gy_filter_lp1_set+0x2a>
  {
    ctrl4_c.lpf1_sel_g = (uint8_t)val;
    5f36:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5f3a:	f365 0341 	bfi	r3, r5, #1, #1
    5f3e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL4_C,
    5f42:	aa01      	add	r2, sp, #4
    5f44:	2301      	movs	r3, #1
    5f46:	2113      	movs	r1, #19
    5f48:	4620      	mov	r0, r4
    5f4a:	f7ff ff03 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
}
    5f4e:	b003      	add	sp, #12
    5f50:	bd30      	pop	{r4, r5, pc}

00005f52 <ism330dhcx_gy_lp1_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_lp1_bandwidth_set(stmdev_ctx_t *ctx,
                                        ism330dhcx_ftype_t val)
{
    5f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl6_c_t ctrl6_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL6_C,
    5f54:	2301      	movs	r3, #1
{
    5f56:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL6_C,
    5f58:	aa01      	add	r2, sp, #4
    5f5a:	2115      	movs	r1, #21
{
    5f5c:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL6_C,
    5f5e:	f7ff fef3 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl6_c, 1);

  if (ret == 0)
    5f62:	b958      	cbnz	r0, 5f7c <ism330dhcx_gy_lp1_bandwidth_set+0x2a>
  {
    ctrl6_c.ftype = (uint8_t)val;
    5f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5f68:	f365 0302 	bfi	r3, r5, #0, #3
    5f6c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL6_C,
    5f70:	aa01      	add	r2, sp, #4
    5f72:	2301      	movs	r3, #1
    5f74:	2115      	movs	r1, #21
    5f76:	4620      	mov	r0, r4
    5f78:	f7ff feec 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl6_c, 1);
  }

  return ret;
}
    5f7c:	b003      	add	sp, #12
    5f7e:	bd30      	pop	{r4, r5, pc}

00005f80 <ism330dhcx_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                         ism330dhcx_hp_slope_xl_en_t val)
{
    5f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
    5f82:	2301      	movs	r3, #1
{
    5f84:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
    5f86:	aa01      	add	r2, sp, #4
    5f88:	2117      	movs	r1, #23
{
    5f8a:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
    5f8c:	f7ff fedc 	bl	5d48 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
    5f90:	b9a8      	cbnz	r0, 5fbe <ism330dhcx_xl_hp_path_on_out_set+0x3e>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
    5f92:	f3c5 1300 	ubfx	r3, r5, #4, #1
    5f96:	f3c5 1240 	ubfx	r2, r5, #5, #1
    5f9a:	009b      	lsls	r3, r3, #2
    5f9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    5fa0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5fa4:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    5fa8:	f002 020b 	and.w	r2, r2, #11
    5fac:	4313      	orrs	r3, r2
    5fae:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL8_XL,
    5fb2:	aa01      	add	r2, sp, #4
    5fb4:	2301      	movs	r3, #1
    5fb6:	2117      	movs	r1, #23
    5fb8:	4620      	mov	r0, r4
    5fba:	f7ff fecb 	bl	5d54 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
}
    5fbe:	b003      	add	sp, #12
    5fc0:	bd30      	pop	{r4, r5, pc}

00005fc2 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
    5fc2:	b538      	push	{r3, r4, r5, lr}
    5fc4:	460d      	mov	r5, r1
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    5fc6:	2102      	movs	r1, #2
{
    5fc8:	4604      	mov	r4, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    5fca:	f7ff ff51 	bl	5e70 <ism330dhcx_mem_bank_set>

  if (ret == 0)
    5fce:	b998      	cbnz	r0, 5ff8 <ism330dhcx_fsm_enable_get+0x36>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
    5fd0:	2301      	movs	r3, #1
    5fd2:	462a      	mov	r2, r5
    5fd4:	2146      	movs	r1, #70	; 0x46
    5fd6:	4620      	mov	r0, r4
    5fd8:	f7ff feb6 	bl	5d48 <ism330dhcx_read_reg>
                              (uint8_t *)&val->fsm_enable_a, 1);
  }

  if (ret == 0)
    5fdc:	b960      	cbnz	r0, 5ff8 <ism330dhcx_fsm_enable_get+0x36>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
    5fde:	2301      	movs	r3, #1
    5fe0:	18ea      	adds	r2, r5, r3
    5fe2:	2147      	movs	r1, #71	; 0x47
    5fe4:	4620      	mov	r0, r4
    5fe6:	f7ff feaf 	bl	5d48 <ism330dhcx_read_reg>
                              (uint8_t *)&val->fsm_enable_b, 1);
  }

  if (ret == 0)
    5fea:	b928      	cbnz	r0, 5ff8 <ism330dhcx_fsm_enable_get+0x36>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    5fec:	4601      	mov	r1, r0
    5fee:	4620      	mov	r0, r4
  }

  return ret;
}
    5ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    5ff4:	f7ff bf3c 	b.w	5e70 <ism330dhcx_mem_bank_set>
}
    5ff8:	bd38      	pop	{r3, r4, r5, pc}

00005ffa <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
    5ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5ffc:	460c      	mov	r4, r1
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    5ffe:	2102      	movs	r1, #2
{
    6000:	4605      	mov	r5, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    6002:	f7ff ff35 	bl	5e70 <ism330dhcx_mem_bank_set>

  if (ret == 0)
    6006:	b950      	cbnz	r0, 601e <ism330dhcx_fsm_data_rate_get+0x24>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
    6008:	2301      	movs	r3, #1
    600a:	aa01      	add	r2, sp, #4
    600c:	215f      	movs	r1, #95	; 0x5f
    600e:	4628      	mov	r0, r5
    6010:	f7ff fe9a 	bl	5d48 <ism330dhcx_read_reg>
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
    6014:	b918      	cbnz	r0, 601e <ism330dhcx_fsm_data_rate_get+0x24>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    6016:	4601      	mov	r1, r0
    6018:	4628      	mov	r0, r5
    601a:	f7ff ff29 	bl	5e70 <ism330dhcx_mem_bank_set>
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
    601e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6022:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    6026:	2b02      	cmp	r3, #2
    6028:	d004      	beq.n	6034 <ism330dhcx_fsm_data_rate_get+0x3a>
    602a:	2b03      	cmp	r3, #3
    602c:	d002      	beq.n	6034 <ism330dhcx_fsm_data_rate_get+0x3a>
    602e:	1e5a      	subs	r2, r3, #1
    6030:	4253      	negs	r3, r2
    6032:	4153      	adcs	r3, r2
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
    6034:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
    6036:	b003      	add	sp, #12
    6038:	bd30      	pop	{r4, r5, pc}

0000603a <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
    603a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    603c:	460d      	mov	r5, r1
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    603e:	2102      	movs	r1, #2
{
    6040:	4604      	mov	r4, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    6042:	f7ff ff15 	bl	5e70 <ism330dhcx_mem_bank_set>

  if (ret == 0)
    6046:	b978      	cbnz	r0, 6068 <ism330dhcx_mlc_get+0x2e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
    6048:	2301      	movs	r3, #1
    604a:	aa01      	add	r2, sp, #4
    604c:	2105      	movs	r1, #5
    604e:	4620      	mov	r0, r4
    6050:	f7ff fe7a 	bl	5d48 <ism330dhcx_read_reg>
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
    6054:	b940      	cbnz	r0, 6068 <ism330dhcx_mlc_get+0x2e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    6056:	4601      	mov	r1, r0
    6058:	4620      	mov	r0, r4
    605a:	f7ff ff09 	bl	5e70 <ism330dhcx_mem_bank_set>
    *val  = reg.mlc_en;
    605e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6062:	f3c3 1300 	ubfx	r3, r3, #4, #1
    6066:	702b      	strb	r3, [r5, #0]
  }

  return ret;
}
    6068:	b003      	add	sp, #12
    606a:	bd30      	pop	{r4, r5, pc}

0000606c <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
    606c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    606e:	460d      	mov	r5, r1
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    6070:	2102      	movs	r1, #2
{
    6072:	4604      	mov	r4, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
    6074:	f7ff fefc 	bl	5e70 <ism330dhcx_mem_bank_set>

  if (ret == 0)
    6078:	b9b0      	cbnz	r0, 60a8 <ism330dhcx_mlc_data_rate_get+0x3c>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
    607a:	2301      	movs	r3, #1
    607c:	aa01      	add	r2, sp, #4
    607e:	2160      	movs	r1, #96	; 0x60
    6080:	4620      	mov	r0, r4
    6082:	f7ff fe61 	bl	5d48 <ism330dhcx_read_reg>
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
    6086:	b978      	cbnz	r0, 60a8 <ism330dhcx_mlc_data_rate_get+0x3c>
  {
    switch (reg.mlc_odr)
    6088:	f89d 3004 	ldrb.w	r3, [sp, #4]
    608c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    6090:	2b02      	cmp	r3, #2
    6092:	d004      	beq.n	609e <ism330dhcx_mlc_data_rate_get+0x32>
    6094:	2b03      	cmp	r3, #3
    6096:	d002      	beq.n	609e <ism330dhcx_mlc_data_rate_get+0x32>
    6098:	1e5a      	subs	r2, r3, #1
    609a:	4253      	negs	r3, r2
    609c:	4153      	adcs	r3, r2
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
    609e:	702b      	strb	r3, [r5, #0]
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
        break;
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    60a0:	2100      	movs	r1, #0
    60a2:	4620      	mov	r0, r4
    60a4:	f7ff fee4 	bl	5e70 <ism330dhcx_mem_bank_set>
  }

  return ret;
}
    60a8:	b003      	add	sp, #12
    60aa:	bd30      	pop	{r4, r5, pc}

000060ac <ism330dhcx_xl_data_rate_set>:
{
    60ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    60ae:	460d      	mov	r5, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
    60b0:	a901      	add	r1, sp, #4
{
    60b2:	4604      	mov	r4, r0
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
    60b4:	f7ff ff85 	bl	5fc2 <ism330dhcx_fsm_enable_get>
  if (ret == 0)
    60b8:	2800      	cmp	r0, #0
    60ba:	f040 8094 	bne.w	61e6 <ism330dhcx_xl_data_rate_set+0x13a>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    60be:	f89d 2004 	ldrb.w	r2, [sp, #4]
         fsm_enable.fsm_enable_a.fsm2_en  |
    60c2:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    60c6:	f3c2 0300 	ubfx	r3, r2, #0, #1
    60ca:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
    60cc:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
    60d0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
    60d2:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
    60d6:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
    60d8:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
    60dc:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
    60de:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
    60e2:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
    60e4:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
    60e8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
    60ea:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
    60ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
    60f2:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
    60f6:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    60f8:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
    60fc:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    60fe:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
    6102:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    6104:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
    6108:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    610a:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
    610e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    6110:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
    6114:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    6116:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
    611a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    611c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    6120:	07db      	lsls	r3, r3, #31
    6122:	d41b      	bmi.n	615c <ism330dhcx_xl_data_rate_set+0xb0>
  ism330dhcx_odr_xl_t odr_xl =  val;
    6124:	462e      	mov	r6, r5
  mlc_enable = PROPERTY_DISABLE;
    6126:	2300      	movs	r3, #0
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
    6128:	f10d 0102 	add.w	r1, sp, #2
    612c:	4620      	mov	r0, r4
  mlc_enable = PROPERTY_DISABLE;
    612e:	f88d 3002 	strb.w	r3, [sp, #2]
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
    6132:	f7ff ff82 	bl	603a <ism330dhcx_mlc_get>
    if (mlc_enable == PROPERTY_ENABLE)
    6136:	f89d 3002 	ldrb.w	r3, [sp, #2]
    613a:	2b01      	cmp	r3, #1
    613c:	d13f      	bne.n	61be <ism330dhcx_xl_data_rate_set+0x112>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
    613e:	f10d 0103 	add.w	r1, sp, #3
    6142:	4620      	mov	r0, r4
    6144:	f7ff ff92 	bl	606c <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
    6148:	2800      	cmp	r0, #0
    614a:	d14c      	bne.n	61e6 <ism330dhcx_xl_data_rate_set+0x13a>
        switch (mlc_odr)
    614c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6150:	2b03      	cmp	r3, #3
    6152:	d826      	bhi.n	61a2 <ism330dhcx_xl_data_rate_set+0xf6>
    6154:	e8df f003 	tbb	[pc, r3]
    6158:	2f2b2722 	.word	0x2f2b2722
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
    615c:	f10d 0101 	add.w	r1, sp, #1
    6160:	4620      	mov	r0, r4
    6162:	f7ff ff4a 	bl	5ffa <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
    6166:	2800      	cmp	r0, #0
    6168:	d13d      	bne.n	61e6 <ism330dhcx_xl_data_rate_set+0x13a>
        switch (fsm_odr)
    616a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    616e:	2b03      	cmp	r3, #3
    6170:	d8d8      	bhi.n	6124 <ism330dhcx_xl_data_rate_set+0x78>
    6172:	e8df f003 	tbb	[pc, r3]
    6176:	0702      	.short	0x0702
    6178:	0f0b      	.short	0x0f0b
            if (val == ISM330DHCX_XL_ODR_OFF)
    617a:	2d01      	cmp	r5, #1
    617c:	462e      	mov	r6, r5
    617e:	bf38      	it	cc
    6180:	2601      	movcc	r6, #1
  if (ret == 0)
    6182:	e7d0      	b.n	6126 <ism330dhcx_xl_data_rate_set+0x7a>
            if (val == ISM330DHCX_XL_ODR_OFF)
    6184:	2d01      	cmp	r5, #1
    6186:	d8cd      	bhi.n	6124 <ism330dhcx_xl_data_rate_set+0x78>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
    6188:	2602      	movs	r6, #2
    618a:	e7cc      	b.n	6126 <ism330dhcx_xl_data_rate_set+0x7a>
            if (val == ISM330DHCX_XL_ODR_OFF)
    618c:	2d02      	cmp	r5, #2
    618e:	d8c9      	bhi.n	6124 <ism330dhcx_xl_data_rate_set+0x78>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
    6190:	2603      	movs	r6, #3
    6192:	e7c8      	b.n	6126 <ism330dhcx_xl_data_rate_set+0x7a>
            if (val == ISM330DHCX_XL_ODR_OFF)
    6194:	2d03      	cmp	r5, #3
    6196:	d8c5      	bhi.n	6124 <ism330dhcx_xl_data_rate_set+0x78>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
    6198:	2604      	movs	r6, #4
    619a:	e7c4      	b.n	6126 <ism330dhcx_xl_data_rate_set+0x7a>
            if (val == ISM330DHCX_XL_ODR_OFF)
    619c:	2d01      	cmp	r5, #1
    619e:	bf38      	it	cc
    61a0:	2501      	movcc	r5, #1
        switch (mlc_odr)
    61a2:	462e      	mov	r6, r5
    61a4:	e00c      	b.n	61c0 <ism330dhcx_xl_data_rate_set+0x114>
            if (val == ISM330DHCX_XL_ODR_OFF)
    61a6:	2d02      	cmp	r5, #2
    61a8:	bf38      	it	cc
    61aa:	2502      	movcc	r5, #2
    61ac:	e7f9      	b.n	61a2 <ism330dhcx_xl_data_rate_set+0xf6>
            if (val == ISM330DHCX_XL_ODR_OFF)
    61ae:	2d03      	cmp	r5, #3
    61b0:	bf38      	it	cc
    61b2:	2503      	movcc	r5, #3
    61b4:	e7f5      	b.n	61a2 <ism330dhcx_xl_data_rate_set+0xf6>
            if (val == ISM330DHCX_XL_ODR_OFF)
    61b6:	2d04      	cmp	r5, #4
    61b8:	bf38      	it	cc
    61ba:	2504      	movcc	r5, #4
    61bc:	e7f1      	b.n	61a2 <ism330dhcx_xl_data_rate_set+0xf6>
  if (ret == 0)
    61be:	b990      	cbnz	r0, 61e6 <ism330dhcx_xl_data_rate_set+0x13a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
    61c0:	2301      	movs	r3, #1
    61c2:	466a      	mov	r2, sp
    61c4:	2110      	movs	r1, #16
    61c6:	4620      	mov	r0, r4
    61c8:	f7ff fdbe 	bl	5d48 <ism330dhcx_read_reg>
  if (ret == 0)
    61cc:	b958      	cbnz	r0, 61e6 <ism330dhcx_xl_data_rate_set+0x13a>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
    61ce:	f89d 3000 	ldrb.w	r3, [sp]
    61d2:	f366 1307 	bfi	r3, r6, #4, #4
    61d6:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
    61da:	466a      	mov	r2, sp
    61dc:	2301      	movs	r3, #1
    61de:	2110      	movs	r1, #16
    61e0:	4620      	mov	r0, r4
    61e2:	f7ff fdb7 	bl	5d54 <ism330dhcx_write_reg>
}
    61e6:	b002      	add	sp, #8
    61e8:	bd70      	pop	{r4, r5, r6, pc}

000061ea <ism330dhcx_gy_data_rate_set>:
{
    61ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    61ec:	460d      	mov	r5, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
    61ee:	a901      	add	r1, sp, #4
{
    61f0:	4604      	mov	r4, r0
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
    61f2:	f7ff fee6 	bl	5fc2 <ism330dhcx_fsm_enable_get>
  if (ret == 0)
    61f6:	2800      	cmp	r0, #0
    61f8:	f040 8094 	bne.w	6324 <ism330dhcx_gy_data_rate_set+0x13a>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    61fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
         fsm_enable.fsm_enable_a.fsm2_en  |
    6200:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    6204:	f3c2 0300 	ubfx	r3, r2, #0, #1
    6208:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
    620a:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
    620e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
    6210:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
    6214:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
    6216:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
    621a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
    621c:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
    6220:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
    6222:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
    6226:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
    6228:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
    622c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6230:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
    6234:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    6236:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
    623a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    623c:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
    6240:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    6242:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
    6246:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    6248:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
    624c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    624e:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
    6252:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    6254:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
    6258:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    625a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    625e:	07db      	lsls	r3, r3, #31
    6260:	d41b      	bmi.n	629a <ism330dhcx_gy_data_rate_set+0xb0>
  ism330dhcx_odr_g_t odr_gy =  val;
    6262:	462e      	mov	r6, r5
  mlc_enable = PROPERTY_DISABLE;
    6264:	2300      	movs	r3, #0
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
    6266:	f10d 0102 	add.w	r1, sp, #2
    626a:	4620      	mov	r0, r4
  mlc_enable = PROPERTY_DISABLE;
    626c:	f88d 3002 	strb.w	r3, [sp, #2]
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
    6270:	f7ff fee3 	bl	603a <ism330dhcx_mlc_get>
    if (mlc_enable == PROPERTY_ENABLE)
    6274:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6278:	2b01      	cmp	r3, #1
    627a:	d13f      	bne.n	62fc <ism330dhcx_gy_data_rate_set+0x112>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
    627c:	f10d 0103 	add.w	r1, sp, #3
    6280:	4620      	mov	r0, r4
    6282:	f7ff fef3 	bl	606c <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
    6286:	2800      	cmp	r0, #0
    6288:	d14c      	bne.n	6324 <ism330dhcx_gy_data_rate_set+0x13a>
        switch (mlc_odr)
    628a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    628e:	2b03      	cmp	r3, #3
    6290:	d826      	bhi.n	62e0 <ism330dhcx_gy_data_rate_set+0xf6>
    6292:	e8df f003 	tbb	[pc, r3]
    6296:	2722      	.short	0x2722
    6298:	2f2b      	.short	0x2f2b
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
    629a:	f10d 0101 	add.w	r1, sp, #1
    629e:	4620      	mov	r0, r4
    62a0:	f7ff feab 	bl	5ffa <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
    62a4:	2800      	cmp	r0, #0
    62a6:	d13d      	bne.n	6324 <ism330dhcx_gy_data_rate_set+0x13a>
        switch (fsm_odr)
    62a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    62ac:	2b03      	cmp	r3, #3
    62ae:	d8d8      	bhi.n	6262 <ism330dhcx_gy_data_rate_set+0x78>
    62b0:	e8df f003 	tbb	[pc, r3]
    62b4:	0f0b0702 	.word	0x0f0b0702
            if (val == ISM330DHCX_GY_ODR_OFF)
    62b8:	2d01      	cmp	r5, #1
    62ba:	462e      	mov	r6, r5
    62bc:	bf38      	it	cc
    62be:	2601      	movcc	r6, #1
  if (ret == 0)
    62c0:	e7d0      	b.n	6264 <ism330dhcx_gy_data_rate_set+0x7a>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62c2:	2d01      	cmp	r5, #1
    62c4:	d8cd      	bhi.n	6262 <ism330dhcx_gy_data_rate_set+0x78>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
    62c6:	2602      	movs	r6, #2
    62c8:	e7cc      	b.n	6264 <ism330dhcx_gy_data_rate_set+0x7a>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62ca:	2d02      	cmp	r5, #2
    62cc:	d8c9      	bhi.n	6262 <ism330dhcx_gy_data_rate_set+0x78>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
    62ce:	2603      	movs	r6, #3
    62d0:	e7c8      	b.n	6264 <ism330dhcx_gy_data_rate_set+0x7a>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62d2:	2d03      	cmp	r5, #3
    62d4:	d8c5      	bhi.n	6262 <ism330dhcx_gy_data_rate_set+0x78>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
    62d6:	2604      	movs	r6, #4
    62d8:	e7c4      	b.n	6264 <ism330dhcx_gy_data_rate_set+0x7a>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62da:	2d01      	cmp	r5, #1
    62dc:	bf38      	it	cc
    62de:	2501      	movcc	r5, #1
        switch (mlc_odr)
    62e0:	462e      	mov	r6, r5
    62e2:	e00c      	b.n	62fe <ism330dhcx_gy_data_rate_set+0x114>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62e4:	2d02      	cmp	r5, #2
    62e6:	bf38      	it	cc
    62e8:	2502      	movcc	r5, #2
    62ea:	e7f9      	b.n	62e0 <ism330dhcx_gy_data_rate_set+0xf6>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62ec:	2d03      	cmp	r5, #3
    62ee:	bf38      	it	cc
    62f0:	2503      	movcc	r5, #3
    62f2:	e7f5      	b.n	62e0 <ism330dhcx_gy_data_rate_set+0xf6>
            if (val == ISM330DHCX_GY_ODR_OFF)
    62f4:	2d04      	cmp	r5, #4
    62f6:	bf38      	it	cc
    62f8:	2504      	movcc	r5, #4
    62fa:	e7f1      	b.n	62e0 <ism330dhcx_gy_data_rate_set+0xf6>
  if (ret == 0)
    62fc:	b990      	cbnz	r0, 6324 <ism330dhcx_gy_data_rate_set+0x13a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
    62fe:	2301      	movs	r3, #1
    6300:	466a      	mov	r2, sp
    6302:	2111      	movs	r1, #17
    6304:	4620      	mov	r0, r4
    6306:	f7ff fd1f 	bl	5d48 <ism330dhcx_read_reg>
  if (ret == 0)
    630a:	b958      	cbnz	r0, 6324 <ism330dhcx_gy_data_rate_set+0x13a>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
    630c:	f89d 3000 	ldrb.w	r3, [sp]
    6310:	f366 1307 	bfi	r3, r6, #4, #4
    6314:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
    6318:	466a      	mov	r2, sp
    631a:	2301      	movs	r3, #1
    631c:	2111      	movs	r1, #17
    631e:	4620      	mov	r0, r4
    6320:	f7ff fd18 	bl	5d54 <ism330dhcx_write_reg>
}
    6324:	b002      	add	sp, #8
    6326:	bd70      	pop	{r4, r5, r6, pc}

00006328 <arch_printk_char_out>:
}
    6328:	2000      	movs	r0, #0
    632a:	4770      	bx	lr

0000632c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    632c:	b40f      	push	{r0, r1, r2, r3}
    632e:	b507      	push	{r0, r1, r2, lr}
    6330:	a904      	add	r1, sp, #16
    6332:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6336:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6338:	f7fa fd6c 	bl	e14 <vprintk>

	va_end(ap);
}
    633c:	b003      	add	sp, #12
    633e:	f85d eb04 	ldr.w	lr, [sp], #4
    6342:	b004      	add	sp, #16
    6344:	4770      	bx	lr

00006346 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6346:	4604      	mov	r4, r0
    6348:	b508      	push	{r3, lr}
    634a:	4608      	mov	r0, r1
    634c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    634e:	461a      	mov	r2, r3
    6350:	47a0      	blx	r4
	return z_impl_z_current_get();
    6352:	f7ff f947 	bl	55e4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6356:	f7fc f9dd 	bl	2714 <z_impl_k_thread_abort>

0000635a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    635a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    635c:	f013 0307 	ands.w	r3, r3, #7
    6360:	d105      	bne.n	636e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6362:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6364:	2b00      	cmp	r3, #0
    6366:	bf0c      	ite	eq
    6368:	2000      	moveq	r0, #0
    636a:	2003      	movne	r0, #3
    636c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    636e:	2b02      	cmp	r3, #2
    6370:	d105      	bne.n	637e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6372:	8b40      	ldrh	r0, [r0, #26]
    6374:	fab0 f080 	clz	r0, r0
    6378:	0940      	lsrs	r0, r0, #5
    637a:	0080      	lsls	r0, r0, #2
    637c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    637e:	2b01      	cmp	r3, #1
    6380:	d105      	bne.n	638e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6382:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6384:	2b00      	cmp	r3, #0
    6386:	bf0c      	ite	eq
    6388:	2000      	moveq	r0, #0
    638a:	2005      	movne	r0, #5
    638c:	4770      	bx	lr
	int evt = EVT_NOP;
    638e:	2000      	movs	r0, #0
}
    6390:	4770      	bx	lr

00006392 <validate_args>:
{
    6392:	b510      	push	{r4, lr}
    6394:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6396:	b100      	cbz	r0, 639a <validate_args+0x8>
    6398:	b911      	cbnz	r1, 63a0 <validate_args+0xe>
		return -EINVAL;
    639a:	f06f 0015 	mvn.w	r0, #21
}
    639e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    63a0:	1d08      	adds	r0, r1, #4
    63a2:	f000 f895 	bl	64d0 <sys_notify_validate>
	if ((rv == 0)
    63a6:	2800      	cmp	r0, #0
    63a8:	d1f9      	bne.n	639e <validate_args+0xc>
	    && ((cli->notify.flags
    63aa:	68a3      	ldr	r3, [r4, #8]
    63ac:	2b03      	cmp	r3, #3
    63ae:	d9f6      	bls.n	639e <validate_args+0xc>
    63b0:	e7f3      	b.n	639a <validate_args+0x8>

000063b2 <notify_one>:
{
    63b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63b6:	460d      	mov	r5, r1
    63b8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    63ba:	4619      	mov	r1, r3
    63bc:	1d28      	adds	r0, r5, #4
{
    63be:	4690      	mov	r8, r2
    63c0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    63c2:	f000 f896 	bl	64f2 <sys_notify_finalize>
	if (cb) {
    63c6:	4604      	mov	r4, r0
    63c8:	b138      	cbz	r0, 63da <notify_one+0x28>
		cb(mgr, cli, state, res);
    63ca:	4633      	mov	r3, r6
    63cc:	4642      	mov	r2, r8
    63ce:	4629      	mov	r1, r5
    63d0:	4638      	mov	r0, r7
    63d2:	46a4      	mov	ip, r4
}
    63d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    63d8:	4760      	bx	ip
}
    63da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000063de <transition_complete>:
{
    63de:	b410      	push	{r4}
	__asm__ volatile(
    63e0:	f04f 0420 	mov.w	r4, #32
    63e4:	f3ef 8211 	mrs	r2, BASEPRI
    63e8:	f384 8812 	msr	BASEPRI_MAX, r4
    63ec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    63f0:	6141      	str	r1, [r0, #20]
}
    63f2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    63f4:	2101      	movs	r1, #1
    63f6:	f7fa bd1b 	b.w	e30 <process_event>

000063fa <onoff_manager_init>:
{
    63fa:	b538      	push	{r3, r4, r5, lr}
    63fc:	460c      	mov	r4, r1
	if ((mgr == NULL)
    63fe:	4605      	mov	r5, r0
    6400:	b158      	cbz	r0, 641a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6402:	b151      	cbz	r1, 641a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6404:	680b      	ldr	r3, [r1, #0]
    6406:	b143      	cbz	r3, 641a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6408:	684b      	ldr	r3, [r1, #4]
    640a:	b133      	cbz	r3, 641a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    640c:	221c      	movs	r2, #28
    640e:	2100      	movs	r1, #0
    6410:	f000 f943 	bl	669a <memset>
    6414:	612c      	str	r4, [r5, #16]
	return 0;
    6416:	2000      	movs	r0, #0
}
    6418:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    641a:	f06f 0015 	mvn.w	r0, #21
    641e:	e7fb      	b.n	6418 <onoff_manager_init+0x1e>

00006420 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6420:	b570      	push	{r4, r5, r6, lr}
    6422:	4605      	mov	r5, r0
    6424:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6426:	f7ff ffb4 	bl	6392 <validate_args>

	if (rv < 0) {
    642a:	1e04      	subs	r4, r0, #0
    642c:	db15      	blt.n	645a <onoff_request+0x3a>
    642e:	f04f 0320 	mov.w	r3, #32
    6432:	f3ef 8211 	mrs	r2, BASEPRI
    6436:	f383 8812 	msr	BASEPRI_MAX, r3
    643a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    643e:	8b6b      	ldrh	r3, [r5, #26]
    6440:	8b2c      	ldrh	r4, [r5, #24]
    6442:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6446:	428b      	cmp	r3, r1
    6448:	f004 0407 	and.w	r4, r4, #7
    644c:	d107      	bne.n	645e <onoff_request+0x3e>
	__asm__ volatile(
    644e:	f382 8811 	msr	BASEPRI, r2
    6452:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    6456:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    645a:	4620      	mov	r0, r4
    645c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    645e:	2c02      	cmp	r4, #2
    6460:	d10c      	bne.n	647c <onoff_request+0x5c>
		mgr->refs += 1U;
    6462:	3301      	adds	r3, #1
    6464:	836b      	strh	r3, [r5, #26]
    6466:	f382 8811 	msr	BASEPRI, r2
    646a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    646e:	2300      	movs	r3, #0
    6470:	4622      	mov	r2, r4
    6472:	4631      	mov	r1, r6
    6474:	4628      	mov	r0, r5
    6476:	f7ff ff9c 	bl	63b2 <notify_one>
    647a:	e7ee      	b.n	645a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    647c:	2c06      	cmp	r4, #6
    647e:	d814      	bhi.n	64aa <onoff_request+0x8a>
    6480:	e8df f004 	tbb	[pc, r4]
    6484:	13131304 	.word	0x13131304
    6488:	1a04      	.short	0x1a04
    648a:	04          	.byte	0x04
    648b:	00          	.byte	0x00
	parent->next = child;
    648c:	2300      	movs	r3, #0
    648e:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6490:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6492:	b93b      	cbnz	r3, 64a4 <onoff_request+0x84>
	list->head = node;
    6494:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    6498:	b9ac      	cbnz	r4, 64c6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    649a:	2102      	movs	r1, #2
    649c:	4628      	mov	r0, r5
    649e:	f7fa fcc7 	bl	e30 <process_event>
    64a2:	e7da      	b.n	645a <onoff_request+0x3a>
	parent->next = child;
    64a4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    64a6:	606e      	str	r6, [r5, #4]
}
    64a8:	e7f6      	b.n	6498 <onoff_request+0x78>
    64aa:	f382 8811 	msr	BASEPRI, r2
    64ae:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    64b2:	f06f 0404 	mvn.w	r4, #4
    64b6:	e7d0      	b.n	645a <onoff_request+0x3a>
    64b8:	f382 8811 	msr	BASEPRI, r2
    64bc:	f3bf 8f6f 	isb	sy
    64c0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    64c4:	e7c9      	b.n	645a <onoff_request+0x3a>
    64c6:	f382 8811 	msr	BASEPRI, r2
    64ca:	f3bf 8f6f 	isb	sy
		if (notify) {
    64ce:	e7c4      	b.n	645a <onoff_request+0x3a>

000064d0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    64d0:	4603      	mov	r3, r0
    64d2:	b158      	cbz	r0, 64ec <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    64d4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    64d6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    64da:	2a01      	cmp	r2, #1
    64dc:	d003      	beq.n	64e6 <sys_notify_validate+0x16>
    64de:	2a03      	cmp	r2, #3
    64e0:	d104      	bne.n	64ec <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    64e2:	6802      	ldr	r2, [r0, #0]
    64e4:	b112      	cbz	r2, 64ec <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    64e6:	2000      	movs	r0, #0
    64e8:	6098      	str	r0, [r3, #8]
    64ea:	4770      	bx	lr
    64ec:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    64f0:	4770      	bx	lr

000064f2 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    64f2:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    64f4:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    64f6:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    64fa:	2a03      	cmp	r2, #3
    64fc:	f04f 0200 	mov.w	r2, #0
{
    6500:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6502:	bf0c      	ite	eq
    6504:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6506:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6508:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    650a:	4770      	bx	lr

0000650c <_ldiv5>:
	uint32_t v_lo = *v;
    650c:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    6510:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    6512:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    6516:	fba2 2403 	umull	r2, r4, r2, r3
    651a:	18d5      	adds	r5, r2, r3
    651c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    6520:	fba1 1303 	umull	r1, r3, r1, r3
    6524:	1852      	adds	r2, r2, r1
    6526:	eb44 0403 	adc.w	r4, r4, r3
    652a:	1952      	adds	r2, r2, r5
    652c:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    6530:	1889      	adds	r1, r1, r2
    6532:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    6536:	e9c0 1300 	strd	r1, r3, [r0]
}
    653a:	bd30      	pop	{r4, r5, pc}

0000653c <_get_digit>:
{
    653c:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    653e:	680a      	ldr	r2, [r1, #0]
    6540:	2a00      	cmp	r2, #0
{
    6542:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    6544:	dd0f      	ble.n	6566 <_get_digit+0x2a>
		--*digit_count;
    6546:	3a01      	subs	r2, #1
    6548:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    654a:	681a      	ldr	r2, [r3, #0]
    654c:	6844      	ldr	r4, [r0, #4]
    654e:	200a      	movs	r0, #10
    6550:	fba2 1200 	umull	r1, r2, r2, r0
    6554:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    6558:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    655a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    655e:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    6562:	3030      	adds	r0, #48	; 0x30
}
    6564:	bd10      	pop	{r4, pc}
		rval = '0';
    6566:	2030      	movs	r0, #48	; 0x30
    6568:	e7fc      	b.n	6564 <_get_digit+0x28>

0000656a <encode_uint>:
{
    656a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    656e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6570:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6572:	2b6f      	cmp	r3, #111	; 0x6f
{
    6574:	4680      	mov	r8, r0
    6576:	460f      	mov	r7, r1
    6578:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    657a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    657e:	d029      	beq.n	65d4 <encode_uint+0x6a>
    6580:	d824      	bhi.n	65cc <encode_uint+0x62>
		return 10;
    6582:	2b58      	cmp	r3, #88	; 0x58
    6584:	bf0c      	ite	eq
    6586:	2610      	moveq	r6, #16
    6588:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    658a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    658e:	4632      	mov	r2, r6
    6590:	2300      	movs	r3, #0
    6592:	4640      	mov	r0, r8
    6594:	4639      	mov	r1, r7
    6596:	f7fa f9cd 	bl	934 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    659a:	2a09      	cmp	r2, #9
    659c:	b2d4      	uxtb	r4, r2
    659e:	d81e      	bhi.n	65de <encode_uint+0x74>
    65a0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    65a2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    65a4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    65a6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    65aa:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    65ae:	d301      	bcc.n	65b4 <encode_uint+0x4a>
    65b0:	45d1      	cmp	r9, sl
    65b2:	d811      	bhi.n	65d8 <encode_uint+0x6e>
	if (conv->flag_hash) {
    65b4:	782b      	ldrb	r3, [r5, #0]
    65b6:	069b      	lsls	r3, r3, #26
    65b8:	d505      	bpl.n	65c6 <encode_uint+0x5c>
		if (radix == 8) {
    65ba:	2e08      	cmp	r6, #8
    65bc:	d115      	bne.n	65ea <encode_uint+0x80>
			conv->altform_0 = true;
    65be:	78ab      	ldrb	r3, [r5, #2]
    65c0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    65c4:	70ab      	strb	r3, [r5, #2]
}
    65c6:	4648      	mov	r0, r9
    65c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    65cc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    65d0:	2b70      	cmp	r3, #112	; 0x70
    65d2:	e7d7      	b.n	6584 <encode_uint+0x1a>
	switch (specifier) {
    65d4:	2608      	movs	r6, #8
    65d6:	e7d8      	b.n	658a <encode_uint+0x20>
		value /= radix;
    65d8:	4680      	mov	r8, r0
    65da:	460f      	mov	r7, r1
    65dc:	e7d7      	b.n	658e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    65de:	f1bb 0f19 	cmp.w	fp, #25
    65e2:	bf94      	ite	ls
    65e4:	3437      	addls	r4, #55	; 0x37
    65e6:	3457      	addhi	r4, #87	; 0x57
    65e8:	e7db      	b.n	65a2 <encode_uint+0x38>
		} else if (radix == 16) {
    65ea:	2e10      	cmp	r6, #16
    65ec:	d1eb      	bne.n	65c6 <encode_uint+0x5c>
			conv->altform_0c = true;
    65ee:	78ab      	ldrb	r3, [r5, #2]
    65f0:	f043 0310 	orr.w	r3, r3, #16
    65f4:	e7e6      	b.n	65c4 <encode_uint+0x5a>

000065f6 <outs>:
{
    65f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65fa:	4607      	mov	r7, r0
    65fc:	4688      	mov	r8, r1
    65fe:	4615      	mov	r5, r2
    6600:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6602:	4614      	mov	r4, r2
    6604:	42b4      	cmp	r4, r6
    6606:	d305      	bcc.n	6614 <outs+0x1e>
    6608:	b10e      	cbz	r6, 660e <outs+0x18>
	return (int)count;
    660a:	1b60      	subs	r0, r4, r5
    660c:	e008      	b.n	6620 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    660e:	7823      	ldrb	r3, [r4, #0]
    6610:	2b00      	cmp	r3, #0
    6612:	d0fa      	beq.n	660a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6614:	f814 0b01 	ldrb.w	r0, [r4], #1
    6618:	4641      	mov	r1, r8
    661a:	47b8      	blx	r7
		if (rc < 0) {
    661c:	2800      	cmp	r0, #0
    661e:	daf1      	bge.n	6604 <outs+0xe>
}
    6620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006624 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6624:	4770      	bx	lr

00006626 <abort_function>:
{
    6626:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6628:	2000      	movs	r0, #0
    662a:	f7fb fb7b 	bl	1d24 <sys_reboot>

0000662e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    662e:	f000 bb6a 	b.w	6d06 <z_fatal_error>

00006632 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6632:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6634:	6800      	ldr	r0, [r0, #0]
    6636:	f000 bb66 	b.w	6d06 <z_fatal_error>

0000663a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    663a:	2100      	movs	r1, #0
    663c:	2001      	movs	r0, #1
    663e:	f7ff bff6 	b.w	662e <z_arm_fatal_error>

00006642 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6642:	b508      	push	{r3, lr}
	handler();
    6644:	f7fb fdfc 	bl	2240 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    664c:	f7fb bed4 	b.w	23f8 <z_arm_exc_exit>

00006650 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6650:	3901      	subs	r1, #1
    6652:	4603      	mov	r3, r0
    6654:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6658:	b90a      	cbnz	r2, 665e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    665a:	701a      	strb	r2, [r3, #0]

	return dest;
}
    665c:	4770      	bx	lr
		*d = *s;
    665e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6662:	e7f7      	b.n	6654 <strcpy+0x4>

00006664 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6664:	4603      	mov	r3, r0
	size_t n = 0;
    6666:	2000      	movs	r0, #0

	while (*s != '\0') {
    6668:	5c1a      	ldrb	r2, [r3, r0]
    666a:	b902      	cbnz	r2, 666e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    666c:	4770      	bx	lr
		n++;
    666e:	3001      	adds	r0, #1
    6670:	e7fa      	b.n	6668 <strlen+0x4>

00006672 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6672:	4603      	mov	r3, r0
	size_t n = 0;
    6674:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6676:	5c1a      	ldrb	r2, [r3, r0]
    6678:	b10a      	cbz	r2, 667e <strnlen+0xc>
    667a:	4288      	cmp	r0, r1
    667c:	d100      	bne.n	6680 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    667e:	4770      	bx	lr
		n++;
    6680:	3001      	adds	r0, #1
    6682:	e7f8      	b.n	6676 <strnlen+0x4>

00006684 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6684:	b510      	push	{r4, lr}
    6686:	1e43      	subs	r3, r0, #1
    6688:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    668a:	4291      	cmp	r1, r2
    668c:	d100      	bne.n	6690 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    668e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6690:	f811 4b01 	ldrb.w	r4, [r1], #1
    6694:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6698:	e7f7      	b.n	668a <memcpy+0x6>

0000669a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    669a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    669c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    669e:	4603      	mov	r3, r0
	while (n > 0) {
    66a0:	4293      	cmp	r3, r2
    66a2:	d100      	bne.n	66a6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    66a4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    66a6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    66aa:	e7f9      	b.n	66a0 <memset+0x6>

000066ac <_stdout_hook_default>:
}
    66ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    66b0:	4770      	bx	lr

000066b2 <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    66b2:	f7fc b913 	b.w	28dc <z_impl_zephyr_fputc>

000066b6 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    66b6:	2806      	cmp	r0, #6
    66b8:	d108      	bne.n	66cc <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    66ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66be:	2201      	movs	r2, #1
    66c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    66c4:	f3bf 8f4f 	dsb	sy
        __WFE();
    66c8:	bf20      	wfe
    while (true)
    66ca:	e7fd      	b.n	66c8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    66cc:	4770      	bx	lr

000066ce <pm_state_exit_post_ops>:
    66ce:	2300      	movs	r3, #0
    66d0:	f383 8811 	msr	BASEPRI, r3
    66d4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    66d8:	4770      	bx	lr

000066da <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    66da:	6903      	ldr	r3, [r0, #16]
    66dc:	b2c9      	uxtb	r1, r1
    66de:	220c      	movs	r2, #12
    66e0:	fb01 3302 	mla	r3, r1, r2, r3
    66e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    66e6:	f000 0007 	and.w	r0, r0, #7
    66ea:	4770      	bx	lr

000066ec <set_on_state>:
	__asm__ volatile(
    66ec:	f04f 0320 	mov.w	r3, #32
    66f0:	f3ef 8211 	mrs	r2, BASEPRI
    66f4:	f383 8812 	msr	BASEPRI_MAX, r3
    66f8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    66fc:	6803      	ldr	r3, [r0, #0]
    66fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6702:	f043 0302 	orr.w	r3, r3, #2
    6706:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6708:	f382 8811 	msr	BASEPRI, r2
    670c:	f3bf 8f6f 	isb	sy
}
    6710:	4770      	bx	lr

00006712 <stop>:
{
    6712:	b570      	push	{r4, r5, r6, lr}
    6714:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    6716:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    6718:	f04f 0420 	mov.w	r4, #32
    671c:	f3ef 8511 	mrs	r5, BASEPRI
    6720:	f384 8812 	msr	BASEPRI_MAX, r4
    6724:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6728:	260c      	movs	r6, #12
    672a:	fb06 3401 	mla	r4, r6, r1, r3
    672e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6730:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6734:	d008      	beq.n	6748 <stop+0x36>
    6736:	42a2      	cmp	r2, r4
    6738:	d006      	beq.n	6748 <stop+0x36>
	__asm__ volatile(
    673a:	f385 8811 	msr	BASEPRI, r5
    673e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    6742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6746:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6748:	fb06 3301 	mla	r3, r6, r1, r3
    674c:	2201      	movs	r2, #1
    674e:	641a      	str	r2, [r3, #64]	; 0x40
    6750:	f385 8811 	msr	BASEPRI, r5
    6754:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    6758:	6843      	ldr	r3, [r0, #4]
    675a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    675e:	685b      	ldr	r3, [r3, #4]
    6760:	4798      	blx	r3
	return 0;
    6762:	2000      	movs	r0, #0
    6764:	e7ef      	b.n	6746 <stop+0x34>

00006766 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6766:	2280      	movs	r2, #128	; 0x80
    6768:	f7ff bfd3 	b.w	6712 <stop>

0000676c <async_start>:
{
    676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    676e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6770:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    6772:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6774:	f04f 0520 	mov.w	r5, #32
    6778:	f3ef 8611 	mrs	r6, BASEPRI
    677c:	f385 8812 	msr	BASEPRI_MAX, r5
    6780:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6784:	250c      	movs	r5, #12
    6786:	fb05 4401 	mla	r4, r5, r1, r4
    678a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    678c:	f005 0c07 	and.w	ip, r5, #7
    6790:	f1bc 0f01 	cmp.w	ip, #1
    6794:	d10c      	bne.n	67b0 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6796:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    6798:	f386 8811 	msr	BASEPRI, r6
    679c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    67a0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    67a4:	6843      	ldr	r3, [r0, #4]
    67a6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    67aa:	4798      	blx	r3
	return 0;
    67ac:	2000      	movs	r0, #0
}
    67ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    67b0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    67b4:	42af      	cmp	r7, r5
    67b6:	f386 8811 	msr	BASEPRI, r6
    67ba:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    67be:	bf0c      	ite	eq
    67c0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    67c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    67c8:	e7f1      	b.n	67ae <async_start+0x42>

000067ca <api_start>:
{
    67ca:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    67cc:	2480      	movs	r4, #128	; 0x80
    67ce:	9400      	str	r4, [sp, #0]
    67d0:	f7ff ffcc 	bl	676c <async_start>
}
    67d4:	b002      	add	sp, #8
    67d6:	bd10      	pop	{r4, pc}

000067d8 <onoff_started_callback>:
{
    67d8:	b410      	push	{r4}
	return &data->mgr[type];
    67da:	6900      	ldr	r0, [r0, #16]
    67dc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    67de:	241c      	movs	r4, #28
    67e0:	fb03 0004 	mla	r0, r3, r4, r0
    67e4:	2100      	movs	r1, #0
}
    67e6:	bc10      	pop	{r4}
	notify(mgr, 0);
    67e8:	4710      	bx	r2

000067ea <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    67ea:	2000      	movs	r0, #0
    67ec:	f000 b93d 	b.w	6a6a <nrfx_clock_start>

000067f0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    67f0:	2000      	movs	r0, #0
    67f2:	f000 b976 	b.w	6ae2 <nrfx_clock_stop>

000067f6 <blocking_start_callback>:
{
    67f6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    67f8:	f7fe bbca 	b.w	4f90 <z_impl_k_sem_give>

000067fc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67fc:	6843      	ldr	r3, [r0, #4]
    67fe:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6800:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6804:	600b      	str	r3, [r1, #0]
}
    6806:	2000      	movs	r0, #0
    6808:	4770      	bx	lr

0000680a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    680a:	6843      	ldr	r3, [r0, #4]
    680c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    680e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    6812:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    6816:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    681a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    681e:	2000      	movs	r0, #0
    6820:	4770      	bx	lr

00006822 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6822:	6843      	ldr	r3, [r0, #4]
    6824:	685b      	ldr	r3, [r3, #4]
}
    6826:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6828:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    682c:	4770      	bx	lr

0000682e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    682e:	6843      	ldr	r3, [r0, #4]
    6830:	685b      	ldr	r3, [r3, #4]
}
    6832:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6834:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6838:	4770      	bx	lr

0000683a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    683a:	6843      	ldr	r3, [r0, #4]
    683c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    683e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    6842:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6846:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    6848:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    684c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    6850:	2000      	movs	r0, #0
    6852:	4770      	bx	lr

00006854 <gpio_nrfx_manage_callback>:
{
    6854:	b510      	push	{r4, lr}
	return port->data;
    6856:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6858:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    685a:	b1f8      	cbz	r0, 689c <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    685c:	4288      	cmp	r0, r1
    685e:	d119      	bne.n	6894 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    6860:	689c      	ldr	r4, [r3, #8]
	return node->next;
    6862:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    6864:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6866:	42a1      	cmp	r1, r4
    6868:	d100      	bne.n	686c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    686a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    686c:	2000      	movs	r0, #0
    686e:	6008      	str	r0, [r1, #0]
	if (set) {
    6870:	b12a      	cbz	r2, 687e <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    6872:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6874:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6876:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    6878:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    687a:	b902      	cbnz	r2, 687e <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    687c:	6099      	str	r1, [r3, #8]
	return 0;
    687e:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6880:	e010      	b.n	68a4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6882:	4281      	cmp	r1, r0
    6884:	d106      	bne.n	6894 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    6886:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    6888:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    688a:	6898      	ldr	r0, [r3, #8]
    688c:	4281      	cmp	r1, r0
    688e:	d1ed      	bne.n	686c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6890:	609c      	str	r4, [r3, #8]
}
    6892:	e7eb      	b.n	686c <gpio_nrfx_manage_callback+0x18>
	return node->next;
    6894:	4604      	mov	r4, r0
    6896:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6898:	2800      	cmp	r0, #0
    689a:	d1f2      	bne.n	6882 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    689c:	2a00      	cmp	r2, #0
    689e:	d1e8      	bne.n	6872 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    68a0:	f06f 0015 	mvn.w	r0, #21
}
    68a4:	bd10      	pop	{r4, pc}

000068a6 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    68a6:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    68a8:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    68aa:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    68ac:	d405      	bmi.n	68ba <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    68ae:	f3c1 0242 	ubfx	r2, r1, #1, #3
    68b2:	2a01      	cmp	r2, #1
    68b4:	d004      	beq.n	68c0 <i2c_nrfx_twi_configure+0x1a>
    68b6:	2a02      	cmp	r2, #2
    68b8:	d00a      	beq.n	68d0 <i2c_nrfx_twi_configure+0x2a>
    68ba:	f06f 0015 	mvn.w	r0, #21
}
    68be:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    68c0:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    68c2:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    68c6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    68ca:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    68cc:	2000      	movs	r0, #0
    68ce:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    68d0:	681b      	ldr	r3, [r3, #0]
    68d2:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    68d6:	e7f6      	b.n	68c6 <i2c_nrfx_twi_configure+0x20>

000068d8 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    68d8:	6902      	ldr	r2, [r0, #16]
{
    68da:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    68dc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    68e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    68e4:	2000      	movs	r0, #0
    68e6:	4770      	bx	lr

000068e8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    68e8:	6843      	ldr	r3, [r0, #4]
    68ea:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    68ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    68f0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    68f4:	4770      	bx	lr

000068f6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    68f6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    68f8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    68fa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68fc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6900:	b150      	cbz	r0, 6918 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    6902:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6904:	2000      	movs	r0, #0
    6906:	7812      	ldrb	r2, [r2, #0]
    6908:	700a      	strb	r2, [r1, #0]
    690a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    690e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6912:	2201      	movs	r2, #1
    6914:	601a      	str	r2, [r3, #0]
	return 0;
    6916:	4770      	bx	lr
		return -1;
    6918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    691c:	4770      	bx	lr

0000691e <is_tx_ready.isra.0>:
	return config->uarte_regs;
    691e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6920:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6922:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6926:	b940      	cbnz	r0, 693a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6928:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    692a:	079b      	lsls	r3, r3, #30
    692c:	d406      	bmi.n	693c <is_tx_ready.isra.0+0x1e>
    692e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6932:	3800      	subs	r0, #0
    6934:	bf18      	it	ne
    6936:	2001      	movne	r0, #1
    6938:	4770      	bx	lr
    693a:	2001      	movs	r0, #1
}
    693c:	4770      	bx	lr

0000693e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    693e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6940:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6942:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6946:	05c9      	lsls	r1, r1, #23
    6948:	d518      	bpl.n	697c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    694a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    694e:	b1a9      	cbz	r1, 697c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6950:	f04f 0020 	mov.w	r0, #32
    6954:	f3ef 8111 	mrs	r1, BASEPRI
    6958:	f380 8812 	msr	BASEPRI_MAX, r0
    695c:	f3bf 8f6f 	isb	sy
    6960:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6964:	b130      	cbz	r0, 6974 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6966:	2000      	movs	r0, #0
    6968:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    696c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6970:	2001      	movs	r0, #1
    6972:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    6974:	f381 8811 	msr	BASEPRI, r1
    6978:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    697c:	6852      	ldr	r2, [r2, #4]
    697e:	06d2      	lsls	r2, r2, #27
    6980:	d515      	bpl.n	69ae <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    6982:	f04f 0120 	mov.w	r1, #32
    6986:	f3ef 8211 	mrs	r2, BASEPRI
    698a:	f381 8812 	msr	BASEPRI_MAX, r1
    698e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6992:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6996:	b111      	cbz	r1, 699e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6998:	2100      	movs	r1, #0
    699a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    699e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    69a2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    69a6:	f382 8811 	msr	BASEPRI, r2
    69aa:	f3bf 8f6f 	isb	sy
}
    69ae:	4770      	bx	lr

000069b0 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    69b0:	b510      	push	{r4, lr}
    69b2:	2200      	movs	r2, #0
    69b4:	4604      	mov	r4, r0
    69b6:	2101      	movs	r1, #1
    69b8:	2028      	movs	r0, #40	; 0x28
    69ba:	f7fb fc29 	bl	2210 <z_arm_irq_priority_set>
    69be:	2028      	movs	r0, #40	; 0x28
    69c0:	f7fb fc0a 	bl	21d8 <arch_irq_enable>
    69c4:	4620      	mov	r0, r4
    69c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69ca:	f7fc bc5d 	b.w	3288 <uarte_instance_init.constprop.0>

000069ce <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    69ce:	b510      	push	{r4, lr}
    69d0:	2200      	movs	r2, #0
    69d2:	4604      	mov	r4, r0
    69d4:	2101      	movs	r1, #1
    69d6:	2002      	movs	r0, #2
    69d8:	f7fb fc1a 	bl	2210 <z_arm_irq_priority_set>
    69dc:	2002      	movs	r0, #2
    69de:	f7fb fbfb 	bl	21d8 <arch_irq_enable>
    69e2:	4620      	mov	r0, r4
    69e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69e8:	f7fc bc4e 	b.w	3288 <uarte_instance_init.constprop.0>

000069ec <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    69ec:	4770      	bx	lr

000069ee <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    69ee:	f100 0350 	add.w	r3, r0, #80	; 0x50
    69f2:	009b      	lsls	r3, r3, #2
    69f4:	b29b      	uxth	r3, r3
    69f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69fa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    69fe:	2200      	movs	r2, #0
    6a00:	601a      	str	r2, [r3, #0]
    6a02:	681b      	ldr	r3, [r3, #0]
}
    6a04:	4770      	bx	lr

00006a06 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6a06:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6a08:	6843      	ldr	r3, [r0, #4]
    6a0a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6a0c:	7a05      	ldrb	r5, [r0, #8]
    6a0e:	6844      	ldr	r4, [r0, #4]
    6a10:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    6a14:	42a3      	cmp	r3, r4
    6a16:	d302      	bcc.n	6a1e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    6a18:	f06f 0001 	mvn.w	r0, #1
}
    6a1c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6a1e:	795c      	ldrb	r4, [r3, #5]
    6a20:	428c      	cmp	r4, r1
    6a22:	d001      	beq.n	6a28 <pinctrl_lookup_state+0x22>
		(*state)++;
    6a24:	3308      	adds	r3, #8
    6a26:	e7f0      	b.n	6a0a <pinctrl_lookup_state+0x4>
			return 0;
    6a28:	2000      	movs	r0, #0
    6a2a:	e7f7      	b.n	6a1c <pinctrl_lookup_state+0x16>

00006a2c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6a2c:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6a2e:	2000      	movs	r0, #0
    6a30:	f7fb ffa4 	bl	297c <sys_arch_reboot>

00006a34 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6a34:	f7fe bf9c 	b.w	5970 <nrf_cc3xx_platform_init_no_rng>

00006a38 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6a38:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6a3a:	f7fb fac1 	bl	1fc0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6a3e:	f7fb fb95 	bl	216c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6a46:	f7fe bf93 	b.w	5970 <nrf_cc3xx_platform_init_no_rng>

00006a4a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6a4a:	4700      	bx	r0

00006a4c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6a4c:	f000 bac7 	b.w	6fde <z_impl_k_busy_wait>

00006a50 <nrfx_clock_enable>:
{
    6a50:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6a52:	2000      	movs	r0, #0
    6a54:	f7fb fbce 	bl	21f4 <arch_irq_is_enabled>
    6a58:	b908      	cbnz	r0, 6a5e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6a5a:	f7fb fbbd 	bl	21d8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a62:	2200      	movs	r2, #0
    6a64:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6a68:	bd08      	pop	{r3, pc}

00006a6a <nrfx_clock_start>:
{
    6a6a:	b508      	push	{r3, lr}
    switch (domain)
    6a6c:	b110      	cbz	r0, 6a74 <nrfx_clock_start+0xa>
    6a6e:	2801      	cmp	r0, #1
    6a70:	d02c      	beq.n	6acc <nrfx_clock_start+0x62>
}
    6a72:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6a78:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6a7c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6a80:	03c8      	lsls	r0, r1, #15
    6a82:	d40b      	bmi.n	6a9c <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6a84:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6a88:	07d9      	lsls	r1, r3, #31
    6a8a:	d50f      	bpl.n	6aac <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6a8c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6a90:	079b      	lsls	r3, r3, #30
    6a92:	d408      	bmi.n	6aa6 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    6a94:	2302      	movs	r3, #2
    6a96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    6a9a:	e7ea      	b.n	6a72 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6a9c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6aa0:	2b01      	cmp	r3, #1
    6aa2:	d004      	beq.n	6aae <nrfx_clock_start+0x44>
    6aa4:	b113      	cbz	r3, 6aac <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6aa6:	2000      	movs	r0, #0
    6aa8:	f7fd f8ca 	bl	3c40 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6aac:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    6aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6ab2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ab6:	2300      	movs	r3, #0
    6ab8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6abc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6ac0:	2302      	movs	r3, #2
    6ac2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ac6:	2301      	movs	r3, #1
    6ac8:	6093      	str	r3, [r2, #8]
}
    6aca:	e7d2      	b.n	6a72 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ad0:	2200      	movs	r2, #0
    6ad2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6ad6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6ada:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ade:	6018      	str	r0, [r3, #0]
}
    6ae0:	e7c7      	b.n	6a72 <nrfx_clock_start+0x8>

00006ae2 <nrfx_clock_stop>:
    clock_stop(domain);
    6ae2:	f7fd b8ad 	b.w	3c40 <clock_stop>

00006ae6 <nrf_gpio_reconfigure>:
{
    6ae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ae8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6aea:	a801      	add	r0, sp, #4
{
    6aec:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    6af0:	4616      	mov	r6, r2
    6af2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6af4:	f7fd f94c 	bl	3d90 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6af8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6afa:	f1b6 0c00 	subs.w	ip, r6, #0
    6afe:	bf18      	it	ne
    6b00:	f04f 0c01 	movne.w	ip, #1
    6b04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6b08:	1e0b      	subs	r3, r1, #0
    6b0a:	bf18      	it	ne
    6b0c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6b0e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6b10:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6b14:	bf14      	ite	ne
    6b16:	f04f 0c0c 	movne.w	ip, #12
    6b1a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6b1e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6b20:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6b24:	bf14      	ite	ne
    6b26:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6b2a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6b2e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6b30:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b34:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6b38:	bf14      	ite	ne
    6b3a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    6b3e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6b42:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6b46:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6b4a:	b101      	cbz	r1, 6b4e <nrf_gpio_reconfigure+0x68>
    6b4c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6b4e:	b10e      	cbz	r6, 6b54 <nrf_gpio_reconfigure+0x6e>
    6b50:	7836      	ldrb	r6, [r6, #0]
    6b52:	0076      	lsls	r6, r6, #1
    6b54:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6b56:	b10d      	cbz	r5, 6b5c <nrf_gpio_reconfigure+0x76>
    6b58:	782d      	ldrb	r5, [r5, #0]
    6b5a:	00ad      	lsls	r5, r5, #2
    6b5c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6b5e:	b10c      	cbz	r4, 6b64 <nrf_gpio_reconfigure+0x7e>
    6b60:	7824      	ldrb	r4, [r4, #0]
    6b62:	0224      	lsls	r4, r4, #8
    6b64:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6b66:	b10f      	cbz	r7, 6b6c <nrf_gpio_reconfigure+0x86>
    6b68:	783f      	ldrb	r7, [r7, #0]
    6b6a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6b6c:	430c      	orrs	r4, r1
    6b6e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    6b70:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6b74:	b003      	add	sp, #12
    6b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006b78 <nrf_gpio_cfg_sense_set>:
{
    6b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6b7a:	f10d 030f 	add.w	r3, sp, #15
    6b7e:	9301      	str	r3, [sp, #4]
    6b80:	2300      	movs	r3, #0
{
    6b82:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6b86:	9300      	str	r3, [sp, #0]
    6b88:	461a      	mov	r2, r3
    6b8a:	4619      	mov	r1, r3
    6b8c:	f7ff ffab 	bl	6ae6 <nrf_gpio_reconfigure>
}
    6b90:	b005      	add	sp, #20
    6b92:	f85d fb04 	ldr.w	pc, [sp], #4

00006b96 <twi_transfer>:
{
    6b96:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b98:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    6b9c:	b12b      	cbz	r3, 6baa <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b9e:	2300      	movs	r3, #0
    6ba0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6ba4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    6ba8:	2301      	movs	r3, #1
    if (p_cb->error)
    6baa:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    6bae:	b322      	cbz	r2, 6bfa <twi_transfer+0x64>
    6bb0:	2200      	movs	r2, #0
    6bb2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    6bb6:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    6bba:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    6bbe:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    6bc2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    6bc6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    6bca:	2b00      	cmp	r3, #0
    6bcc:	d079      	beq.n	6cc2 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    6bce:	2200      	movs	r2, #0
    6bd0:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    6bd4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    6bd8:	2a00      	cmp	r2, #0
    6bda:	d137      	bne.n	6c4c <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    6bdc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    6bde:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    6be0:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6be2:	bf1f      	itttt	ne
    6be4:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    6be6:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6bea:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    6bee:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    6bf0:	f083 0301 	eor.w	r3, r3, #1
    6bf4:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    6bf8:	e028      	b.n	6c4c <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6bfa:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6bfe:	b114      	cbz	r4, 6c06 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c00:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    6c04:	e00e      	b.n	6c24 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c06:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    6c0a:	b36a      	cbz	r2, 6c68 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c0c:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    6c10:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    6c14:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    6c16:	3201      	adds	r2, #1
    6c18:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c1a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6c1e:	b145      	cbz	r5, 6c32 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c20:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    6c24:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c28:	2201      	movs	r2, #1
    6c2a:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    6c2c:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    6c30:	e7cb      	b.n	6bca <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6c32:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    6c34:	42a2      	cmp	r2, r4
    6c36:	d204      	bcs.n	6c42 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    6c38:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    6c3a:	5ca2      	ldrb	r2, [r4, r2]
    6c3c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    6c40:	e7c3      	b.n	6bca <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    6c42:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    6c46:	b11a      	cbz	r2, 6c50 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c48:	2301      	movs	r3, #1
    6c4a:	61c3      	str	r3, [r0, #28]
                    return false;
    6c4c:	2000      	movs	r0, #0
}
    6c4e:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    6c50:	6a0a      	ldr	r2, [r1, #32]
    6c52:	f012 0f40 	tst.w	r2, #64	; 0x40
    6c56:	f04f 0201 	mov.w	r2, #1
    6c5a:	d003      	beq.n	6c64 <twi_transfer+0xce>
    6c5c:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    6c5e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    6c62:	e7f3      	b.n	6c4c <twi_transfer+0xb6>
    6c64:	6142      	str	r2, [r0, #20]
    6c66:	e7b0      	b.n	6bca <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c68:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    6c6c:	2c00      	cmp	r4, #0
    6c6e:	d0ac      	beq.n	6bca <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c70:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    6c74:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c78:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6c7c:	2c00      	cmp	r4, #0
    6c7e:	d1bf      	bne.n	6c00 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6c80:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    6c82:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    6c84:	42a2      	cmp	r2, r4
    6c86:	d2a0      	bcs.n	6bca <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    6c88:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    6c8a:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    6c8e:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    6c90:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6c92:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    6c94:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6c96:	1e65      	subs	r5, r4, #1
    6c98:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    6c9a:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6c9c:	d108      	bne.n	6cb0 <twi_transfer+0x11a>
    6c9e:	6a0a      	ldr	r2, [r1, #32]
    6ca0:	0654      	lsls	r4, r2, #25
    6ca2:	d402      	bmi.n	6caa <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    6ca4:	2202      	movs	r2, #2
    6ca6:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6caa:	2201      	movs	r2, #1
    6cac:	6202      	str	r2, [r0, #32]
    6cae:	e78c      	b.n	6bca <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6cb0:	42a2      	cmp	r2, r4
    6cb2:	d1fa      	bne.n	6caa <twi_transfer+0x114>
    6cb4:	6a0a      	ldr	r2, [r1, #32]
    6cb6:	0652      	lsls	r2, r2, #25
    6cb8:	d587      	bpl.n	6bca <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    6cba:	2302      	movs	r3, #2
    6cbc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    6cc0:	e7c4      	b.n	6c4c <twi_transfer+0xb6>
    return true;
    6cc2:	2001      	movs	r0, #1
    6cc4:	e7c3      	b.n	6c4e <twi_transfer+0xb8>

00006cc6 <nrf_gpio_pin_set>:
{
    6cc6:	b507      	push	{r0, r1, r2, lr}
    6cc8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cca:	a801      	add	r0, sp, #4
    6ccc:	f7fd fe2a 	bl	4924 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6cd0:	9a01      	ldr	r2, [sp, #4]
    6cd2:	2301      	movs	r3, #1
    6cd4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6cd6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    6cda:	b003      	add	sp, #12
    6cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00006ce0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6ce0:	f7fd be92 	b.w	4a08 <_DoInit>

00006ce4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6ce4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6ce6:	f7ff fffb 	bl	6ce0 <SEGGER_RTT_Init>

	return 0;
}
    6cea:	2000      	movs	r0, #0
    6cec:	bd08      	pop	{r3, pc}

00006cee <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6cee:	4770      	bx	lr

00006cf0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6cf0:	b140      	cbz	r0, 6d04 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6cf2:	68c3      	ldr	r3, [r0, #12]
    6cf4:	7858      	ldrb	r0, [r3, #1]
    6cf6:	f010 0001 	ands.w	r0, r0, #1
    6cfa:	bf1e      	ittt	ne
    6cfc:	7818      	ldrbne	r0, [r3, #0]
    6cfe:	fab0 f080 	clzne	r0, r0
    6d02:	0940      	lsrne	r0, r0, #5
}
    6d04:	4770      	bx	lr

00006d06 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d08:	4605      	mov	r5, r0
    6d0a:	460e      	mov	r6, r1
	__asm__ volatile(
    6d0c:	f04f 0320 	mov.w	r3, #32
    6d10:	f3ef 8711 	mrs	r7, BASEPRI
    6d14:	f383 8812 	msr	BASEPRI_MAX, r3
    6d18:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6d1c:	f7fe fc62 	bl	55e4 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6d20:	4631      	mov	r1, r6
    6d22:	4604      	mov	r4, r0
    6d24:	4628      	mov	r0, r5
    6d26:	f7ff fe81 	bl	6a2c <k_sys_fatal_error_handler>
	__asm__ volatile(
    6d2a:	f387 8811 	msr	BASEPRI, r7
    6d2e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6d32:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6d38:	f7fb bcec 	b.w	2714 <z_impl_k_thread_abort>

00006d3c <z_early_memset>:
	(void) memset(dst, c, n);
    6d3c:	f7ff bcad 	b.w	669a <memset>

00006d40 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6d40:	f7ff bca0 	b.w	6684 <memcpy>

00006d44 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6d44:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    6d48:	4313      	orrs	r3, r2
    6d4a:	f013 0303 	ands.w	r3, r3, #3
    6d4e:	d10c      	bne.n	6d6a <create_free_list+0x26>
	slab->free_list = NULL;
    6d50:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6d52:	6881      	ldr	r1, [r0, #8]
    6d54:	4299      	cmp	r1, r3
    6d56:	d801      	bhi.n	6d5c <create_free_list+0x18>
	return 0;
    6d58:	2000      	movs	r0, #0
    6d5a:	4770      	bx	lr
		*(char **)p = slab->free_list;
    6d5c:	6941      	ldr	r1, [r0, #20]
    6d5e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    6d60:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    6d62:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6d64:	3301      	adds	r3, #1
		p += slab->block_size;
    6d66:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    6d68:	e7f3      	b.n	6d52 <create_free_list+0xe>
		return -EINVAL;
    6d6a:	f06f 0015 	mvn.w	r0, #21
}
    6d6e:	4770      	bx	lr

00006d70 <k_mem_slab_init>:
{
    6d70:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    6d72:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    6d76:	2300      	movs	r3, #0
	slab->buffer = buffer;
    6d78:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    6d7a:	6183      	str	r3, [r0, #24]
{
    6d7c:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    6d7e:	f7ff ffe1 	bl	6d44 <create_free_list>
	if (rc < 0) {
    6d82:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    6d84:	bfa8      	it	ge
    6d86:	e9c4 4400 	strdge	r4, r4, [r4]
}
    6d8a:	bd10      	pop	{r4, pc}

00006d8c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d8e:	4604      	mov	r4, r0
    6d90:	460d      	mov	r5, r1
	__asm__ volatile(
    6d92:	f04f 0320 	mov.w	r3, #32
    6d96:	f3ef 8611 	mrs	r6, BASEPRI
    6d9a:	f383 8812 	msr	BASEPRI_MAX, r3
    6d9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6da2:	6947      	ldr	r7, [r0, #20]
    6da4:	b977      	cbnz	r7, 6dc4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6da6:	f000 f8a2 	bl	6eee <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6daa:	b158      	cbz	r0, 6dc4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6dac:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6dae:	6142      	str	r2, [r0, #20]
    6db0:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6db2:	f000 f88c 	bl	6ece <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6db6:	4631      	mov	r1, r6
    6db8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6dbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6dc0:	f7fe bad6 	b.w	5370 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6dc4:	682b      	ldr	r3, [r5, #0]
    6dc6:	6962      	ldr	r2, [r4, #20]
    6dc8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6dca:	682b      	ldr	r3, [r5, #0]
    6dcc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6dce:	69a3      	ldr	r3, [r4, #24]
    6dd0:	3b01      	subs	r3, #1
    6dd2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6dd4:	f386 8811 	msr	BASEPRI, r6
    6dd8:	f3bf 8f6f 	isb	sy
}
    6ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006dde <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6dde:	f3ef 8005 	mrs	r0, IPSR
}
    6de2:	3800      	subs	r0, #0
    6de4:	bf18      	it	ne
    6de6:	2001      	movne	r0, #1
    6de8:	4770      	bx	lr

00006dea <z_pm_save_idle_exit>:
{
    6dea:	b508      	push	{r3, lr}
	pm_system_resume();
    6dec:	f7fa ffde 	bl	1dac <pm_system_resume>
}
    6df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6df4:	f7ff bdfa 	b.w	69ec <sys_clock_idle_exit>

00006df8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6df8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6dfc:	428b      	cmp	r3, r1
    6dfe:	d001      	beq.n	6e04 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6e00:	f7fe ba70 	b.w	52e4 <z_set_prio>
}
    6e04:	2000      	movs	r0, #0
    6e06:	4770      	bx	lr

00006e08 <z_impl_k_mutex_init>:
{
    6e08:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6e0a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6e0c:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6e10:	e9c3 3300 	strd	r3, r3, [r3]
}
    6e14:	4770      	bx	lr

00006e16 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6e16:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6e1a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6e1c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6e1e:	2300      	movs	r3, #0
	node->prev = NULL;
    6e20:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6e24:	4770      	bx	lr

00006e26 <unpend_thread_no_timeout>:
{
    6e26:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6e28:	f7ff fff5 	bl	6e16 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6e2c:	7b43      	ldrb	r3, [r0, #13]
    6e2e:	f023 0302 	bic.w	r3, r3, #2
    6e32:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6e34:	2300      	movs	r3, #0
    6e36:	6083      	str	r3, [r0, #8]
}
    6e38:	bd08      	pop	{r3, pc}

00006e3a <z_thread_timeout>:
{
    6e3a:	b510      	push	{r4, lr}
    6e3c:	4601      	mov	r1, r0
	__asm__ volatile(
    6e3e:	f04f 0320 	mov.w	r3, #32
    6e42:	f3ef 8411 	mrs	r4, BASEPRI
    6e46:	f383 8812 	msr	BASEPRI_MAX, r3
    6e4a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6e4e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6e52:	f013 0f28 	tst.w	r3, #40	; 0x28
    6e56:	d10d      	bne.n	6e74 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6e58:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6e5c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6e5e:	b10b      	cbz	r3, 6e64 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6e60:	f7ff ffe1 	bl	6e26 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6e64:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6e68:	f023 0314 	bic.w	r3, r3, #20
    6e6c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6e70:	f7fe f942 	bl	50f8 <ready_thread>
	__asm__ volatile(
    6e74:	f384 8811 	msr	BASEPRI, r4
    6e78:	f3bf 8f6f 	isb	sy
}
    6e7c:	bd10      	pop	{r4, pc}

00006e7e <add_to_waitq_locked>:
{
    6e7e:	b538      	push	{r3, r4, r5, lr}
    6e80:	4604      	mov	r4, r0
    6e82:	460d      	mov	r5, r1
	unready_thread(thread);
    6e84:	f7fe f96c 	bl	5160 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6e88:	7b63      	ldrb	r3, [r4, #13]
    6e8a:	f043 0302 	orr.w	r3, r3, #2
    6e8e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6e90:	b1e5      	cbz	r5, 6ecc <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    6e92:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    6e94:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e96:	429d      	cmp	r5, r3
    6e98:	d109      	bne.n	6eae <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    6e9a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6e9c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6ea0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6ea2:	606c      	str	r4, [r5, #4]
}
    6ea4:	e012      	b.n	6ecc <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    6ea6:	686a      	ldr	r2, [r5, #4]
    6ea8:	4293      	cmp	r3, r2
    6eaa:	d0f6      	beq.n	6e9a <add_to_waitq_locked+0x1c>
    6eac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d0f3      	beq.n	6e9a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    6eb2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6eb6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    6eba:	428a      	cmp	r2, r1
    6ebc:	d0f3      	beq.n	6ea6 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6ebe:	4291      	cmp	r1, r2
    6ec0:	ddf1      	ble.n	6ea6 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    6ec2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6ec4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6ec8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6eca:	605c      	str	r4, [r3, #4]
}
    6ecc:	bd38      	pop	{r3, r4, r5, pc}

00006ece <z_ready_thread>:
{
    6ece:	b510      	push	{r4, lr}
	__asm__ volatile(
    6ed0:	f04f 0320 	mov.w	r3, #32
    6ed4:	f3ef 8411 	mrs	r4, BASEPRI
    6ed8:	f383 8812 	msr	BASEPRI_MAX, r3
    6edc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6ee0:	f7fe f90a 	bl	50f8 <ready_thread>
	__asm__ volatile(
    6ee4:	f384 8811 	msr	BASEPRI, r4
    6ee8:	f3bf 8f6f 	isb	sy
}
    6eec:	bd10      	pop	{r4, pc}

00006eee <z_unpend_first_thread>:
{
    6eee:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6ef0:	f04f 0320 	mov.w	r3, #32
    6ef4:	f3ef 8511 	mrs	r5, BASEPRI
    6ef8:	f383 8812 	msr	BASEPRI_MAX, r3
    6efc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6f00:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f02:	42a0      	cmp	r0, r4
    6f04:	d00d      	beq.n	6f22 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    6f06:	b134      	cbz	r4, 6f16 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    6f08:	4620      	mov	r0, r4
    6f0a:	f7ff ff8c 	bl	6e26 <unpend_thread_no_timeout>
    6f0e:	f104 0018 	add.w	r0, r4, #24
    6f12:	f000 f81e 	bl	6f52 <z_abort_timeout>
	__asm__ volatile(
    6f16:	f385 8811 	msr	BASEPRI, r5
    6f1a:	f3bf 8f6f 	isb	sy
}
    6f1e:	4620      	mov	r0, r4
    6f20:	bd38      	pop	{r3, r4, r5, pc}
    6f22:	2400      	movs	r4, #0
    6f24:	e7f7      	b.n	6f16 <z_unpend_first_thread+0x28>

00006f26 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6f26:	4603      	mov	r3, r0
    6f28:	b920      	cbnz	r0, 6f34 <z_reschedule_irqlock+0xe>
    6f2a:	f3ef 8205 	mrs	r2, IPSR
    6f2e:	b90a      	cbnz	r2, 6f34 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6f30:	f7fb b9a6 	b.w	2280 <arch_swap>
    6f34:	f383 8811 	msr	BASEPRI, r3
    6f38:	f3bf 8f6f 	isb	sy
}
    6f3c:	4770      	bx	lr

00006f3e <z_reschedule_unlocked>:
	__asm__ volatile(
    6f3e:	f04f 0320 	mov.w	r3, #32
    6f42:	f3ef 8011 	mrs	r0, BASEPRI
    6f46:	f383 8812 	msr	BASEPRI_MAX, r3
    6f4a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6f4e:	f7ff bfea 	b.w	6f26 <z_reschedule_irqlock>

00006f52 <z_abort_timeout>:
{
    6f52:	b510      	push	{r4, lr}
    6f54:	f04f 0220 	mov.w	r2, #32
    6f58:	f3ef 8411 	mrs	r4, BASEPRI
    6f5c:	f382 8812 	msr	BASEPRI_MAX, r2
    6f60:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6f64:	6803      	ldr	r3, [r0, #0]
    6f66:	b13b      	cbz	r3, 6f78 <z_abort_timeout+0x26>
			remove_timeout(to);
    6f68:	f7fe fbee 	bl	5748 <remove_timeout>
			ret = 0;
    6f6c:	2000      	movs	r0, #0
	__asm__ volatile(
    6f6e:	f384 8811 	msr	BASEPRI, r4
    6f72:	f3bf 8f6f 	isb	sy
}
    6f76:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6f78:	f06f 0015 	mvn.w	r0, #21
    6f7c:	e7f7      	b.n	6f6e <z_abort_timeout+0x1c>

00006f7e <z_get_next_timeout_expiry>:
{
    6f7e:	b510      	push	{r4, lr}
	__asm__ volatile(
    6f80:	f04f 0320 	mov.w	r3, #32
    6f84:	f3ef 8411 	mrs	r4, BASEPRI
    6f88:	f383 8812 	msr	BASEPRI_MAX, r3
    6f8c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6f90:	f7fe fbb2 	bl	56f8 <next_timeout>
	__asm__ volatile(
    6f94:	f384 8811 	msr	BASEPRI, r4
    6f98:	f3bf 8f6f 	isb	sy
}
    6f9c:	bd10      	pop	{r4, pc}

00006f9e <z_set_timeout_expiry>:
{
    6f9e:	b570      	push	{r4, r5, r6, lr}
    6fa0:	4604      	mov	r4, r0
    6fa2:	460d      	mov	r5, r1
	__asm__ volatile(
    6fa4:	f04f 0320 	mov.w	r3, #32
    6fa8:	f3ef 8611 	mrs	r6, BASEPRI
    6fac:	f383 8812 	msr	BASEPRI_MAX, r3
    6fb0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6fb4:	f7fe fba0 	bl	56f8 <next_timeout>
			      || (ticks <= next_to);
    6fb8:	2801      	cmp	r0, #1
    6fba:	dd07      	ble.n	6fcc <z_set_timeout_expiry+0x2e>
    6fbc:	42a0      	cmp	r0, r4
    6fbe:	db05      	blt.n	6fcc <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6fc0:	42a0      	cmp	r0, r4
    6fc2:	4629      	mov	r1, r5
    6fc4:	bfa8      	it	ge
    6fc6:	4620      	movge	r0, r4
    6fc8:	f7fc fc06 	bl	37d8 <sys_clock_set_timeout>
	__asm__ volatile(
    6fcc:	f386 8811 	msr	BASEPRI, r6
    6fd0:	f3bf 8f6f 	isb	sy
}
    6fd4:	bd70      	pop	{r4, r5, r6, pc}

00006fd6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6fd6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6fd8:	f7fe fcaa 	bl	5930 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6fdc:	bd08      	pop	{r3, pc}

00006fde <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6fde:	b108      	cbz	r0, 6fe4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6fe0:	f7fb bce2 	b.w	29a8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6fe4:	4770      	bx	lr

00006fe6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6fe6:	4770      	bx	lr
